[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "\u003d EYLAH"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "https://travis-ci.com/AY1920S2-CS2103T-W13-1/main[image:https://travis-ci.com/AY1920S2-CS2103T-W13-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "https://ci.appveyor.com/project/sheexiong/main[image:https://ci.appveyor.com/api/projects/status/dbj3b59a50xf8eem?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "https://coveralls.io/github/AY1920S2-CS2103T-W13-1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S2-CS2103T-W13-1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "https://app.netlify.com/sites/ay1920s2-cs2103t-w13-1/deploys[image:https://api.netlify.com/api/v1/badges/5ebe9958-eee5-43c0-be10-cbca1f303638/deploy-status[Netlify Status]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* This is a desktop Diet Tracker and Expense Splitter, 2 in 1 application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* It is a Java sample application intended for students learning Software Engineering while using Java as the main programming language."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* It is *written in OOP fashion*. It provides a *reasonably well-written* code example that is *significantly bigger* (around 6 KLoC)than what students usually write in beginner-level SE modules."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 4,
      "akhilvuputuri": 2,
      "WillySeahh": 1,
      "-": 28
    }
  },
  {
    "path": "bin/main/view/CommandBox.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 9
    }
  },
  {
    "path": "bin/main/view/HelpWindow.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 39
    }
  },
  {
    "path": "bin/main/view/MainWindow.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         title\u003d\"EYLAH\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 60
    }
  },
  {
    "path": "bin/main/view/PersonListCard.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "      \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 35
    }
  },
  {
    "path": "bin/main/view/PersonListPanel.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 8
    }
  },
  {
    "path": "bin/main/view/ResultDisplay.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 9
    }
  },
  {
    "path": "bin/main/view/StatusBarFooter.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 12
    }
  },
  {
    "path": "bin/test/view/UiPartTest/invalidFile.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Not a valid FXML file"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 1
    }
  },
  {
    "path": "bin/test/view/UiPartTest/validFile.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?import seedu.eylah.addressbook.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 4
    }
  },
  {
    "path": "bin/test/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003cfx:root type\u003d\"seedu.eylah.addressbook.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 6
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "mainClassName \u003d \u0027seedu.eylah.Eylah\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    implementation \u0027junit:junit:4.12\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    archiveName \u003d \u0027[CS2103T-W13-1][EYLAH].jar\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        \u0027site-name\u0027: \u0027EYLAH\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-W13-1/main\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 1,
      "sheexiong": 4,
      "-": 151
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d EYLAH - About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "EYLAH was developed by the https://github.com/AY1920S2-CS2103T-W13-1[AY1920S2-CS2103T-W13-1] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d Willy Seah Wee Hung"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "image::willyseahh.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "{empty}[https://github.com/WillySeahh[github]] [\u003c\u003cwillyseahh#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Role: Team Representative +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Responsibilities: Team Facilitation, Expense Splitter"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d Tng Liang Yi, Ailanthus"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "image::ailanthustng.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "{empty}[http://github.com/ailanthustng[github]] [\u003c\u003cailanthustng#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Responsibilities: Expense Splitter Lead"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d Chen Shee Xiong"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "image::sheexiong.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "{empty}[http://github.com/sheexiong[github]] [\u003c\u003csheexiong#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "Role: Developer \u0026 Integration +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Responsibilities: Project Repository Management, Code Integration, Expense Splitter, UI"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "\u003d\u003d\u003d Akhil Vuputuri"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "image::akhilvuputuri.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "{empty}[http://github.com/akhilvuputuri[github]] [\u003c\u003cakhilvuputuri#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Responsibilities: Diet Tracker Storage, Overall Coordinator for Components"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d Ng Jun Guang, Jarrod"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "image::jarrod-bob.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "{empty}[http://github.com/Jarrod-Bob[github]] [\u003c\u003cJarrod-Bob#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Responsibilities: Diet Tracker Parsers and Command, Main Diagrams for Diet Tracker Commands"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 6,
      "sheexiong": 6,
      "ailanthustng": 2,
      "WillySeahh": 8,
      "akhilvuputuri": 3,
      "-": 31
    }
  },
  {
    "path": "docs/BobDG.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d EYLAH - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W13-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "By: `AY1920S2-CS2103T-W13-1`      Since: `Jan 2020`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Ease Your Lives At Hall (EYLAH) is a Command Line Interface (CLI) application designed to aid students staying in NUS with commonly faced problems in halls such as,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "tracking their diet and splitting the bill with a large group of friends."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Shown below is the GUI of EYLAH."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::Ui.png[]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "This documentation serves as an introduction to the architecture and implementation of EYLAH,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "and is made for developers who wish to maintain,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "modify or understand the software development behind our application."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "We adopted the top-down approach; we will first look into high-level"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "architectures before exploring implementation details of each feature."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "We encourage you to traverse the full path from the high level design to the"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "implementation details of the feature you are interested for the most complete understanding."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::ArchitectureSequenceDiagram.png[] +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d EYLAH comprehensive class diagram for both Diet Tracker and Expense Spliter"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::eylah_overall_class_diagram.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "This shows a brief class diagram for EYLAH. [More details to be added in v1.3]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d EYLAH Activity Diagram for Expense Splitter"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::activityDiagram_for_expensesplitter.png[]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "This shows a brief activity diagram for Expense Splitter. [More details to be added in v1.3]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The sections below give more details of each component. +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/splitterModel/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "As a more OOP splitterModel, we can store a `Tag` list in `Address Book`, which `person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `person` needing their own `Tag` object. An example of how such a splitterModel may look like is given below. +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/splitterStorage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d DietTracker feature"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The Diet Tracker feature is designed to aid our users in maintaining a healthy lifestyle. The feature comprises"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "of 9 Commands."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* \u003c\u003cAdd-Command, `AddCommand`\u003e\u003e - Creates a new Food object with its attributes (Name, Calories) and adds it to the FoodBook Storage."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* \u003c\u003cDelete-Command, `DeleteCommand`\u003e\u003e - Deletes the Food specified by the input index from FoodBook Storage."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* \u003c\u003cList-Command, `ListCommand`\u003e\u003e - Lists the Foods and its attributes (Name, Calories) for the timeframe specified by users"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "based on their user input."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* \u003c\u003cEdit-Command, `EditCommand`\u003e\u003e - Allows the user to edit an of the Food in Storage."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* \u003c\u003cBmi-Command, `BmiCommand`\u003e\u003e - Calculates the BMI."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* \u003c\u003cHeight-Command, `HeightCommand`\u003e\u003e - Allows users to log their Height in centimeters."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* \u003c\u003cWeight-Command, `WeightCommand`\u003e\u003e - Allows users to log their Weight in kilograms."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* \u003c\u003cMode-Command, `ModeCommand`\u003e\u003e - Allows users to toggle between different modes of the diet tracker."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* \u003c\u003cHelp-Command, `HelpCommand`\u003e\u003e - Provides a help guide for users based on what commands are available."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Below are some diagrams to explain how our team implemented this portion."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Activity Diagram* of Diet Tracker: +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::activityDiagram_for_expensesplitter.png[]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Add Command"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Delete Command"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Implementation*"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following is a detailed explanation of the operations `DeleteCommand` performs. +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "1. The `DeleteCommand#execute(Model splitterModel)` method is executed and it validates that the specified `INDEX` to delete"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "is within range. If valid, the item to be deleted will be retrieved from Storage using its `Index`."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2. The method `Model#getFilteredFoodList() will then be called to retrieve the List of Foods from Storage."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`List#get(int Index)` is then invoked which retrieves the specified Food to be deleted."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "3. The method `Model#deleteFood(Food food) will then be called to remove the Item from the List."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`FoodBook#remove(int Index)` is invoked which makes a call to its internal list to remove the specified Food."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "4. If successful, a success message will be generated by `CommandResult` and it will be returned with the generated"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "success message. Otherwise, an error message showing the correct command syntax is thrown as `CommandException`."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "5. If the command syntax was valid and Food was removed from FoodBook, `LogicManager` calls"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`FoodBookStorage#saveFoodBook(ReadOnlyFoodBook foodBook)` which saves the new Foods"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "into JSON format after serializing it using `JsonAdaptedFood`."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following is a sample sequence diagram of the DeleteItemCommand."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::.png[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d List Command"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Implementation*"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following is a detailed explanation of the operations `ListCommand` performs. +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "1. The `ListCommand#execute(Model splitterModel)` method is executed and it validates that the flag used to decide what"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Foods to list. If the flag is valid, the items to be listed will be retrieved from FoodBookStorage according"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "to the input flag."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "2. The method `splitterModel#updateFilteredFoodList() will then be called to retrieve the List of Foods from Storage."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`FilteredList#setPredicate(Predicate\u003cFood\u003e predicate)` is then invoked which retrieves the specified Foods to be listed."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "3. If successful, a success message will be generated by `CommandResult` and it will be returned with the generated"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "success message. Otherwise, an error message showing the correct command syntax is thrown as `CommandException`."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following is a sample sequence diagram of the ListCommand."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerListCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Edit Command"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Implementation*"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following is a detailed explanation of the operations `EditCommand` performs. +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "1. The `EditCommand#execute(Model splitterModel)` method is executed and it validates that the specified `INDEX` to edit"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "is within range. If valid, the item to be edited will be retrieved from Storage using its `Index`."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2. The method `Model#getFilteredFoodList() will then be called to retrieve the List of Foods from Storage."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`List#get(int Index)` is then invoked which retrieves the specified Food to be deleted."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "3. The method `Model#setFood(Food toBeEdited, Food editedFood)` will then be called to replace the Food toBeEdited with the"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " Food editedFood from the List."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "4. If successful, a success message will be generated by `CommandResult` and it will be returned with the generated"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "success message. Otherwise, an error message showing the correct command syntax is thrown as `CommandException`."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "5. If the command syntax was valid and Food was edited in FoodBook, `LogicManager` calls"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`FoodBookStorage#saveFoodBook(ReadOnlyFoodBook foodBook)` which saves the new Foods"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "into JSON format after serializing it using `JsonAdaptedFood`."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following is a sample sequence diagram of the EditCommand."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerEditCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Bmi Command"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Implementation*"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following is a detailed explanation of the operations `BmiCommand` performs. BmiCommand has two different usages"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "depending on the user input. +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "1. The `BmiCommand#execute(Model splitterModel)` method is executed and it will return the output of the calculated BMI"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "based on user arguments."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2. If successful, a success message will be generated by `CommandResult` and it will be returned with the generated"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "success message. Otherwise, an error message showing the correct command syntax is thrown as `CommandException`."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The activity diagram of `BmiCommand` is as follows:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::BmiActivityDiagram.png[]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Given below are 2 example usages of `BmiCommand` based on different user input."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Usage 1: No Height and Weight input*"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Step 1. User launches application and enters `Diet` mode. The user then enters `bmi` as the command."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Step 2. The FoodBook parser validates this command and sets up the `BmiCommandParser`, which checks for the input."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Step 3. Since there are no arguments, the `BmiCommandParser` will call the empty constructor `BmiCommand()`."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "Step 4. `BmiCommand` would then refer to the internal state of the splitterModel under Self, and retrieve the values stored in"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Self\u0027s Height and Weight attributes."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Step 5. `BmiCommand()` will then proceed to calculate the BMI based on the current values of height and weight."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following is a sample sequence diagram of the BmiCommand with no additional user input."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::BmiNILSequenceDiagram.png[]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "There is a need to ensure that there are stored values in `Height` and `Weight` attributes in the `Self` class."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Usage 2: With Height and Weight input*"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Step 1. User launches application and enters `Diet` mode. The user then enters `bmi` as the command."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Step 2. The FoodBook parser validates this command and sets up the `BmiCommandParser`, which checks for the input."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Step 3. Since there are no arguments, the `BmiCommandParser` will call the empty constructor `BmiCommand()`."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "Step 4. `BmiCommand` would then refer to the internal state of the splitterModel under Self, and retrieve the values stored in"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Self\u0027s Height and Weight attributes."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Step 5. `BmiCommand()` will then proceed to calculate the BMI based on the current values of height and weight."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following is a sample sequence diagram of the BmiCommand with additional user input."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::BmiSequenceDiagram.png[]"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Design Considerations*"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Aspect: How BmiCommand executes"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* Alternative 1 (current choice): Executes with other without arguments"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Pros: More flexible use of the Command, better user experience overall."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Cons: Harder to implement, as there needs to be multiple `BmiCommand` constructors."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* Alternative 2: Executes separately with arguments input and without arguments input"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Pros: Easier to implement, less potential bugs as Command uses a single constructor."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Cons:  We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Aspect: Storage of BMI"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "* Alternative 1 (current choice): No splitterStorage of BMI value, simply prints when user requests."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Pros: Less memory used; reduces complexity of the Command and objects involved."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Cons: Users may want to access it elsewhere from Self."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* Alternative 2: Storage of BMI value in Self class in Model."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Pros: Users have access to it anytime."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Cons: Coding complexity."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Height Command"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Implementation*"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following is a detailed explanation of the operations `HeightCommand` performs. +"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "1. The `HeightCommand#execute(Model splitterModel)` method is executed and it validates that the specified `HEIGHT` to store"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "is a valid Height. If valid, the height will be stored in the `Self` class."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2. The method `Model#setHeight(Height height) will then be called to set the Height of the `Self` class."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`Self#setHeight(Height height)` is invoked which makes a call to its internal Height to replace the value stored."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "3. If successful, a success message will be generated by `CommandResult` and it will be returned with the generated"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "success message. Otherwise, an error message showing the correct command syntax is thrown as `CommandException`."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following is a sample sequence diagram of the HeightCommand."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerHeightCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Weight Command"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Implementation*"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following is a detailed explanation of the operations `WeightCommand` performs. +"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "1. The `WeightCommand#execute(Model splitterModel)` method is executed and it validates that the specified `WEIGHT` to store"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "is a valid Weight. If valid, the weight will be stored in the `Self` class."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2. The method `Model#setWeight(Weight weight) will then be called to set the Height of the `Self` class."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`Self#setWeight(Weight weight)` is invoked which makes a call to its internal Weight to replace the value stored."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "3. If successful, a success message will be generated by `CommandResult` and it will be returned with the generated"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "success message. Otherwise, an error message showing the correct command syntax is thrown as `CommandException`."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following is a sample sequence diagram of the WeightCommand."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerWeightCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Mode Command"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Implementation*"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following is a detailed explanation of the operations `ModeCommand` performs. +"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "1. The `ModeCommand#execute(Model splitterModel)` method is executed and it validates that the specified `MODE` to store"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "is a valid Mode. If valid, the mode will be stored in the `Self` class."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2. The method `Model#setMode(Mode mode) will then be called to set the Mode of the `Self` class."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`Self#setMode(Mode mode)` is invoked which makes a call to its internal Mode to replace the value stored."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "3. If successful, a success message will be generated by `CommandResult` and it will be returned with the generated"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "success message. Otherwise, an error message showing the correct command syntax is thrown as `CommandException`."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following is a sample sequence diagram of the ModeCommand."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerModeCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d Expense Splitter feature"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The Expense Splitter feature is designed to aid our users with the splitting of large bills that involves meany people."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The feature comprises of six commands namely."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* \u003c\u003cAdd-Item-Command, `AddItemCommand`\u003e\u003e - Creates an Item with its ItemPrice, Person(s) involved in splitting that Item and adds it to Receipt."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* \u003c\u003cDelete-Item-Command, `DeleteItemCommand`\u003e\u003e - Deletes an Item from the current Receipt and reduces the Person\u0027s amount accordingly."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* \u003c\u003cList-Receipt-Command, `ListReceiptCommand`\u003e\u003e - Lists the Item(s) in the current Receipt, its ItemPrice and Person(s) involved in splitting that Item."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* \u003c\u003cList-Amount-Command, `ListAmountCommand`\u003e\u003e - Lists the Person(s) Name and Amount they owe the user."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* \u003c\u003cPaid-Command, `PaidCommand`\u003e\u003e - Reduces the Amount a Person owes."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* \u003c\u003cBack-Command, `BackCommand`\u003e\u003e - Exits Expense Splitter portion to return to EYLAH\u0027s Main Menu."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Below are some diagrams to explain how our team implemented this portion."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Activity Diagram* of Expense Splitter: +"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::activityDiagram_for_expensesplitter.png[]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Add Item Command"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Delete Item Command"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Implementation*"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following is a detailed explanation of the operations `DeleteItemCommand` performs. +"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "1. The `DeleteItemCommand#execute(Model splitterModel)` method is executed and it validates that the specified `INDEX` to delete"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "is within range. If valid, the item to be deleted will be retrieved from Receipt using its I`Index`."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2. The method `Model#deleteEntry(int Index) will then be called to remove the Item from the Receipt."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`Receipt#deleteEntry(int Index)` is invoked which makes a call to its internal list to remove the specified Item."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "3. If successful, a success message will be generated by `CommandResult` and it will be returned with the generated"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "success message. Otherwise, an error message showing the correct command syntax is thrown as `CommandException`."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "4. If the command syntax was valid and Item was removed from Receipt, `LogicManager` calls"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`PersonAmountStorage#savePersonAmountBook(ReadOnlyPersonAmountBook personAmountBook)` which saves the new Person(s) Amount"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "into JSON format after serializing it using `JsonAdaptedPerson`."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following is a sample sequence diagram of the DeleteItemCommand."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::ExpenseSplitterDeleteItemCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d List Receipt Command"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Implementation*"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d List Amount Command"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Implementation*"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following is a detailed explanation of the operations `ListAmountCommand` performs. +"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "1. The `ListAmountCommand#execute(Model splitterModel)` method is executed."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2. The method `Model#listAmount()` will then be called to return the list of person with amount."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "3. `PersonAmountBook#toString()` will convert list of person in the list to the expected format."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following is a sample sequence diagram of the ListAmountCommand."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::ExpenseSplitterListAmountCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Paid Command"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Back Command"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* \u003c\u003ctemasek-hall,Temasek Hall\u003e\u003e residents"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* Diet-conscious residents"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* Residents who frequently pays on behalf of a group"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* Residents who prefer desktop applications"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* Residents who can type fast"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* Residents who prefer typing over using the mouse"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* Residents who are reasonably comfortable using \u003c\u003ccli,CLI\u003e\u003e applications"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Value proposition*: manage diet and expenses faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|`* * *` |Temasek Hall resident |want to keep track of my expenses accurately |calculate the exact amount I should collect from my friends after each time we split a meal"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|`* * *` |healthy hall resident who is trying to lose weight |check how many calories I took today |keep track of my calories intake and weight"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|`* * *` |Temasek hall resident who frequents supper food spots |split the bill easily with fellow mates| ensure that the amount is correctly accounted for"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|`* * *` |Temasek Hall resident who wants to stay healthy |keep track of my calories |more accurately watch my weight"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|`*` |Temasek Hall leader |keep track of my committee events |know if things are going according to schedule"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|`*` |Temasek Hall exchange student |to have a translation for Singaporean lingo |better understand the language my friends speak in hall"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|`*` |Temasek Hall sports captain |to keep track of the various attendances for my training |know who usually attends training and who does not"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|`*` |Temasek Hall leader |to keep track of my committee events |ensure things run smoothly"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|`*` |Temasek Hall resident who actively participates in hall events |check the upcoming events |keep myself up-to-date."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "(For all use cases below, the *System* is the `EYLAH` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d Diet Tracker Use Cases"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC01 Update User Profile"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "1.  User chooses dieting mode (i.e. Weight Loss, Weight Gain, Maintain)"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2.  EYLAH updates users\u0027 dieting mode"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "3.  User updates height"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "4.  EYLAH updates height of user"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "5.  User updates weight"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "6.  EYLAH updates weight of user"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "+"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* 1a. The flag field for dieting mode is empty or flag is invalid."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 1a1. EYLAH requests user to re-enter command with flag"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 1a2. User enters command with flag +"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Steps 1a1-1a2 are repeated until the correct entered is correct. +"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use case resumes from step 3."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* 3a. Height field is empty or in invalid format."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 3a1. EYLAH requests user to re-enter height in correct format"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 3a2. User enters command with height in correct format +"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Steps 3a1-3a2 are repeated until the correct  entered is correct. +"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use case resumes from step 5."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* 5a. Weight field is empty or in invalid format."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 5a1. EYLAH requests user to re-enter weight in correct format"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 5a2. User enters command with weight in correct format +"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Steps 5a1-5a2 are repeated until the correct  entered is correct. +"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC02 Add Food Item"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "1.  User adds food item"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2.  EYLAH adds food item to user\u0027s log"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "+"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* 1a. The food item is added in an invalid format or certain fields are missing."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 1a1. EYLAH requests user to re-enter food item in valid format."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 1a2. User enters command in the correct format as requested by EYLAH +"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Steps 1a1-1a2 are repeated until the correct entered is correct. +"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC03 Delete Food Item"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "1.  User lists out existing items"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2.  EYLAH shows the list based on flags entered"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "3.  User deletes item by index"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "4.  EYLAH deletes item tagged to specified index"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "+"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* 1a. List command contains invalid flag."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 1a1. EYLAH prints out default list which contains food logged for the day"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* 3a. Invalid or empty index keyed into command."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 3a1. EYLAH requests user to re-enter index in correct format"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 3a2. User enters delete item in  correct format +"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Steps 3a1-3a2 are repeated until the correct  entered is correct. +"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC04 Edit Food Item"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "1.  User lists out existing items"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2.  EYLAH shows the list based on flags entered"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "3.  User edits item by index"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "4.  EYLAH edits the data of the item stored at the index."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "+"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* 1a. List command contains invalid flag."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 1a1. EYLAH prints out default list which contains food logged for the day"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* 3a. Invalid or empty index keyed into command."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 3a1. EYLAH requests user to re-enter index in correct format"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 3a2. User enters delete item in  correct format +"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Steps 2a1-2a2 are repeated until the correct  entered is correct. +"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* 3b. No additional tags and data keyed in as flags to replace existing data."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 3b1. EYLAH requests user to re-enter command with at least one flag"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 3b2. User enters command with flag and data +"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Steps 3b1-3b2 are repeated until the correct  entered is correct. +"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC05 List Food Items"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "1.  User lists out existing items"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2.  EYLAH shows the list based on flags entered"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "+"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* 1a. List command contains invalid flag."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 1a1. EYLAH prints out default list which contains food logged for the day"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "+"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC06 Calories count"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "1.  User calls the command"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2.  EYLAH shows the list food, their calories, as well as the total calories consumed for the day"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "3.  User can track their remaining calories via the interface, based on their input height and weight"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "+"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* 1a. Invalid argument keyed into command."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 1a1. EYLAH would raise a **\"errorneous argument\"** message"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 1a2. EYLAH would run the command and calculate the outputs ignoring additional arguments"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC07 Calculate BMI"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "1.  User calls `bmi` command, with optional height and weight entered"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2.  EYLAH calculates and shows user\u0027s BMI based on the height and weight"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "+"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* 1a. BMI command contains invalid flag."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 1a1. EYLAH suggests to user the correct format to use"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 1a2. User will key in the correct format"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d Expense Splitter Use Cases"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC01 - Add item"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "1.  User keys in Food name, its price and Person(s) involved in the splitting of that food."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2.  EYLAH adds the Food object."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "3.  EYLAH displays the Food and the Person(s) involved with splitting of that food."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "+"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* 1a. EYLAH detects empty Food name, Food price or Person(s)"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "+"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 1a1. EYLAH shows an error message and displays an example of a correct `addfood` function."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "+"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* 1b. Eylah detects invalid \u003c\u003csyntax,syntax\u003e\u003e."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "+"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 1b1. EYLAH shows an error message and displays an example of a correct `addfood` function."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "+"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC02 - Delete item"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Actor:* User +"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Preconditions:* User is logged in. +"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Guarantees:* +"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Item will be deleted from Receipt only if the Item is currently present in Receipt."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "1.  User keys in request to delete an Item in the current Receipt."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2.  EYLAH deletes that Item and deducts the appropriate amount associated with each Person(s) involved in splitting that Item."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "3.  EYLAH display a MESSAGE_SUCCESS informing user that Item have been successfully deleted."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "+"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* 1a. User did not input Item index. (Inserting `deleteitem` instead of  `deleteitem 1`)"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "+"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 1a1. EYLAH shows an error message and displays an example of a correct `deletitem` function."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "+"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d Use case: UC03 - Listing Receipt"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Actor:* User +"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Preconditions:* User is logged in. +"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Guarantees:* +"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "All Items in the current Receipt will be listed out."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "1.  User requests to list receipt containing Item(s) in the current Receipt."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2.  EYLAH displays the list of Item(s) in the current Receipt, its ItemPrice and Person(s) involved in spliting that Item."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "+"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* 1a. EYLAH detects an empty Receipt."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "+"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 1a1. EYLAH displays an error message, saying that the Receipt has 0 Item."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "+"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d Use case: UC04 - Listing Person(s) and the Amount they owe"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Actor:* User +"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Preconditions:* User is logged in. +"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Guarantees:* +"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "All Person(s) and the amount they owe will be listed."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "1.  User requests to list the Person(s) and the Amount they owe the user."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2.  EYLAH displays the list of Person and its associated Amount."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "+"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* 1a. EYLAH detects an empty Person list."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "+"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 1a1. EYLAH displays an error message, informing user that there are no Person in the list."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "+"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d Use case: UC05 - Amount paid"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Actor:* User +"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Preconditions:* User is logged in. +"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Guarantees:* +"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Reduces the Amount a Person owes and if they owe $0 the Person is automatically deleted."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "1.  User requests to reduce the Person\u0027s Amount when he/she has paid the user."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2.  EYLAH searches for the Person and reduces the Amount they owe the user, if Amount \u003d $0 the Person is removed from the list."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "3.  EYLAH then displays the new Amount owed by the Person"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "+"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* 1a. EYLAH detects an empty PersonList."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "+"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 1a1. EYLAH displays an error message, saying that there is no Person in the list."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "+"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* 1b. EYLAH detects invalid \u003c\u003csyntax,syntax\u003e\u003e."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "+"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 1b1. EYLAH displays an error message and informs User to key in the correct syntax."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "+"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* 1c. EYLAH detects that the Person does not exist in the list."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "+"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 1c1. EYLAH displays an error message, informing the user to key in the correct index of the Person. The user may use `listamount` to show the Person\u0027s index."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "+"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d Use case: UC06 - Back to Main Menu"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "1.  User requests to exit Expense Splitter and go back to Main Menu of EYLAH."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2.  EYLAH exits Expense Splitter and goes back to Main Menu"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "+"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".  Should be able to hold up to 1000 food items without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".  Should have a pre-loaded list of commonly consumed food items in database."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".  Should be able to work without internet access."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".  A user should be able to use EYLAH easily and intuitively."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[temasek-hall]] Temasek Hall::"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "A Hall of Residences in National University of Singapore"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[cli]] CLI::"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Command Line Interface"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[syntax]] Syntax::"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The structure of statements in the command"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 1047,
      "sheexiong": 16
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d EYLAH - Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S2-CS2103T-W13-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* *Email us* : You can also reach us at:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Chen Shee Xiong: `sheexiong [at] u.nus.edu`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Willy Seah: `e0310561 [at] u.nus.edu`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Ailanthus Tng: `ailanthustng [at] u.nus.edu`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Jarrod Ng: `jarrod.ng [at] u.nus.edu`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Akhil Vuputuri: `akhilvuputuri [at] u.nus.edu`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 5,
      "sheexiong": 3,
      "ailanthustng": 1,
      "WillySeahh": 1,
      "-": 4
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d EYLAH - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W13-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".  Update the version number in link:{repoURL}/blob/master/src/main/java/seedu/eylah/Eylah.java[`Eylah.java`]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "A project often depends on third-party libraries. For example, EYLAH depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 2,
      "sheexiong": 1,
      "ailanthustng": 1,
      "-": 44
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d EYLAH - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W13-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "By: `AY1920S2-CS2103T-W13-1`      Since: `Feb 2020`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d About EYLAH"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Ease Your Lives At Hall (EYLAH) is a Command Line Interface (CLI) application designed to aid students staying in"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Temasek Hall within the National University of Singapore* with commonly faced problems such as,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*tracking their diet* and *splitting a large bill* with a group of friends."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Shown below is the CLI of EYLAH."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "image::Ui.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d About this guide"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "This documentation serves as an introduction to the architecture and implementation of EYLAH,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "and is made for developers who wish to maintain,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "modify or understand the software development behind our application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "We adopted the top-down approach; we will first look into high-level"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "architectures before exploring implementation details of each feature."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "We encourage you to traverse the full path from the high level design to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "implementation details of the feature you are interested for the most complete understanding."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d Tips on reading the Developer Guide"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "While reading the Developer Guide you may encounter some symbols."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "These symbols are used to highlight crucial information and in this portion we are explaining (or will be explaining)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "the symbols and their meaning."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "This block of text with a blue exclamation mark indicates *additional notes* and *information* that the user should"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "consider to prevent unexpected behaviour."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "This block of text with a yellow light bulb indicates *additional tips* that will help the user when using EYLAH."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "This symbol indicates warnings."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "`markup` - A grey highlight (known as a mark-up) indicates keywords, including commands you can type into EYLAH."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "//tag::design-architecture[]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the application. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/tree/master/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "link:{repoURL}/blob/master/src/main/java/seedu/eylah/Eylah.java[`EYLAH`] contains the main class for the application. It is responsible for,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and `MODELogic.java` interface and exposes its functionality using the `MODELogicManager.java` class."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `deleteitem 1`."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".Component interactions for `deleteitem 1` command"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*API* : link:{repoURL}/blob/master/src/main/java/seedu/eylah/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "Th `UI Component` mainly deals with interactions with the user. It also plays a part in the initialisation of the program"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "printing the logo, welcome message and main menu page to user. This component only has 2 classes, `Ui.java` and `UiManager.java`."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "* Reading the user input."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "* Displaying the result messages to the user."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "link:{repoURL}/blob/master/src/main/java/seedu/eylah/commons/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "link:{repoURL}/blob/master/src/main/java/seedu/eylah/diettracker/logic/DietLogic.java[`DietLogic.java`]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "link:{repoURL}/blob/master/src/main/java/seedu/eylah/expensesplitter/logic/SplitterLogic.java[`SplitterLogic.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "The `Logic Component` deals with the logic flows of the App. In each feature mode, the components to deal with the logic"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "flow are different. In `Diet Tracker` mode, `DietLogic.java` and `DietLogicManager.java` are used to handle the logic operation of the APP."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "In `Expense Splitter` mode, `SplitterLogic.java` and `SplitterLogicManager.java` are used to handle the logic operation."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "* `MODE` used in the given subsection refers to `Diet` when in `Diet Tracker` mode, `Splitter` when in"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "`Expense Splitter` mode. For example, `MODELogic` given below refers to `SplitterLogic` when in `Expense Splitter` mode."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* `MODEParser` is an exception. When in `Expense Splitter` mode it refers to `ExpenseSplitterParser`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "while in `Diet Tracker` mode it refers to `FoodBookParser`."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".  `MODELogic` uses the `MODEParser` class to parse the user command."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".  This results in a `Command` object which is executed by the `MODELogicManager`."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".  The command execution can affect the `Model` (e.g. deleting AN entry)."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Eylah.java` application to perform certain actions, such as to go back to main menu or exit the App."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic Component` for the `execute(\"deleteitem 1\")` API call."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".Interactions Inside the Logic Component for the `deleteitem 1` Command in Expense Splitter mode"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "image::ExpenseSplitterDeleteItemCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "NOTE: The lifeline for `DeleteItemCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*API* : link:{repoURL}/blob/master/src/main/java/seedu/eylah/commons/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "link:{repoURL}/blob/master/src/main/java/seedu/eylah/expensesplitter/model/SplitterModel.java[`SplitterModel.java`]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "link:{repoURL}/blob/master/src/main/java/seedu/eylah/diettracker/model/DietModel.java[`DietModel.java`]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "The `Model Component` deals with the modeling of the object."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "`MODE` used in the given subsection refers to `Diet` when in `Diet Tracker` mode, `Splitter` when in"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "`Expense Splitter` mode. For example, `MODEModel` given below refers to `SplitterModel` when in `Expense Splitter` mode."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "The `MODEModel`,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "* stores the PersonAmountBook and ReceiptBook data in `Expense Splitter` mode."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "* stores the FoodBook and Myself data in `Diet Tracker` mode."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*API* : link:{repoURL}/blob/master/src/main/java/seedu/eylah/commons/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "link:{repoURL}/blob/master/src/main/java/seedu/eylah/expensesplitter/storage/SplitterStorage.java[`SplitterStorage.java`]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "link:{repoURL}/blob/master/src/main/java/seedu/eylah/diettracker/storage/DietStorage.java[`DietStorage.java`]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "The `Storage Component` deals with the operations to write and read from the local files."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "`MODE` used in the given subsection refers to `Diet` when in `Diet Tracker` mode, `Splitter` when in"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "`Expense Splitter` mode.For example, `MODEStorage` given below refers to `SplitterStorage` when in `Expense Splitter` mode."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "The `MODEStorage` component,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "* can save the PersonAmountBook and ReceiptBook data in json format and read it back in `Expense Splitter` mode."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "* can save the FoodBook and MySelf data in json format and read it back in `Diet Tracker` mode."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "Classes used by multiple components are in the `seedu.eylah.commons` package."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "//end::design-architecture[]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "This section describes some noteworthy details on how the features in EYLAH are implemented."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "// tag::diettrackerintro[]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d Diet Tracker feature"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The Diet Tracker feature is designed to aid our users in maintaining a healthy lifestyle. The feature comprises"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "of 10 Commands."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* \u003c\u003cAdd-Command, `AddCommand`\u003e\u003e - Creates a new Food object with its attributes (Name, Calories) and adds it to the FoodBook Storage."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* \u003c\u003cDelete-Command, `DeleteCommand`\u003e\u003e - Deletes the Food specified by the input index from FoodBook Storage."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* \u003c\u003cList-Command, `ListCommand`\u003e\u003e - Lists the Foods and its attributes (Name, Calories) for the timeframe specified by users"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "based on their user input."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* \u003c\u003cEdit-Command, `EditCommand`\u003e\u003e - Allows the user to edit an of the Food in Storage."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* \u003c\u003cHeight-Command, `HeightCommand`\u003e\u003e - Allows users to log their Height in centimeters."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* \u003c\u003cWeight-Command, `WeightCommand`\u003e\u003e - Allows users to log their Weight in kilograms."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* \u003c\u003cBmi-Command, `BmiCommand`\u003e\u003e - Calculates the BMI."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* \u003c\u003cMode-Command, `ModeCommand`\u003e\u003e - Allows users to toggle between different modes of the diet tracker."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* \u003c\u003cMetrics-Command, `MetricsCommand`\u003e\u003e - Allows users to check their health metrics, like their Height, Weight and Dieting Mode."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//end::diettrackerintro[]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//tag::diettrackeractivitydiagram[]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Activity Diagram* of Diet Tracker: +"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerActivityDiagram.png[]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//end::diettrackeractivitydiagram[]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "//tag::diettrackeradd[]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[Add-Command]]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d\u003d Add Command"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "In this section, we will learn more about how the `add` command is implemented."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*What is the Add Command*"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `add` command allows the user to add a Food into the FoodBook, along with the Name of the Food and the Calories of the Food."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `add` command was implemented as `AddCommand` in the `diettracker/logic/commands` package."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `add` command has the following input format:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`add` `-n NAME` `-c CALORIES` `[-t TAG]...`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* `-n NAME` and `-c CALORIES` are *compulsory* fields."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* There can be multiple `-t TAG`."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* `CALORIES` can range from 0 to 1000000. Calories are implemented as Integers."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following activity diagram illustrates what happens when a user executes the `add` command:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".Add Command Activity Diagram"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerAddCommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*Structure of Add Command* +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "In this section, you will learn more about the relationships between objects related to the `add` command."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ".Add Command Class Diagram"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "image::DietTrackerAddCommandClassDiagram.png[]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "The above class diagram shows the structure of the `AddCommand` and its associated classes and"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "interfaces. Some methods and fields are left out because they are not of concern in `AddCommand`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Implementation of Add Command*"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following is a detailed explanation of the operations AddCommand performs. +"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "1. The `AddCommand#execute(Model dietModel)` method is executed and it checks if the specified Name"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "and Calories of a given Food to be added are valid. If valid, a new Food would be created with the specified Name and Calories."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2. The Method `DietModel#addFood(Food food)` would be called to add the"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "food into the `FoodBook#foods`."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "3. If successful, a success message will be generated by `CommandResult` and it will be returned with the generated"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "success message. Otherwise, an error message showing the correct command syntax is thrown as `CommandException`."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "4. If the command syntax was valid and Food was added to the FoodBook, `LogicManager` calls"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "`FoodBookStorage#saveFoodBook(ReadOnlyFoodBook foodBook)` which saves the new Food"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Amount into JSON format after serializing it using `JsonAdaptedFood`."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Sequence diagram for Add Command* +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following sequence diagram summarizes what happens during the execution of `add` command."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ".Add Command Sequence Diagram"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerAddCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "//end::diettrackeradd[]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "//tag::diettrackerdelete[]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[Delete-Command]]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Delete Command"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "In this section, we will learn more about how the `delete` command is implemented."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*What is the Delete Command* +"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `delete` command allows users to remove the Food from the FoodBook via the Index."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `delete` command was implemented as `DeleteCommand` in the `diettracker/logic/commands` package."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `delete` command has the following input format:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`delete` `INDEX`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* `INDEX` is a compulsory field."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* The Index of the Food *must* be retrieved by using the `list` command."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following activity diagram illustrates what happens when a user executes the `delete` command:"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".Delete Command Activity Diagram"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerDeleteCommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*Structure of Delete Command* +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "In this section, you will learn more about the relationships between objects related to the `delete` command."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ".Delete Command Class Diagram"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "image::DietTrackerDeleteCommandClassDiagram.png[]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "The above class diagram shows the structure of the `DeleteCommand` and its associated classes and"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "interfaces. Some methods and fields are left out because they are not of concern in `DeleteCommand`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Implementation*"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "The following is a detailed explanation of the operations DeleteCommand performs. +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "1. The `DeleteCommand#execute(Model dietModel)` method is executed and it validates that the specified"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Index to delete is within range. If valid, the Food to be deleted will be retrieved from FoodBook using its Index."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2. The method `DietModel#getFilteredFoodList()` will then be called to retrieve the List of Foods from Storage."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`List#get(int Index)` is then invoked which retrieves the specified Food to be deleted."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "3. The method `DietModel#deleteFood(Food food)` will then be called to remove the Food from the FoodBook."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`FoodBook#remove(int Index)` is invoked which makes a call to its internal list to remove the specified Food."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "4. If successful, a success message will be generated by `CommandResult` and it will be returned with the generated"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "success message. Otherwise, an error message showing the correct command syntax is thrown as `CommandException`."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "5. If the command syntax was valid and Food was removed from FoodBook, `LogicManager` calls"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`FoodBookStorage#saveFoodBook(ReadOnlyFoodBook foodBook)` which saves the new Foods"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "into JSON format after serializing it using `JsonAdaptedFood`."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Sequence Diagram for Delete Command*"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following sequence diagram summarizes what happens during the execution of `delete` command."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ".Delete Command Sequence Diagram"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerDeleteCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "//end::diettrackerdelete[]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "//tag::diettrackerlist[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[List-Command]]"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d List Command"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "In this section, we will learn more about how the `list` command is implemented."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*What is the List Command*"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `list` command allows users to find out the current Foods in the FoodBook over a period of time as specified by the flag,"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "or a list of foods with the specified tag."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `list` command was implemented as a `ListCommand` in the `diettracker/logic/commands` package."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `list` has the following input format:"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`list` `[-a]` `[-d DAYS]` `[-t TAGS]`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Users must only enter *at most ONE* flag when using the list command."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following activity diagram illustrates what happens when a user executes `list` command:"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".List Command Activity Diagram"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerListCommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*Structure of List Command* +"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "In this section, you will learn more about the relationships between objects related to the `list` command."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ".List Command Class Diagram"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "image::DietTrackerListCommandClassDiagram.png[]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "The above class diagram shows the structure of the `ListCommand` and its associated classes and"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "interfaces. Some methods and fields are left out because they are not of concern in `ListCommand`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Implementation of List Command*"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following is a detailed explanation of the operations `ListCommand` performs. +"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "1. The `ListCommand#execute(DietModel dietModel)` method is executed and it validates that the flag used to decide what"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Foods to list. If the flag is valid, the items to be listed will be retrieved from DietModel according"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "to the input flag."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "2. The method `DietModel#updateFilteredFoodList() will then be called to filter the List of Foods in DietModel."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`FilteredList#setPredicate(Predicate\u003cFood\u003e predicate)` is then invoked which retrieves the specified Foods to be listed."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    Case No-Flag Input: The Predicate is any food with date within 1 day back from current time."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    Case `-a`: The Predicate always returns true so the list is the entire FoodBook."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    Case `-d`: The Predicate will be all food with date later than the specified date which is calculated by input number of days back from the current date."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    Case `-t`: The Predicate will be any food with tags that matches given time."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "3. If successful, a success message will be generated by `CommandResult` and it will be returned with the generated"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "success message. Otherwise, an error message showing the correct command syntax is thrown as `CommandException`."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*Sequence Diagram for List Command*"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".List Sequence Diagram for `-a` or No-Flag Input"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerListCommandAllSequenceDiagram.png[]"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".List Sequence Diagram for `-d`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerListCommandDaySequenceDiagram.png[]"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".List Sequence Diagram for `-t`"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerListCommandTagSequenceDiagram.png[]"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "//end::diettrackerlist[]"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//tag::diettrackeredit[]"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[Edit-Command]]"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Edit Command"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "In this section, we will learn more about how the `edit` command is implemented."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*What is the Edit Command* +"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `edit` command allows users to edit the Name of the Food or the Calories of the Food from the FoodBook via the Index."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `edit` command was implemented as `EditCommand` in the `diettracker/logic/commands` package."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `edit` command has the following input format:"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`edit` `-i INDEX` `[-n NAME]` `[-c CALORIES]`"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* `INDEX` is a compulsory field."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* The Index of the Food to be edited *MUST* be retrieved by using the `list` command."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* At least one of `NAME` or `CALORIES` must be included in the command input."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following activity diagram illustrates what happens when a user executes the `edit` command:"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".Edit Command Activity Diagram"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerEditCommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*Structure of Edit Command* +"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "In this section, you will learn more about the relationships between objects related to the `edit` command."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ".Edit Command Class Diagram"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "image::DietTrackerEditCommandClassDiagram.png[]"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "The above class diagram shows the structure of the `EditCommand` and its associated classes and"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "interfaces. Some methods and fields are left out because they are not of concern in `EditCommand`"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Implementation*"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following is a detailed explanation of the operations `EditCommand` performs. +"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "1. The `EditCommand#execute(DietModel dietModel)` method is executed and it validates that the specified `INDEX` to edit"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "is within range. If valid, the item to be edited will be retrieved from Storage using its `Index`."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2. The method `DietModel#getFilteredFoodList() will then be called to retrieve the List of Foods from Storage."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`List#get(int Index)` is then invoked which retrieves the specified Food to be edited."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "3. The method `DietModel#setFood(Food toBeEdited, Food editedFood)` will then be called to replace the Food toBeEdited with the"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Food editedFood in the List of Foods."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "4. If successful, a success message will be generated by `CommandResult` and it will be returned with the generated"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "success message. Otherwise, an error message showing the correct command syntax is thrown as `CommandException`."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "5. If the command syntax was valid and Food was edited in FoodBook, `LogicManager` calls"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`FoodBookStorage#saveFoodBook(ReadOnlyFoodBook foodBook)` which saves the new Foods"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "into JSON format after serializing it using `JsonAdaptedFood`."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*Sequence Diagram for Edit Command*"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following sequence diagram summarizes what happens during the execution of `edit` command."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".Edit Command Sequence Diagram"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerEditCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//end::diettrackeredit[]"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//tag::diettrackerbmi[]"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[Bmi-Command]]"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Bmi Command"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "In this section, we will learn more about how the `bmi` command is implemented."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*What is the Bmi Command*"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `bmi` command allows the user to calculate their Body Mass Index (BMI)."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `bmi` command was implemented as `BmiCommand` in the `diettracker/logic/commands` package."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `bmi` command has the following input format:"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`bmi` `[-h HEIGHT]` `[-w WEIGHT]`"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* `[-h HEIGHT]` and `[-w WEIGHT]` may be omitted if the user has already stored their Height and Weight."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* If Users have one of Height or Weight stored, they may use just the missing metric to calculate their BMI."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* `HEIGHT` and `WEIGHT` can range from \u003e0 to \u003c\u003d1000."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following activity diagram illustrates what happens when a user executes the `bmi` command:"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".Bmi Command Activity Diagram"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerBmiCommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Structure of Bmi Command* +"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "In this section, you will learn more about the relationships between objects related to the `bmi` command."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".Bmi Command Class Diagram"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerBmiCommandClassDiagram.png[]"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The above class diagram shows the structure of the `BmiCommand` and its associated classes and"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "interfaces. Some methods and fields are left out because they are not of concern in `BmiCommand`"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Implementation of Bmi Command*"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following is a detailed explanation of the operations `BmiCommand` performs. `BmiCommand` has two different usages"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "depending on the user input. +"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "1. The `BmiCommand#execute(Model dietModel)` method is executed and it will return the output of the calculated BMI"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "based on user arguments."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2. If successful, a success message will be generated by `CommandResult` and it will be returned with the generated"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "success message. Otherwise, an error message showing the correct command syntax is thrown as `CommandException`."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Sequence diagram for Bmi Command* +"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Given below are 2 example usages of `BmiCommand` based on different user input."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Usage 1: No Height and Weight input*"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "1. User launches application and enters `Diet` mode. The user then enters `bmi` as the command."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2. The FoodBook parser validates this command and sets up the `BmiCommandParser`, which checks for the input."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "3. Since there are no arguments, the `BmiCommandParser` will call the empty constructor `BmiCommand()`."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "4. `BmiCommand` would then refer to the internal state of the splitterModel under Self, and retrieve the values stored in"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Self\u0027s Height and Weight attributes."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "5. `BmiCommand()` will then proceed to calculate the BMI based on the current values of height and weight."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following is a sample sequence diagram of the `BmiCommand` with no additional user input."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".Sequence Diagram Bmi Command Sequence Diagram without Input Arguments"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerBmiCommandNILSequenceDiagram.png[]"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".Sequence Diagram: Retrieval of stored Height and Weight from Model"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerBmiCommandNILSequenceDiagram2.png[]"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "There is a need to ensure that there are stored values in `Height` and `Weight` attributes in the `Self` class."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Usage 2: With Height and Weight input*"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "1. User launches application and enters `Diet` mode. The user then enters `bmi` as the command."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2. The FoodBook parser validates this command and sets up the `BmiCommandParser`, which checks for the input."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "3. Since there are no arguments, the `BmiCommandParser` will call the empty constructor `BmiCommand()`."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "4. `BmiCommand` would then refer to the internal state of the splitterModel under Self, and retrieve the values stored in"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Self\u0027s Height and Weight attributes."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "5. `BmiCommand()` will then proceed to calculate the BMI based on the current values of height and weight."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following is a sample sequence diagram of the `BmiCommand` with additional user input."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".Bmi Command Sequence Diagram with Input Arguments"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerBmiCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".Creation of Height and Weight Objects for usage in Bmi Command"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerBmiCommandSequenceDiagram2.png[]"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Design Considerations*"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Aspect: How `BmiCommand` executes"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* Alternative 1 (current choice): Executes with other without arguments"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Pros: More flexible use of the Command, better user experience overall."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Cons: Harder to implement, as there needs to be multiple BmiCommand constructors."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* Alternative 2: Executes separately with arguments input and without arguments input"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Pros: Easier to implement, less potential bugs as Command uses a single constructor."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Cons:  We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Aspect: Storage of BMI"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "* Alternative 1 (current choice): No splitterStorage of BMI value, simply prints when user requests."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Pros: Less memory used; reduces complexity of the Command and objects involved."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Cons: Users may want to access it elsewhere from Self."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* Alternative 2: Storage of BMI value in Self class in Model."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Pros: Users have access to it anytime."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Cons: Coding complexity."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//end::diettrackerbmi[]"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//tag::diettrackerheight[]"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[Height-Command]]"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Height Command"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "In this section, we will learn more about how the `height` command is implemented."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*What is the Height Command*"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `height` command allows the user to store their Height into the Diet Tracker."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `height` command was implemented as `HeightCommand` in the `diettracker/logic/commands` package."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `height` command has the following input format:"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`height` `HEIGHT`"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* `HEIGHT` is a *compulsory* field."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* `HEIGHT` can range from \u003e0 to \u003c1000. `HEIGHT` can be input as a decimal."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following activity diagram illustrates what happens when a user executes the `height` command:"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".Height Command Activity Diagram"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerHeightCommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Structure of Height Command* +"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "In this section, you will learn more about the relationships between objects related to the `height` command."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".Height Command Class Diagram"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerHeightCommandClassDiagram.png[]"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The above class diagram shows the structure of the `HeightCommand` and its associated classes and"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "interfaces. Some methods and fields are left out because they are not of concern in `HeightCommand`"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Implementation of Height Command*"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following is a detailed explanation of the operations `HeightCommand` performs. +"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "1. The `HeightCommand#execute(DietModel dietModel)` method is executed and it validates that the specified `HEIGHT` to store"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "is a valid Height. If valid, the height will be stored in the `Self` class."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2. The method `DietModel#setHeight(Height height)` will then be called to set the Height of the `Self` class."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`Self#setHeight(Height height)` is invoked which makes a call to its internal Height to replace the value stored."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "3. If successful, a success message will be generated by `CommandResult` and it will be returned with the generated"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "success message. Otherwise, an error message showing the correct command syntax is thrown as `CommandException`."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Sequence diagram for Height Command* +"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following sequence diagram summarizes what happens during the execution of `height` command."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".Height Command Sequence Diagram"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerHeightCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//end::diettrackerheight[]"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//tag::diettrackerweight[]"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[Weight-Command]]"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Weight Command"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "In this section, we will learn more about how the `weight` command is implemented."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*What is the Weight Command*"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `weight` command allows the user to store their Weight into the Diet Tracker."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `weight` command was implemented as `WeightCommand` in the `diettracker/logic/commands` package."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `weight` command has the following input format:"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`weight` `WEIGHT`"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* `WEIGHT` is a *compulsory* field."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* `WEIGHT` can range from \u003e0 to \u003c1000. `WEIGHT` can be input as a decimal."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following activity diagram illustrates what happens when a user executes the `weight` command:"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".Weight Command Activity Diagram"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerWeightCommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Structure of Weight Command* +"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "In this section, you will learn more about the relationships between objects related to the `weight` command."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".Weight Command Class Diagram"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerWeightCommandClassDiagram.png[]"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The above class diagram shows the structure of the `WeightCommand` and its associated classes and"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "interfaces. Some methods and fields are left out because they are not of concern in `WeightCommand`"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Implementation of Weight Command*"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following is a detailed explanation of the operations `WeightCommand` performs. +"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "1. The `WeightCommand#execute(DietModel dietModel)` method is executed and it validates that the specified `WEIGHT` to store"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "is a valid Weight. If valid, the Weight will be stored in the `Self` class."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2. The method `DietModel#setWeight(Weight weight)` will then be called to set the Weight of the `Self` class."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`Self#setWeight(Weight weight)` is invoked which makes a call to its internal Height to replace the value stored."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "3. If successful, a success message will be generated by `CommandResult` and it will be returned with the generated"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "success message. Otherwise, an error message showing the correct command syntax is thrown as `CommandException`."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Sequence diagram for Weight Command* +"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following sequence diagram summarizes what happens during the execution of `weight` command."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".Weight Command Sequence Diagram"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerWeightCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//end::diettrackerweight[]"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//tag::diettrackermode[]"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[Mode-Command]]"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Mode Command"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "In this section, we will learn more about how the `mode` command is implemented."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*What is the Mode Command*"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `mode` command allows the user to store their Dieting Mode into the Diet Tracker."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `mode` command was implemented as `ModeCommand` in the `diettracker/logic/commands` package."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `mode` command has the following input format:"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`mode` `[-l]` `[-g]` `[-m]`"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Users must only enter *EXACTLY ONE* of the given flags for the mode."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following activity diagram illustrates what happens when a user executes the `mode` command:"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".Mode Command Activity Diagram"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerModeCommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Structure of Mode Command* +"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "In this section, you will learn more about the relationships between objects related to the `mode` command."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".Mode Command Class Diagram"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerModeCommandClassDiagram.png[]"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The above class diagram shows the structure of the `ModeCommand` and its associated classes and"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "interfaces. Some methods and fields are left out because they are not of concern in `ModeCommand`"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Implementation of Mode Command*"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following is a detailed explanation of the operations ModeCommand performs. +"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "1. The `ModeCommand#execute(DietModel dietModel)` method is executed and it validates that the specified `MODE` (based on the input flag) to store"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "is a valid flag. If valid, the corresponding mode to the flag will be stored in the `Self` class."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2. The method `DietModel#setMode(Mode mode) will then be called to set the Mode of the `Self` class."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`Self#setMode(Mode mode)` is invoked which makes a call to its internal Mode to replace the value stored."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "3. If successful, a success message will be generated by `CommandResult` and it will be returned with the generated"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "success message. Otherwise, an error message showing the correct command syntax is thrown as `CommandException`."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Sequence diagram for Mode Command* +"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following sequence diagram summarizes what happens during the execution of `mode` command."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".Mode Command Sequence Diagram"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerModeCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//end::diettrackermode[]"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//tag::diettrackermetrics[]"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[Metrics-Command]]"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Metrics Command"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "In this section, we will learn more about how the `metrics` command is implemented."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*What is the Metrics Command*"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `metrics` command allows the user to check their health metrics. These include their Height, Weight and Dieting Mode."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `metrics` command was implemented as `MetricsCommand` in the `diettracker/logic/commands` package."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The `metrics` command has the following input format:"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`metrics`"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following activity diagram illustrates what happens when a user executes the `metrics` command:"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".Metrics Command Activity Diagram"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerMetricsCommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Structure of Metrics Command* +"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "In this section, you will learn more about the relationships between objects related to the `metrics` command."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".Metrics Command Class Diagram"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerMetricsCommandClassDiagram.png[]"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The above class diagram shows the structure of the `MetricsCommand` and its associated classes and"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "interfaces. Some methods and fields are left out because they are not of concern in `MetricsCommand`"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Implementation of Metrics Command*"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following is a detailed explanation of the operations MetricsCommand performs. +"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "1. The `MetricsCommand#execute(DietModel dietModel)` method is executed."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2. The `DietModel#printMetrics()` method would then be called to print the User\u0027s Metrics."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "3. If successful, a success message will be generated by `CommandResult` and it will be returned with the generated"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "success message. Otherwise, an error message showing the correct command syntax is thrown as `CommandException`."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Sequence diagram for Metrics Command* +"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The following sequence diagram summarizes what happens during the execution of `metrics` command."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".Metrics Command Sequence Diagram"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "image::DietTrackerMetricsCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//end::diettrackermetrics[]"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d Expense Splitter feature"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "//tag::expensesplitterintro[]"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The Expense Splitter feature is designed to aid our users with the splitting of large bills that involves meany people."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The feature comprises of six commands namely."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* \u003c\u003cAdd-Item-Command, `AddItemCommand`\u003e\u003e - Creates an Item with its ItemPrice, Person(s) involved in splitting that"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Item and adds it to Receipt."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* \u003c\u003cDelete-Item-Command, `DeleteItemCommand`\u003e\u003e - Deletes an Item from the current Receipt and reduces the"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Person\u0027s amount accordingly."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* \u003c\u003cList-Receipt-Command, `ListReceiptCommand`\u003e\u003e - Lists the Item(s) in the current Receipt,"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "its ItemPrice and Person(s) involved in splitting that Item."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* \u003c\u003cList-Amount-Command, `ListAmountCommand`\u003e\u003e - Lists the Person(s) Name and Amount they owe the user."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* \u003c\u003cDone-Receipt-Command, `DoneReceiptCommand`\u003e\u003e - Finalize the receipt, after which the Receipt"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "will be immutable."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* \u003c\u003cPaid-Command, `PaidCommand`\u003e\u003e - Reduces the Amount a Person owes."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* \u003c\u003cClear-Receipt-Command, `ClearReceipt`\u003e\u003e - Clear the current Receipt to start a new Receipt."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "//end::expensesplitterintro[]"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "//tag::expensesplitteractivitydiagram[]"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Below is the activity diagram of the entire Expense Splitter."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*Activity Diagram of Expense Splitter:* +"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".ExpenseSplitterActivityDiagram"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "image::ExpenseSplitterActivityDiagramV2.png[]"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".SimplifiedAddItemActivityDiagram"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "image::ExpenseSplitterActivityDiagram.png[]"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "SimplifiedAddItemActivityDiagram is not the actual AddItem Activity Diagram. It has been"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "simplified to provide just enough information"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "for the user to know about the rough workflow of Expense Splitter. A more detailed"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "diagram of Add Item can be found in \u003c\u003cAdd-Item-Command, AddItemCommand\u003e\u003e."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "//end::expensesplitteractivitydiagram[]"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "//tag::expensesplitteradditem[]"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[[Add-Item-Command]]"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d\u003d Add Item Command"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "In this section, we will learn more about how the `additem` command is implemented."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*What is the Add Item Command*"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "The `additem` command allows the user to add an Item into the Receipt, along with the ItemPrice of the Item and the Persons"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "involved in splitting the cost of that Item."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "The `additem` command was implemented as `AddItemCommand` in the `expensesplitter/logic/commands` package."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "The `additem` command has the following input format:"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`additem` `-i ITEMNAME` `-p ITEMPRICE` `-n NAME` `[-n NAME]...`"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* `-i ITEMNAME` and `-p ITEMPRICE` are *compulsory* fields."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* There can be multiple `-n NAME`, however, a *minimum of 1* is required."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* `ITEMPRICE` can be up to 2 decimal places, i.e 7.99. There is *no need* to add the dollar sign ($)."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "The following activity diagram illustrates what happens when a user executes the `additem` command:"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ".Add Item Command Activity Diagram"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "image::ExpenseSplitterAddItemCommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "{nbsp}"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*Structure of Add Item Command*"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "In this section, you will learn more about the relationships between objects related to the `AddItemCommand`."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ".Add Item Command Class Diagram"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "image::ExpenseSplitterAddItemCommandClassDiagram.png[]"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "The above class diagram shows the structure of the `AddItemCommand` and it\u0027s associated classes and interfaces. Some"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "methods and fields have been left out because they are not of concern in the `AddItemCommand`."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*Implementation of Add Item Command*"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "The following is a detailed explanation of the operations `AddItemCommand` performs. +"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "1. The `AddItemCommand#execute(SplitterModel splitterModel)` method is executed and it checks if the specified Item"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "and list of Persons to be added are valid. If valid, a new Entry would be created with the specified Item and list of"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Persons."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "2. The `SplitterModel#addEntry(Entry entry)` method would then be called to add the Entry into the Receipt."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "3. For each Person in the list of Persons, the Person is first checked through the `PersonAmountBook#persons` using the"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`SplitterModel#hasPerson(Person person)` method to check if the person already exists."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "4. If the person does not already exist, the method `SplitterModel#addPerson(Person person)` would be called to add the"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "person, together with the amount, into the `PersonAmountBook#persons`."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "5. If the Person exists, the Person would be retrieved from the `PersonAmountBook#persons` using the"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`SplitterModel#getPerson(Person person)` method, and then the amount would be added to that person using the"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`SplitterModel#addAmount(Person person, Amount amount)` method."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*Sequence diagram for Add Item Command* +"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "The following sequence diagram summarizes what happens during the execution of `additem` command."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ".Add Item Command Sequence Diagram"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "image::ExpenseSplitterAddItemCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ".Execution of Add Item Command"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "image::ExpenseSplitterAddItemCommandSequenceDiagram2.png[]"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "//end::expensesplitteradditem[]"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "//tag::expensesplitterdeleteitem[]"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[[Delete-Item-Command]]"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d\u003d Delete Item Command"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "In this section, we will learn more about how the `deleteitem` command is implemented."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*What is the Delete Item Command* +"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "The `deleteitem` command allows users to remove the Item from the Receipt via the Index."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "The `deleteitem` command was implemented as `DeleteItemCommand` in the `expensesplitter/logic/commands` package."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "The `deleteitem` command has the following input format:"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`deleteitem` `INDEX`"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* `INDEX` is a compulsory field."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* The Index of the Item can be retrieved by using the `listreceipt` command."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "The following activity diagram illustrates what happens when a user executes the `deleteitem` command:"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ".Delete Item Command Activity Diagram"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "image::ExpenseSplitterDeleteItemCommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "{nbsp}"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*Structure of Delete Item Command*"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "In this section, you will learn more about the relationships between objects related to the `DeleteItemCommand`."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ".Delete Item Command Class Diagram"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "image::ExpenseSplitterDeleteItemCommandClassDiagram.png[]"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "The above class diagram shows the structure of the `DeleteItemCommand` and it\u0027s associated classes and interfaces. Some"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "methods and fields have been left out because they are not of concern in the `DeleteItemCommand`."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Implementation*"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "The following is a detailed explanation of the operations `DeleteItemCommand` performs. +"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "1. The `DeleteItemCommand#execute(SplitterModel splitterModel)` method is executed and it validates that the specified"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Index to delete is within range. If valid, the Entry to be deleted will be retrieved from Receipt using its Index."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "2. The method `SplitterModel#getEntry(Index index)` is called to retrieve the current Entry, which subsequently retrieves the"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "current Item using the `Entry#getItem()` method and the amountPerPerson associated with it via the"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`Item#getAmountPerPerson()` method. The list of Persons are also retrieved via the `Entry#getPersonsList()` method."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "3. For each Person in the list of Persons, the amount is subtracted from the current amount owed by the Person."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "4. The method `SplitterModel#deleteEntry(int index)` will then be called to remove the Item from the Receipt."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`Receipt#deleteEntry(int index)` is invoked which makes a call to its internal list to remove the specified Item."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*Sequence Diagram for Delete Item Command*"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "The following sequence diagram summarizes what happens during the execution of `deleteitem` command."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ".Delete Item Command Sequence Diagram"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "image::ExpenseSplitterDeleteItemCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ".Execution of Delete Item Command"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "image::ExpenseSplitterDeleteItemCommandSequenceDiagram2.png[]"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "//end::expensesplitterdeleteitem[]"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "//tag::expensesplitterlistreceiptcommand[]"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[[List-Receipt-Command]]"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d\u003d List Receipt Command"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "In this section, we will learn more about how the `listreceipt` command is implemented."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*What is the List Receipt Command*"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The `listreceipt` command allows user to find out the current Items in the receipt."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The `listreceipt` command was implemented as a `ListReceiptCommand` in the `expensesplitter/logic/commands` package."
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The `listreceipt` has the following input format:"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "`listreceipt`"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* Each entry in the receipt has the item’s name, price and person(s) involved in splitting that item."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* When you enter `clearrreceipt` it deletes the old receipt’s data. Use it with caution!"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The following activity diagram illustrates what happens when a user executes `listreceipt` command:"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".List Receipt Activity Diagram"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "image::ExpenseSplitterListReceiptCommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "{nbsp}"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Structure of List Receipt Command* +"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "In this section, you will learn more about the relationships between objects related to the `ListReceiptCommand`."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".List Receipt Command Class Diagram"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "image::ExpenseSplitterListReceiptCommandClassDiagram.png[]"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The above class diagram shows the structure of the `ListReceiptCommand` and its associated classes and"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "interfaces. Some methods and fields are left out because they are not of concern in `ListReceiptCommand`"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Implementation of List Receipt Command*"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The following is a detailed explanation of the operations `ListReceiptCommand` performs. +"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "1. The `ListReceiptCommand#execute(SplitterModel splitterModel)` method is executed."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "2. The method `SplitterModel#listReceipt()` will then be called to return the list of entries currently in that Receipt."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "3. The method `Receipt#toString()` will use StringBuilder to build the string of the Items(s) currently in"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Receipt by calling `Entry.toString()` for entry. After all entries are done, `Receipt#toString()` would have"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "finish building the string and will return to SplitterModelManager."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "4. 4. SplitterModelManager will then pass the String into CommandResult where it will be printed under the UI"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "component."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Sequence Diagram for List Receipt Command*"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The following sequence diagram summarizes what happens during the execution of `listreceipt` command."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".List Receipt Command Sequence Diagram"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "image::ExpenseSplitterListReceiptCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "//end::expensesplitterlistreceiptcommand[]"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "//tag::expensesplitterlistamountcommand[]"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[[List-Amount-Command]]"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d\u003d List Amount Command"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "In this section, we will learn more about how the `listamount` command is implemented."
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*What is the List Amount Command*"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The `listamount` command allows users to find out how much each Person owes them. +"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The `listamount` command was implemented as a `ListAmountCommand` in the `expensesplitter/logic/commands` package."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The `listamount` command has the following input format:"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "`listamount`"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* The Person and amount owed will be automatically saved after each command."
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* A person is deleted after they have completely paid the amount they owe."
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The following activity diagram illustrates what happens when a user executes `listamount` command."
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".List Amount Activity Diagram +"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "image::ExpenseSplitterListAmountCommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "{nbsp}"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Structure of List Amount Command* +"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "In this section, you will learn more about the relationships between objects related to the `ListAmountCommand`."
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".List Amount Command Class Diagram"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "image::ExpenseSplitterListAmountCommandClassDiagram.png[]"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The above class diagram shows the structure of the `ListAmountCommand` and its associated classes and"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "interfaces. Some methods and fields are left out because they are not of concern in `ListAmountCommand`"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Implementation of List Amount Command*"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The following is a detailed explanation of the operations ListAmountCommand performs. +"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "1. The `ListAmountCommand#execute(SplitterModel splitterModel)` method is executed."
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "2. The method `SplitterModel#listAmount()` will then be called to return the list of Person(s) with their amount."
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "3. `PersonAmountBook#toString()` will convert list of person in the list to the expected format and return it to"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "SplitterModelManager."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "4. SplitterModelManager will then pass the String into CommandResult where it will be printed under the UI"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "component."
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Sequence Diagram for List Amount Command*"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The following sequence diagram summarizes what happens during the execution of `listamount` command."
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".List Amount Command Sequence Diagram"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "image::ExpenseSplitterListAmountCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "//end::expensesplitterlistamountcommand[]"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "//tag::expensesplitterdonereceiptcommand[]"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[[Done-Receipt-Command]]"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d\u003d Done Receipt Command"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "In this section, we will learn more about how the `donereceipt` command is implemented."
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*What is the Done Receipt Command*"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The `donereceipt` command allows user to finalize the entries in the receipt. After this command is executed, the"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "entries in the receipt are immutable."
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The `donereceipt` command was implemented as a `DoneReceiptCommand` in the `expensespliter/logic` package."
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The `donereceipt` has the following input format:"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "`donereceipt`"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The receipt will not be editable after this command is executed thus ensuring all entries are inputted correctly."
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The User can use `listreceipt` to check current entries in the receipt, `deleteitem` and `additem` to delete and add"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "the correct item back."
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The following activity diagram illustrates what happens when a user executes `donereceipt` command:"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".Done Receipt Command Activity Diagram"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "image::ExpenseSplitterDoneReceiptCommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "{nbsp}"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*Structure of Done Receipt Command* +"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "In this section, you will learn more about the relationships between objects related to the `donereceipt` command."
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".Done Receipt Command Class Diagram"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "image::ExpenseSplitterDoneReceiptCommandClassDiagram.png[]"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "The above class diagram shows the structure of the `DoneReceiptCommand` and its associated classes and"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "interfaces. Some methods and fields are left out because they are not of concern in `DoneReceiptCommand`."
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Implementation of Done Receipt Command*"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "The following is a detailed explanation of the operations `DoneReceiptCommand` performs."
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "1. The `DoneReceiptCommand#execute(SplitterModel splitterModel)` method is executed."
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "2. The `SplitterModel#getReceipt()` method is executed and get the current `Receipt`."
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "3. Then `Receipt#markDone()` method is called."
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "4. This will invoke the boolean `Receipt#isDone` variable changed to true."
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Sequence Diagram for Done Receipt Command*"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The following sequence diagram summarizes what happens during the execution of `donereceipt` command."
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".Done Receipt Command Sequence Diagram"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "image::ExpenseSplitterDoneReceiptCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "//end::expensesplitterdonereceiptcommand[]"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "//tag::expensesplitterpaidcommand[]"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[[Paid-Command]]"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d\u003d Paid Command"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "In this section, we will learn more about how the `paid` command is implemented."
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*What is the Paid Command* +"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The `paid` command allows user to reduce the amount of money owed by a Person after they"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "have paid."
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The `paid` command was implemented as a `PaidCommand` in the `expensesplitter/logic` package."
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The `paid` command has the following input format:"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "`paid` `INDEX` `[AMOUNT]`"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* `INDEX` is a *compulsory* field. Instead of typing a Person\u0027s name, the user"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "can type their index. To find out his/her index, use the command"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " `listamount`."
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* `AMOUNT` is an *optional* field. It refers to the amount paid by that Person. Leaving this field"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "empty is equivalent to the Person paying the user the full amount he/she owes the user."
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* `AMOUNT` can be up to 2 decimal places, i.e. 7.99.  There is no need to add the dollar sign ($)."
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The following activity diagram illustrates what happens when a user executes `paid` command:"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".Paid Command Activity Diagram"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "image::ExpenseSplitterPaidCommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "{nbsp}"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Structure of Paid Command* +"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "In this section, you will learn more about the relationships between objects related to the `PaidCommand`."
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".Paid Command Class Diagram"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "image::ExpenseSplitterPaidCommandClassDiagram.png[]"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The above class diagram shows the structure of the `PaidCommand` and its associated classes and"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "interfaces. Some methods and fields are left out because they are not of concern in `PaidCommand`"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Implementation of Paid Command*"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The following is a detailed explanation of the operations PaidCommand performs. +"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "1. The `PaidCommand#execute(SplitterModel splitterModel)` method is executed."
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "2. The `SplitterModel#paidPerson(Person person, String amountPaid)` will be called."
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "String amountPaid will be converted into an Amount by instantiating a new instance of Amount."
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "3. The `PersonAmountBook#removeAmount(Person person, Amount amount)` is then called to remove Amount from Person."
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "4. This in turns calls `UniquePersonList#removeAmount(Person person, Amount amount)`."
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "5. Lastly, `Person#removeAmount(Amount amount)` is called to subtract the amount from the person."
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Sequence Diagram for Paid Command* +"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The following sequence diagram summarizes what happens during the execution of `paid` command."
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".Paid Command Sequence Diagram"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "image::ExpenseSplitterPaidCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".Execution of Paid Command Sequence Diagram"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "image::ExpenseSplitterPaidCommandSequenceDiagram2.png[]"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "//end::expensesplitterpaidcommand[]"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "//tag::expensesplitterclearreceipt[]"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[[Clear-Receipt-Command]]"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d\u003d Clear Receipt Command"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "In this section, we will learn more about how the `clearreceipt` command is implemented."
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*What is the Clear Receipt Command*"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "The `clearreceipt` command essentially deletes all the Entries in the Receipt and allows the user to input new Entries"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "into a clean receipt."
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "The `clearreceipt` command was implemented as `ClearReceiptCommand` in the `expensesplitter/logic/commands` package."
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "The `clearreceipt` command has the following input format:"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`clearreceipt`"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* Use this command only when you are very sure that you want to delete all entries and start a clean receipt."
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* When you use the `clearreceipt` command, you are concurrently marking the new receipt as undone. As such, you would"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "only be able to use the `additem` and `deleteitem` commands."
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "The following activity diagram illustrates what happens when a user executes the `clearreceipt` command:"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ".Clear Receipt Command Activity Diagram"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "image::ExpenseSplitterClearReceiptCommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "{nbsp}"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*Structure of Clear Receipt Command*"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "In this section, you will learn more about the relationships between objects related to the `ClearReceiptCommand`."
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ".Clear Receipt Command Class Diagram"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "image::ExpenseSplitterClearReceiptCommandClassDiagram.png[]"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "The above class diagram shows the structure of the `ClearReceiptCommand` and it\u0027s associated classes and interfaces. Some"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "methods and fields have been left out because they are not of concern in the `ClearReceiptCommand`."
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*Implementation of Clear Receipt Command*"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "The following is a detailed explanation of the operations `ClearReceiptCommand` performs. +"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "1. The `ClearReceiptCommand#execute(SplitterModel splitterModel)` method is executed."
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "2. If the Receipt is marked as undone via the `SplitterModel#isReceiptDone()` method, the `SplitterModel#deleteAllEntires()`"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "method is called, which calls the `PersonAmountBook#deleteAllEntries()` method. What does method does is that it first"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "retrieves the ArrayList\u003cEntry\u003e from the Receipt via the `Receipt#getReceipt()` method, then for each Entry, it gets the"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Item and the Amount owed my each person via the `Entry#getItem()` and `Item#getAmountPerPerson()` methods respectively."
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "The Amount is then removed from each Person in the Entry via the `Entry#getPersonsList()` method. After which, the"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`splitterModel#clearReceipt()` method will then be called. This will invoke the `Receipt#clearReceipt()` method which"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "creates a new ArrayList and assigns it to the Receipt. At the same time, the boolean `Receipt#isDone` is assigned to"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`false`."
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "3. If the Receipt is marked as done, the `splitterModel#clearReceipt()` method will then be called. This will invoke"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "the `Receipt#clearReceipt()` method which creates a new ArrayList and assigns it to the Receipt. At the same time, the"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "boolean `Receipt#isDone` is assigned to `false`."
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*Sequence Diagram for Clear Receipt Command*"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "The following sequence diagram summarizes what happens during the execution of the `clearreceipt` command."
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ".Clear Receipt Command Sequence Diagram"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "image::ExpenseSplitterClearReceiptCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ".Execution of Clear Receipt Command"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "image::ExpenseSplitterClearReceiptCommandSequenceDiagram2.png[]"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "//end::expensesplitterclearreceipt[]"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "* Currently log messages are output to a `.log` file."
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//tag::testing[]"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//end::testing[]"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//tag::devops[]"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//end::devops[]"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* \u003c\u003ctemasek-hall,Temasek Hall\u003e\u003e residents"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* Diet-conscious residents"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* Residents who frequently pays on behalf of a group"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* Residents who prefer desktop applications"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* Residents who can type fast"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* Residents who prefer typing over using the mouse"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* Residents who are reasonably comfortable using \u003c\u003ccli,CLI\u003e\u003e applications"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*Value proposition*: manage diet and expenses faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "// tag::userstory[]"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|`* * *` |Temasek Hall resident |want to keep track of my expenses accurately |calculate the exact amount I should collect from my friends after each time we split a meal"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "|`* * *` |healthy hall resident who is trying to lose weight |check how many calories I took today |keep track of my calories intake and weight"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "|`* * *` |Temasek hall resident who frequents supper food spots |split the bill easily with fellow mates| ensure that the amount is correctly accounted for"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "|`* * *` |Temasek Hall resident who wants to stay healthy |keep track of my calories |more accurately watch my weight"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|`*` |Temasek Hall leader |keep track of my committee events |know if things are going according to schedule"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|`*` |Temasek Hall exchange student |have a translation for Singaporean lingo |better understand the language my friends speak in hall"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|`*` |Temasek Hall sports captain |keep track of the various attendances for my training |know who usually attends training and who does not"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|`*` |Temasek Hall leader |keep track of my committee events |ensure things run smoothly"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|`*` |Temasek Hall resident who actively participates in hall events |check the upcoming events |keep myself up-to-date"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|`*` |Temasek Hall leader |keep track of when my meetings are |ensure I do not keep my teammates or committee member waiting"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|`*` |forgetful Temasek Hall resident|keep track of the myriad of hall activities |attend all the fun and exciting events at hall"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|`*` |organised resident of Teamsek Hall|remind myself for the tasks i have |meet all deadlines"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|`*` |main person in-charge of fixing faults in Temasek Hall|keep track of all different faults that have been"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "reported|fix is as soon as possible to reduce the disruptions to my fellow hall mates"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|`*` |international student who is new to Singapore\u0027s culture |keep track of upcoming"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "hall events|join all the fun activities in hall"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|`*` |hardworking Temasek Hall resident who wants to manage his schedule|to check"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "module prerequisites|plan my modules"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|`*` |attentive resident who notices that the gym has many users|log the entry of users"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|track the entry and exit timings of all gym users"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|`*` |food-loving Temasek Hall resident who frequently uses Grab Food|"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "keep track of my expenses|calculate my savings every month"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|`*` |Temasek Hall resident who has many hall friends|"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "keep track of my friends\u0027s particulars, especially their room number |find them easily in case I need help"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|`*` |Temasek Hall resident who has to pay hall fees|"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "record down my school payments |inform my parents about the necessary expenditures in school"
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|`*` |swimming captain of Temasek Hall|"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "plan my training sets |better prepare my team for the upcoming competition"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|`*` |Temasek hall exchange student|"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "have a translation for Singaporean lingo |better understand the language my friends speak in hall"
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|`*`| Temasek Hall Block Head who wants to remember all my block residents|"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "keep a list of all residents and their particulars |contact their next of kin in the case of an"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "emergency"
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "// end::userstory[]"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "//tag::diettrackerusecases[]"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "(For all use cases below, the *System* is the `EYLAH` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d Diet Tracker Use Cases"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC01 Update User Profile"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*Actor:* User +"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "User\u0027s Height, Weight and Mode will be updated in Self."
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "1.  User chooses dieting mode (i.e. Weight Loss, Weight Gain, Maintain)"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "2.  EYLAH updates users\u0027 dieting mode"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "3.  User updates height"
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "4.  EYLAH updates height of user"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "5.  User updates weight"
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "6.  EYLAH updates weight of user"
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* 1a. The flag field for dieting mode is empty or flag is invalid."
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** 1a1. EYLAH requests user to re-enter command with flag"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** 1a2. User enters command with flag +"
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Steps 1a1-1a2 are repeated until the correct entered is correct. +"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* 3a. Height field is empty or in invalid format."
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** 3a1. EYLAH requests user to re-enter height in correct format"
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** 3a2. User enters command with height in correct format +"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Steps 3a1-3a2 are repeated until the correct  entered is correct. +"
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Use case resumes from step 4."
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* 3b. Height value is too large and beyond the limit."
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** 3b1. EYLAH tells user the limit for the height value and prompts to re-enter command."
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** 3b2. User will input values within the specified range. +"
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Steps 3b1-3b2 are repeated until the command entered is correct. +"
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Use case resumes from step 4."
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* 5a. Weight field is empty or in invalid format."
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** 5a1. EYLAH requests user to re-enter weight in correct format"
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** 5a2. User enters command with weight in correct format +"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Steps 5a1-5a2 are repeated until the correct  entered is correct. +"
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Use case resumes from step 6."
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* 5b. Weight value is too large and beyond the limit."
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** 5b1. EYLAH tells user the limit for the weight value and prompts to re-enter command."
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** 5b2. User will input values within the specified range. +"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Steps 5b1-5b2 are repeated until the command entered is correct. +"
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Use case resumes from step 6."
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* *a. At any time, User chooses to not proceed after inputting in invalid command. +"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** *a1. EYLAH will not make any changes +"
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC02 Add Food Item"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*Actor:* User +"
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Food will be added into FoodBook."
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "1.  User adds food item"
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "2.  EYLAH adds food item to user\u0027s log"
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* 1a. The food item is added in an invalid format or certain fields are missing."
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** 1a1. EYLAH requests user to re-enter food item in valid format."
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** 1a2. User enters command in the correct format as requested by EYLAH +"
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Steps 1a1-1a2 are repeated until the correct entered is correct. +"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* *a. At any time, User chooses to not proceed after inputting in invalid command. +"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** *a1. EYLAH will not make any changes +"
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC03 Delete Food Item"
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*Actor:* User +"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Food will be deleted from FoodBook."
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "1.  User lists out existing items"
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "2.  EYLAH shows the list based on flags entered"
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "3.  User deletes item by index"
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "4.  EYLAH deletes item tagged to specified index"
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* 1a. List command contains invalid flag."
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** 1a1. EYLAH will show proper usage of the command and the valid flags."
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** 1a2. User will re-enter the command with a valid flag. +"
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Steps 1a1-1a2 are repeated until the command entered is correct."
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* 3a. Invalid or empty index keyed into command."
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 3a1. EYLAH requests user to re-enter index in correct format"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** 3a2. User enters edit in  correct format +"
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Steps 3a1-3a2 are repeated until the command entered is correct. +"
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Use case resumes from step 4."
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* *a. At any time, User chooses to not proceed after inputting in invalid command. +"
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** *a1. EYLAH will not make any changes +"
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC04 Edit Food Item"
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*Actor:* User +"
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Food in FoodBook will be edited."
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "1.  User lists out existing items"
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "2.  EYLAH shows the list based on flags entered"
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "3.  User edits item by index"
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "4.  EYLAH edits the data of the item stored at the index."
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* 1a. List command contains invalid flag."
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** 1a1. EYLAH will show proper usage of the command and the valid flags."
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** 1a2. User will re-enter the command with a valid flag. +"
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Steps 1a1-1a2 are repeated until the command entered is correct."
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* 3a. Invalid or empty index keyed into command."
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 3a1. EYLAH requests user to re-enter index in correct format"
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** 3a2. User enters edit in  correct format +"
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Steps 3a1-3a2 are repeated until the command entered is correct. +"
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Use case resumes from step 4."
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* 3b. No additional tags and data keyed in as flags to replace existing data."
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 3b1. EYLAH requests user to re-enter command with at least one flag"
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 3b2. User enters command with flag and data +"
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Steps 3b1-3b2 are repeated until the command entered is correct. +"
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Use case resumes from step 4."
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* *a. At any time, User chooses to not proceed after inputting in invalid command. +"
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** *a1. EYLAH will not make any changes +"
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC05 List Food Items"
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*Actor:* User +"
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "List food in FoodBook filtered by tags."
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "1.  User lists out existing items"
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "2.  EYLAH shows the list based on flags entered"
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "+"
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* 1a. Invalid flag or additional arguments are entered into the command."
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** 1a1. EYLAH will show proper usage of the command and the valid flags."
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** 1a2. User will re-enter the command with a valid flag. +"
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Steps 1a1-1a2 are repeated until the command entered is correct."
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* *a. At any time, User chooses to not proceed after inputting in invalid command. +"
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** *a1. EYLAH will not make any changes +"
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC06 Track Daily Calories"
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*Actor:* User +"
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Show user daily food and calorie intake."
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "1.  User calls `list` command"
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "2.  EYLAH shows food intake for the day, calories intake for the day, and calories left to consume"
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "+"
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* 1a. Additional valid flags entered with the list command."
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** 1a1. EYLAH would generate and display the appropriate list according to the flag +"
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "User case ends."
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* *a. At any time, User chooses to not proceed after inputting in invalid command. +"
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** *a1. EYLAH will not make any changes +"
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC07 Calculate BMI"
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*Actor:* User +"
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Calculate BMI for user."
      },
      {
        "lineNumber": 1725,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1726,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1727,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1728,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "1.  User calls `bmi` command, with optional height and weight entered"
      },
      {
        "lineNumber": 1729,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2.  EYLAH calculates and shows user\u0027s BMI based on the height and weight"
      },
      {
        "lineNumber": 1730,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "+"
      },
      {
        "lineNumber": 1731,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1732,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1733,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1734,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1735,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1736,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* 1a. BMI command contains invalid flags."
      },
      {
        "lineNumber": 1737,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** 1a1. EYLAH suggests to user the correct format to use"
      },
      {
        "lineNumber": 1738,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** 1a2. User will key in the correct format +"
      },
      {
        "lineNumber": 1739,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Steps 1a1-1a2 are repeated until the command entered is correct. +"
      },
      {
        "lineNumber": 1740,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1741,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1742,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* 1b. Both height and weight are not provided as input and there is no stored height and weight."
      },
      {
        "lineNumber": 1743,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** 1b1. EYLAH tells user to provide both height and weight as there are no stored values"
      },
      {
        "lineNumber": 1744,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** 1b2. User will input both height and weight values. +"
      },
      {
        "lineNumber": 1745,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Steps 1b1-1b2 are repeated until the command entered is correct. +"
      },
      {
        "lineNumber": 1746,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1747,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1748,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* 1c. Height is not provided as input and there is no stored height."
      },
      {
        "lineNumber": 1749,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** 1c1. EYLAH tells user to provide height as there are no stored value."
      },
      {
        "lineNumber": 1750,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** 1c2. User will input height value with the bmi command. +"
      },
      {
        "lineNumber": 1751,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Steps 1c1-1c2 are repeated until the command entered is correct. +"
      },
      {
        "lineNumber": 1752,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1753,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1754,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* 1d. Weight is not provided as input and there is no stored weight."
      },
      {
        "lineNumber": 1755,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** 1d1. EYLAH tells user to provide weight as there are no stored value."
      },
      {
        "lineNumber": 1756,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** 1d2. User will input Weight value with the bmi command. +"
      },
      {
        "lineNumber": 1757,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Steps 1d1-1d2 are repeated until the command entered is correct. +"
      },
      {
        "lineNumber": 1758,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1759,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1760,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* 1e. Height and weight values are extremely large and beyond the limit."
      },
      {
        "lineNumber": 1761,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** 1e1. EYLAH tells user the limit for the values and prompts to re-enter command."
      },
      {
        "lineNumber": 1762,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** 1e2. User will input values within the specified range. +"
      },
      {
        "lineNumber": 1763,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Steps 1e1-1e2 are repeated until the command entered is correct. +"
      },
      {
        "lineNumber": 1764,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1765,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1766,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* *a. At any time, User chooses to not proceed after inputting in invalid command. +"
      },
      {
        "lineNumber": 1767,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** *a1. EYLAH will not make any changes +"
      },
      {
        "lineNumber": 1768,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1769,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1770,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "//end::diettrackerusecases[]"
      },
      {
        "lineNumber": 1771,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "//tag::expensesplitterusecase[]"
      },
      {
        "lineNumber": 1772,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1773,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d Expense Splitter Use Cases"
      },
      {
        "lineNumber": 1774,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1775,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "//tag::ailanadditemusecase[]"
      },
      {
        "lineNumber": 1776,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1777,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC08 - Adding an Item"
      },
      {
        "lineNumber": 1778,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*Actor:* User +"
      },
      {
        "lineNumber": 1779,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*Guarantees:* +"
      },
      {
        "lineNumber": 1780,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Item will be added into the Receipt."
      },
      {
        "lineNumber": 1781,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1782,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1783,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1784,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "1.  User keys in the ItemName, it\u0027s ItemPrice and Person(s) involved in the splitting of the Item."
      },
      {
        "lineNumber": 1785,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "2.  EYLAH adds the Item and Persons into a Entry."
      },
      {
        "lineNumber": 1786,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "3.  EYLAH adds the Entry into a Receipt."
      },
      {
        "lineNumber": 1787,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "4.  EYLAH displays the Item and Person(s) involved in the splitting of the item, as well as the Amount owed per Person."
      },
      {
        "lineNumber": 1788,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "+"
      },
      {
        "lineNumber": 1789,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1790,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1791,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1792,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1793,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1794,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* 1a. EYLAH detects empty ItemName, ItemPrice or Person(s)"
      },
      {
        "lineNumber": 1795,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "+"
      },
      {
        "lineNumber": 1796,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "** 1a1. EYLAH displays an error message and displays an example of a correct `additem` function."
      },
      {
        "lineNumber": 1797,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "+"
      },
      {
        "lineNumber": 1798,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1799,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1800,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* 1b. Eylah detects invalid \u003c\u003csyntax,syntax\u003e\u003e."
      },
      {
        "lineNumber": 1801,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1802,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "+"
      },
      {
        "lineNumber": 1803,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1804,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "** 1b1. EYLAH displays an error message and displays an example of a correct `additem` function."
      },
      {
        "lineNumber": 1805,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "+"
      },
      {
        "lineNumber": 1806,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1807,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "//end::ailanadditemusecase[]"
      },
      {
        "lineNumber": 1808,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1809,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "//tag::ailandeleteitemusecase[]"
      },
      {
        "lineNumber": 1810,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1811,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC09 - Deleting an Item"
      },
      {
        "lineNumber": 1812,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Actor:* User +"
      },
      {
        "lineNumber": 1813,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*Preconditions:* Item user wants to delete is present in the Receipt. +"
      },
      {
        "lineNumber": 1814,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Guarantees:* +"
      },
      {
        "lineNumber": 1815,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Item will be deleted from Receipt."
      },
      {
        "lineNumber": 1816,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1817,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1818,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1819,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "1.  User keys in request to delete an Item in the current Receipt via it\u0027s Index."
      },
      {
        "lineNumber": 1820,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "2.  EYLAH deletes that Item and deducts the appropriate amount associated with each Person(s) involved in splitting that"
      },
      {
        "lineNumber": 1821,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    Item."
      },
      {
        "lineNumber": 1822,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "3.  EYLAH displays a MESSAGE_SUCCESS informing the user that Item has been successfully deleted."
      },
      {
        "lineNumber": 1823,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "+"
      },
      {
        "lineNumber": 1824,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1825,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1826,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1827,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1828,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* 1a. User did not input the Index of the Item. (Inserting `deleteitem` instead of  `deleteitem 1`)"
      },
      {
        "lineNumber": 1829,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1830,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "** 1a1. EYLAH displays an error message and displays an example of a correct `deleteitem` function."
      },
      {
        "lineNumber": 1831,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1832,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1833,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "//end::ailandeleteitemusecase[]"
      },
      {
        "lineNumber": 1834,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1835,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "// tag::willyusecase[]"
      },
      {
        "lineNumber": 1836,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1837,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "\u003d\u003d\u003d Use case: UC10 - Listing Receipt"
      },
      {
        "lineNumber": 1838,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Actor:* User +"
      },
      {
        "lineNumber": 1839,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Guarantees:* All Items in the current Receipt will be listed out."
      },
      {
        "lineNumber": 1840,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1841,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1842,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1843,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "1.  User requests to list receipt containing Item(s) in the current Receipt."
      },
      {
        "lineNumber": 1844,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "2.  EYLAH displays the list of Item(s) in the current Receipt, its ItemPrice and Person(s) involved in splitting that Item."
      },
      {
        "lineNumber": 1845,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1846,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1847,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1848,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1849,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1850,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1851,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1852,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* 1a. EYLAH detects an empty Receipt."
      },
      {
        "lineNumber": 1853,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1854,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1855,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "** 1a1. EYLAH displays an error message, saying that the Receipt has 0 Item."
      },
      {
        "lineNumber": 1856,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1857,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1858,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1859,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1860,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1861,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "\u003d\u003d\u003d Use case: UC11 - Listing Person(s) and the Amount they owe"
      },
      {
        "lineNumber": 1862,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Actor:* User +"
      },
      {
        "lineNumber": 1863,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Guarantees:* All Person(s) and the amount they owe will be listed."
      },
      {
        "lineNumber": 1864,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1865,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1866,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1867,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "1.  User requests to list all the Person(s) and the Amount they owe the user."
      },
      {
        "lineNumber": 1868,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "2.  EYLAH displays the list of Person(s) and the associated Amount they owe they user."
      },
      {
        "lineNumber": 1869,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1870,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1871,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1872,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1873,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1874,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1875,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* 1a. EYLAH detects an empty Person list."
      },
      {
        "lineNumber": 1876,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1877,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1878,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "** 1a1. EYLAH displays an error message, informing user that there are no Person in the list."
      },
      {
        "lineNumber": 1879,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1880,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1881,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1882,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1883,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1884,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d Use case: UC12 - Paying money"
      },
      {
        "lineNumber": 1885,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Actor:* User +"
      },
      {
        "lineNumber": 1886,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Guarantees:* Reduces the Amount a Person owes and if they owe $0 the Person"
      },
      {
        "lineNumber": 1887,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "is automatically deleted."
      },
      {
        "lineNumber": 1888,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1889,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1890,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1891,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "1.  User requests to reduce the Person\u0027s Amount when he/she has paid the user."
      },
      {
        "lineNumber": 1892,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "2.  EYLAH searches for the Person and reduces the Amount they owe the user, if"
      },
      {
        "lineNumber": 1893,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "after paying the Person does not owe anything, they are deleted."
      },
      {
        "lineNumber": 1894,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "3.  EYLAH then displays the new Amount owed by the Person."
      },
      {
        "lineNumber": 1895,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1896,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1897,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1898,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1899,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1900,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1901,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1902,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* 1a. EYLAH detects that the Person has paid more than what he owes."
      },
      {
        "lineNumber": 1903,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1904,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1905,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "** 1a1. EYLAH displays an error message, informing the user to key in an Amount lesser or equal to"
      },
      {
        "lineNumber": 1906,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "the amount the Person owes."
      },
      {
        "lineNumber": 1907,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1908,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1909,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1910,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1911,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* 2a. EYLAH detects an empty PersonList."
      },
      {
        "lineNumber": 1912,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1913,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1914,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "** 2a1. EYLAH displays an error message, saying that there is no Person in the list."
      },
      {
        "lineNumber": 1915,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1916,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1917,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1918,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1919,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* 2b. EYLAH detects invalid IndexOfPersonPaid."
      },
      {
        "lineNumber": 1920,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1921,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1922,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "** 2b1. EYLAH displays an error message and informs User to key in the correct Index of the"
      },
      {
        "lineNumber": 1923,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "person who paid. EYLAH will prompt the user to use `listamount` to find the Index of Person who"
      },
      {
        "lineNumber": 1924,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "paid."
      },
      {
        "lineNumber": 1925,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1926,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1927,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1928,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1929,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* 2c. EYLAH detects that the Person does not exist in the list."
      },
      {
        "lineNumber": 1930,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1931,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1932,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "** 2c1. EYLAH displays an error message, informing the user to key in the correct index of the Person."
      },
      {
        "lineNumber": 1933,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "EYLAH will prompt the user to use `listamount` to find the Index of Person who"
      },
      {
        "lineNumber": 1934,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "paid."
      },
      {
        "lineNumber": 1935,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1936,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1937,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "//end::willyusecase[]"
      },
      {
        "lineNumber": 1938,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1939,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "//tag::ailanclearreceiptusecase[]"
      },
      {
        "lineNumber": 1940,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1941,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d Use case: UC13 - Clearing the Receipt when Receipt is done"
      },
      {
        "lineNumber": 1942,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*Actor:* User +"
      },
      {
        "lineNumber": 1943,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*Preconditions:* Receipt is marked as done. +"
      },
      {
        "lineNumber": 1944,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*Guarantees:* +"
      },
      {
        "lineNumber": 1945,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Deletes all the Entries in the Receipt. It also marks the Receipt as undone."
      },
      {
        "lineNumber": 1946,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1947,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1948,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1949,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "1.  User requests to clear the receipt after he/she decides to start a clean Receipt."
      },
      {
        "lineNumber": 1950,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "2.  EYLAH removes all the Entries from the Receipt."
      },
      {
        "lineNumber": 1951,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "3.  EYLAH marks the Receipt as undone."
      },
      {
        "lineNumber": 1952,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "4.  EYLAH display a MESSAGE_SUCCESS informing the user that the Receipt has been successfully cleared."
      },
      {
        "lineNumber": 1953,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1954,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1955,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1956,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d Use case: UC14 - Clearing the Receipt when Receipt is undone"
      },
      {
        "lineNumber": 1957,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*Actor:* User +"
      },
      {
        "lineNumber": 1958,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*Preconditions:* Receipt is marked as undone. +"
      },
      {
        "lineNumber": 1959,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*Guarantees:* +"
      },
      {
        "lineNumber": 1960,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Deletes all the Entries in the Receipt. It also marks the Receipt as undone."
      },
      {
        "lineNumber": 1961,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1962,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1963,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1964,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "1.  User requests to clear the receipt after he/she decides to start a clean Receipt."
      },
      {
        "lineNumber": 1965,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "2.  EYLAH removes Amount owed per Person from the PersonAmountBook."
      },
      {
        "lineNumber": 1966,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "3.  EYLAH removes all the Entries from the Receipt."
      },
      {
        "lineNumber": 1967,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "4.  EYLAH display a MESSAGE_SUCCESS informing the user that the Receipt has been successfully cleared."
      },
      {
        "lineNumber": 1968,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1969,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1970,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "//end::ailanclearreceiptusecase[]"
      },
      {
        "lineNumber": 1971,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1972,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1973,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d Use case: UC15 - Back to Main Menu"
      },
      {
        "lineNumber": 1974,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1975,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1976,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1977,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "1.  User requests to exit Expense Splitter and go back to Main Menu of EYLAH."
      },
      {
        "lineNumber": 1978,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "2.  EYLAH exits Expense Splitter and goes back to Main Menu"
      },
      {
        "lineNumber": 1979,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1980,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1981,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1982,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1983,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "//end::expensesplitterusecase[]"
      },
      {
        "lineNumber": 1984,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1985,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1986,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d Use case: UC16 - Completing the receipt"
      },
      {
        "lineNumber": 1987,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*Actor:* User +"
      },
      {
        "lineNumber": 1988,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*Guarantees:* +"
      },
      {
        "lineNumber": 1989,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "Displays the confirmation message to user. It also marks the Receipt as done."
      },
      {
        "lineNumber": 1990,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1991,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1992,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1993,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "1.  User requests to mark the Receipt as done after he/she finish adding the items."
      },
      {
        "lineNumber": 1994,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "2.  EYLAH marks the current Receipt as done."
      },
      {
        "lineNumber": 1995,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "3.  EYLAH display a MESSAGE_SUCCESS informing the user that the Receipt has been marked as completed."
      },
      {
        "lineNumber": 1996,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1997,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "+"
      },
      {
        "lineNumber": 1998,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1999,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 2000,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 2001,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 2002,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 2003,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "* 2a. EYLAH detects that the Receipt has already been marked as done."
      },
      {
        "lineNumber": 2004,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "+"
      },
      {
        "lineNumber": 2005,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 2006,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "** 2a1. EYLAH displays an error message, informing the user that current Receipt already been marked as completed."
      },
      {
        "lineNumber": 2007,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "+"
      },
      {
        "lineNumber": 2008,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 2009,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 2010,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 2011,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 2012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2013,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has `Java 11` or above installed."
      },
      {
        "lineNumber": 2014,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 2015,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ".  Should be able to hold up to 1000 food items without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 2016,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ".  Should have a pre-loaded list of commonly consumed food items in database."
      },
      {
        "lineNumber": 2017,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ".  Should be able to work without internet access."
      },
      {
        "lineNumber": 2018,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ".  A user should be able to use EYLAH easily and intuitively."
      },
      {
        "lineNumber": 2019,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 2020,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".  An Item should not have a Item Price more than $10,000."
      },
      {
        "lineNumber": 2021,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2023,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 2024,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 2025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2026,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[[temasek-hall]] Temasek Hall::"
      },
      {
        "lineNumber": 2027,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "A Hall of Residences in National University of Singapore"
      },
      {
        "lineNumber": 2028,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 2029,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[[cli]] CLI::"
      },
      {
        "lineNumber": 2030,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Command Line Interface"
      },
      {
        "lineNumber": 2031,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 2032,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[[syntax]] Syntax::"
      },
      {
        "lineNumber": 2033,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "The structure of statements in the command"
      },
      {
        "lineNumber": 2034,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 2035,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 2036,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 2037,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2038,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 2039,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 2040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2041,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[bmi]] Body-Mass Index (BMI)::"
      },
      {
        "lineNumber": 2042,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The BMI is a convenient rule of thumb used to broadly categorize a person as underweight, normal weight, overweight,"
      },
      {
        "lineNumber": 2043,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "or obese based on tissue mass (muscle, fat, and bone) and height"
      },
      {
        "lineNumber": 2044,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2045,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2046,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "//tag::diettrackercommandprefix[]"
      },
      {
        "lineNumber": 2047,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "_Table 1. Diet Tracker Command Prefix_ +"
      },
      {
        "lineNumber": 2048,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,options\u003d\"header\",]"
      },
      {
        "lineNumber": 2049,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 2050,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "| Prefix | Description | Used in Following Commands"
      },
      {
        "lineNumber": 2051,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "| -n | Name of Food | \u003c\u003cAdd-Command,*Add*\u003e\u003e, \u003c\u003cEdit-Command,*Edit*\u003e\u003e"
      },
      {
        "lineNumber": 2052,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "| -c | Calories | \u003c\u003cAdd-Command,*Add*\u003e\u003e, \u003c\u003cEdit-Command,*Edit*\u003e\u003e"
      },
      {
        "lineNumber": 2053,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "| -i | Index | \u003c\u003cEdit-Command,*Edit*\u003e\u003e"
      },
      {
        "lineNumber": 2054,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "| -g | Gain | \u003c\u003cMode-Command,*Mode*\u003e\u003e"
      },
      {
        "lineNumber": 2055,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "| -m | Maintain | \u003c\u003cMode-Command,*Mode*\u003e\u003e"
      },
      {
        "lineNumber": 2056,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "| -l | Lose | \u003c\u003cMode-Command,*Mode*\u003e\u003e"
      },
      {
        "lineNumber": 2057,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "| -a | All | \u003c\u003cList-Command,*List*\u003e\u003e"
      },
      {
        "lineNumber": 2058,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "| -d | By Past Num of Days | \u003c\u003cList-Command,*List*\u003e\u003e"
      },
      {
        "lineNumber": 2059,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "| -t | By Tag | \u003c\u003cList-Command,*List*\u003e\u003e"
      },
      {
        "lineNumber": 2060,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "| -h | Height | \u003c\u003cBmi-Command,*Bmi*\u003e\u003e"
      },
      {
        "lineNumber": 2061,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "| -w | Weight | \u003c\u003cBmi-Command,*Bmi*\u003e\u003e"
      },
      {
        "lineNumber": 2062,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 2063,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "//end::diettrackercommandprefix[]"
      },
      {
        "lineNumber": 2064,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2065,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "_Table 2. Expense Splitter Command Prefix_ +"
      },
      {
        "lineNumber": 2066,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,options\u003d\"header\",]"
      },
      {
        "lineNumber": 2067,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 2068,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "| Prefix | Description | Used in Following Commands"
      },
      {
        "lineNumber": 2069,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "| -i | Item Name | \u003c\u003cAdd-Item-Command,*Add Item*\u003e\u003e"
      },
      {
        "lineNumber": 2070,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "| -p | Item Price | \u003c\u003cAdd-Item-Command,*Add Item*\u003e\u003e"
      },
      {
        "lineNumber": 2071,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "| -n | Name of Person | \u003c\u003cAdd-Item-Command,*Add Item*\u003e\u003e"
      },
      {
        "lineNumber": 2072,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 2073,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2074,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 2075,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 2076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2077,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "https://www.myfitnesspal.com/[My Fitness Pal]"
      },
      {
        "lineNumber": 2078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2079,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 2080,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2081,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* Customizable according to the User\u0027s demands."
      },
      {
        "lineNumber": 2082,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* Able to monitor the User\u0027s exercise and movement."
      },
      {
        "lineNumber": 2083,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2084,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 2085,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2086,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* Application was hacked and data was leaked."
      },
      {
        "lineNumber": 2087,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* Unable to use it offline."
      },
      {
        "lineNumber": 2088,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2089,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "https://www.splitwise.com/[Splitwise]"
      },
      {
        "lineNumber": 2090,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2091,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 2092,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2093,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* Very user friendly."
      },
      {
        "lineNumber": 2094,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* Easy track of expenses."
      },
      {
        "lineNumber": 2095,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2096,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 2097,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2098,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* Has a tendency of complicating splitting bills."
      },
      {
        "lineNumber": 2099,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* Unable to use it offline."
      },
      {
        "lineNumber": 2100,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2102,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 2103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 2104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2105,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 2106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2107,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 2108,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 2109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 2111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2112,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 2113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2114,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 2115,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".. Navigate to that folder using Terminal and type `java -jar EYLAH.jar` +"
      },
      {
        "lineNumber": 2116,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "   Expected: Shows the CLI interface with welcome message. The window size may not be optimum."
      },
      {
        "lineNumber": 2117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2118,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//tag::appendixdtadd[]"
      },
      {
        "lineNumber": 2119,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "\u003d\u003d\u003d Adding a Food in Diet Tracker"
      },
      {
        "lineNumber": 2120,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 2121,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ". Adding a Food"
      },
      {
        "lineNumber": 2122,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 2123,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ".. Test case: `add -n burger -c 170` +"
      },
      {
        "lineNumber": 2124,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "   Expected: Food is added to FoodBook. Details of the added Food are shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 2125,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2126,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ".. Test case: `add burger` +"
      },
      {
        "lineNumber": 2127,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "   Expected: No Food is added. Error details and the correct format to input will be shown to the user."
      },
      {
        "lineNumber": 2128,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2129,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Other incorrect add commands to try: `add`, `add` with no flags `-n` and `-c` appended to the command. +"
      },
      {
        "lineNumber": 2130,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 2131,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//end::appendixdtadd[]"
      },
      {
        "lineNumber": 2132,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2133,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 2134,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//tag::appendixdtdelete[]"
      },
      {
        "lineNumber": 2135,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d Deleting a Food in Diet Tracker"
      },
      {
        "lineNumber": 2136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2137,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ". Deleting a Food while all Foods are listed"
      },
      {
        "lineNumber": 2138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2139,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Prerequisites: List all Foods using the `list` command. Multiple Foods in the list."
      },
      {
        "lineNumber": 2140,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2141,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 2142,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "   Expected: First Food is deleted from the list. Details of the deleted Food shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 2143,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2144,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 2145,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "   Expected: No Food is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 2146,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2147,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 2148,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 2149,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//end::appendixdtdelete[]"
      },
      {
        "lineNumber": 2150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2151,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//tag::appendixdtedit[]"
      },
      {
        "lineNumber": 2152,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d Editing a Food in Diet Tracker"
      },
      {
        "lineNumber": 2153,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2154,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ". Editing a Food while all Foods are listed"
      },
      {
        "lineNumber": 2155,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2156,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Edit Command format: `edit -i INDEX [-n NAME] [-c CALORIES]`"
      },
      {
        "lineNumber": 2157,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2158,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Prerequisites: List all Foods using the `list` command. Multiple Foods in the list."
      },
      {
        "lineNumber": 2159,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2160,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Test case: `edit -i 1 -n Pasta` +"
      },
      {
        "lineNumber": 2161,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "   Expected: First Food is edited. Details of the edited Food shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 2162,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "   Food is edited and then restored."
      },
      {
        "lineNumber": 2163,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2164,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Test case: `edit -i 1` +"
      },
      {
        "lineNumber": 2165,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "   Expected: No Food is edited. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 2166,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2167,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Other incorrect delete commands to try: `edit`, `edit -i x` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 2168,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 2169,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//end::appendixdtedit[]"
      },
      {
        "lineNumber": 2170,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2171,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//tag::appendixdtmode[]"
      },
      {
        "lineNumber": 2172,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d Set Dieting Mode In Diet Tracker"
      },
      {
        "lineNumber": 2173,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2174,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ". Setting a Dieting Mode for Diet Tracker."
      },
      {
        "lineNumber": 2175,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2176,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Mode Command format: `mode [-l] [-g] [-m]`"
      },
      {
        "lineNumber": 2177,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2178,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Test case: `mode -l` +"
      },
      {
        "lineNumber": 2179,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Expected: Sets the Dieting Mode for the Diet Tracker and stores it."
      },
      {
        "lineNumber": 2180,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2181,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Test case: `mode` +"
      },
      {
        "lineNumber": 2182,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Expected: No Dieting Mode will be set."
      },
      {
        "lineNumber": 2183,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Error details shown in the response message."
      },
      {
        "lineNumber": 2184,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//end::appendixdtmode[]"
      },
      {
        "lineNumber": 2185,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2186,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//tag::appendixdtmetrics[]"
      },
      {
        "lineNumber": 2187,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d Check User Metrics In Diet Tracker"
      },
      {
        "lineNumber": 2188,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2189,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ". Checking a Users own health metrics (Height, Weight and Dieting Mode)."
      },
      {
        "lineNumber": 2190,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2191,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Metrics Command format: `metrics`"
      },
      {
        "lineNumber": 2192,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2193,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Test case: `metrics` +"
      },
      {
        "lineNumber": 2194,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Expected: The User\u0027s own metrics will be printed out."
      },
      {
        "lineNumber": 2195,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2196,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Test case: `metrics -h` +"
      },
      {
        "lineNumber": 2197,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Expected: No metrics will be shown."
      },
      {
        "lineNumber": 2198,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Error details shown in the response message."
      },
      {
        "lineNumber": 2199,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//end::appendixdtmetrics[]"
      },
      {
        "lineNumber": 2200,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2201,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//tag::appendixdtbmi[]"
      },
      {
        "lineNumber": 2202,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d Calculate BMI In Diet Tracker"
      },
      {
        "lineNumber": 2203,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2204,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ". Calculating BMI for the User or for others."
      },
      {
        "lineNumber": 2205,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2206,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Bmi Command format: `bmi [-h HEIGHT] [-w WEIGHT]`"
      },
      {
        "lineNumber": 2207,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2208,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Test case: `bmi -h 170.2 -w 65.7` +"
      },
      {
        "lineNumber": 2209,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Expected: BMI will be calculated with the Height of 170.2cm and Weight of 65.7kg, and will be printed and shown to the user."
      },
      {
        "lineNumber": 2210,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The BMI category will also be displayed to the User."
      },
      {
        "lineNumber": 2211,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2212,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Test case: `bmi -h 170.2` +"
      },
      {
        "lineNumber": 2213,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Prerequisites: Must have stored Weight using `weight WEIGHT`."
      },
      {
        "lineNumber": 2214,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Expected: BMI will be calculated with the Height of 170.2cm and the User\u0027s stored Weight, and will be printed and shown to the user."
      },
      {
        "lineNumber": 2215,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The BMI category will also be displayed to the User."
      },
      {
        "lineNumber": 2216,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2217,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Test case: `bmi -w 65.7` +"
      },
      {
        "lineNumber": 2218,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Prerequisites: Must have stored Weight using `height HEIGHT`."
      },
      {
        "lineNumber": 2219,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Expected: BMI will be calculated with the User\u0027s stored Height and the Weight of 65.7kg,"
      },
      {
        "lineNumber": 2220,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "and will be printed and shown to the user."
      },
      {
        "lineNumber": 2221,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The BMI category will also be displayed to the User."
      },
      {
        "lineNumber": 2222,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2223,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Test case: `bmi` +"
      },
      {
        "lineNumber": 2224,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Prerequisites: Must have stored Height using `height HEIGHT` and Weight using `weight WEIGHT`."
      },
      {
        "lineNumber": 2225,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Expected: BMI will be calculated with the User\u0027s stored Height and Weight, and will be printed and shown to the user."
      },
      {
        "lineNumber": 2226,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The BMI category will also be displayed to the User."
      },
      {
        "lineNumber": 2227,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2228,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Test case: `bmi -h 10000000000000000 -w 10000000000000000` +"
      },
      {
        "lineNumber": 2229,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Expected: Input height and weight are above the acceptable range."
      },
      {
        "lineNumber": 2230,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Error details shown in the response message."
      },
      {
        "lineNumber": 2231,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2232,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Other incorrect edit commands to try: `bmi -h -1`, `bmi -h 137` (without storing Weight),"
      },
      {
        "lineNumber": 2233,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`bmi -w 67` (without storing Height) +"
      },
      {
        "lineNumber": 2234,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Expected: BMI will not be calculated."
      },
      {
        "lineNumber": 2235,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Error Message will be shown with details."
      },
      {
        "lineNumber": 2236,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//end::appendixdtbmi[]"
      },
      {
        "lineNumber": 2237,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2238,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2239,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//tag::appendixdtheight[]"
      },
      {
        "lineNumber": 2240,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d Store Height In Diet Tracker"
      },
      {
        "lineNumber": 2241,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2242,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ". Storing Height into the Diet Tracker."
      },
      {
        "lineNumber": 2243,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2244,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Height Command format: `height HEIGHT`"
      },
      {
        "lineNumber": 2245,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2246,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Test case: `height 170.2` +"
      },
      {
        "lineNumber": 2247,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Expected: Stores a Height of 170.2cm into Diet Tracker. Details of the height stored are shown in success message."
      },
      {
        "lineNumber": 2248,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2249,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Test case: `height -1` +"
      },
      {
        "lineNumber": 2250,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Expected: Height will not be stored."
      },
      {
        "lineNumber": 2251,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Error details shown in the response message."
      },
      {
        "lineNumber": 2252,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2253,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Other incorrect height commands to try: `height 0`, `height 1000000000000001` +"
      },
      {
        "lineNumber": 2254,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Expected: Height will not be stored."
      },
      {
        "lineNumber": 2255,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Expected: Error message shown with details."
      },
      {
        "lineNumber": 2256,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//end::appendixdtheight[]"
      },
      {
        "lineNumber": 2257,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2258,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//tag::appendixdtweight[]"
      },
      {
        "lineNumber": 2259,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d Store Weight In Diet Tracker"
      },
      {
        "lineNumber": 2260,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2261,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ". Storing Weight into the Diet Tracker."
      },
      {
        "lineNumber": 2262,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2263,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Height Command format: `weight WEIGHT`"
      },
      {
        "lineNumber": 2264,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2265,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Test case: `weight 65.7` +"
      },
      {
        "lineNumber": 2266,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Expected: Stores a Weight of 65.7kg into Diet Tracker. Details of the weight stored are shown in success message."
      },
      {
        "lineNumber": 2267,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2268,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Test case: `weight -1` +"
      },
      {
        "lineNumber": 2269,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Expected: Weight will not be stored."
      },
      {
        "lineNumber": 2270,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Error details shown in the response message."
      },
      {
        "lineNumber": 2271,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 2272,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ".. Other incorrect weight commands to try: `weight 0`, `weight 1000000000000001` +"
      },
      {
        "lineNumber": 2273,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Expected: Weight will not be stored."
      },
      {
        "lineNumber": 2274,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Error message shown with details."
      },
      {
        "lineNumber": 2275,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//end::appendixdtweight[]"
      },
      {
        "lineNumber": 2276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2277,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "//tag::ailanappendixgadditem[]"
      },
      {
        "lineNumber": 2278,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d Add Item In Expense Splitter"
      },
      {
        "lineNumber": 2279,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2280,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ". Adding an Item into the current Receipt."
      },
      {
        "lineNumber": 2281,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2282,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".. Add Item Command format: `additem -i ITEMNAME -p ITEMPRICE -n PERSON [-n PERSON]...`"
      },
      {
        "lineNumber": 2283,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2284,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".. Test case: `additem -i pasta -p 33.50 -n John -n Bob` +"
      },
      {
        "lineNumber": 2285,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Expected: Adds an item with the above details to current receipt and increase the person amount equal to dividing the price"
      },
      {
        "lineNumber": 2286,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "with the number of person splitting that item."
      },
      {
        "lineNumber": 2287,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2288,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".. Test case: `Invalid Syntax` +"
      },
      {
        "lineNumber": 2289,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Expected: No item is added to the current receipt and no change to person amount."
      },
      {
        "lineNumber": 2290,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "An error message will be displayed."
      },
      {
        "lineNumber": 2291,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "//end::ailanappendixgadditem[]"
      },
      {
        "lineNumber": 2292,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 2293,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "//tag::ailanappendixgdeleteitem[]"
      },
      {
        "lineNumber": 2294,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d Delete Item In Expense Splitter"
      },
      {
        "lineNumber": 2295,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 2296,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ". Deleting an Item from the current Receipt."
      },
      {
        "lineNumber": 2297,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 2298,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ".. Delete Item Command format: `deleteitem INDEX`"
      },
      {
        "lineNumber": 2299,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 2300,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 2301,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Expected: Removes the item of the specified index from the receipt."
      },
      {
        "lineNumber": 2302,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 2303,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ".. Test case: `Invalid Syntax` +"
      },
      {
        "lineNumber": 2304,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Expected: No item will be deleted from the current receipt."
      },
      {
        "lineNumber": 2305,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "An error message will be displayed."
      },
      {
        "lineNumber": 2306,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "//end::ailanappendixgdeleteitem[]"
      },
      {
        "lineNumber": 2307,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2308,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "//tag::willylistreceiptappendixg[]"
      },
      {
        "lineNumber": 2309,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d List Receipt in Expense Splitter"
      },
      {
        "lineNumber": 2310,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2311,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ". Listing the items contained in the current receipt. The order of items listed depends on the order"
      },
      {
        "lineNumber": 2312,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "of items added by the user."
      },
      {
        "lineNumber": 2313,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2314,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".. ListReceipt Command format: `listreceipt`"
      },
      {
        "lineNumber": 2315,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2316,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".. Prerequisites: NIL."
      },
      {
        "lineNumber": 2317,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2318,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".. Test case: `listreceipt` +"
      },
      {
        "lineNumber": 2319,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "   Expected: If there are items in the receipt: List all items in the current receipt, its price and amount associated with each"
      },
      {
        "lineNumber": 2320,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "person involved in splitting that item"
      },
      {
        "lineNumber": 2321,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2322,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".. Test case: `listreceipt` +"
      },
      {
        "lineNumber": 2323,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "   Expected: If there are no items in the receipt: EYLAH will inform user that there is no items currently in the receipt."
      },
      {
        "lineNumber": 2324,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2325,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "//end::willylistreceiptappendixg[]"
      },
      {
        "lineNumber": 2326,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2327,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "//tag::willylistamountappendixg[]"
      },
      {
        "lineNumber": 2328,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d List Amount In Expense Splitter"
      },
      {
        "lineNumber": 2329,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2330,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ". List all the Person(s) and the amount they owe."
      },
      {
        "lineNumber": 2331,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2332,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".. List Receipt command format: `listamount`"
      },
      {
        "lineNumber": 2333,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2334,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".. Test case: `listamount` +"
      },
      {
        "lineNumber": 2335,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Expected: If there are Person in the list: List all Person that currently owe the User money. There should not be anyone"
      },
      {
        "lineNumber": 2336,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "with $0 as those who do not owe any money will be"
      },
      {
        "lineNumber": 2337,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "deleted from the PersonList."
      },
      {
        "lineNumber": 2338,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2339,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".. Test case: `listamount` +"
      },
      {
        "lineNumber": 2340,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Expected: If there are no Person in the list: EYLAH will inform user that there no one owes money."
      },
      {
        "lineNumber": 2341,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "//end::willylistamountappendixg[]"
      },
      {
        "lineNumber": 2342,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2343,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "//tag::ailanappendixgdonereceipt[]"
      },
      {
        "lineNumber": 2344,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d Done Receipt In Expense Splitter"
      },
      {
        "lineNumber": 2345,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 2346,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ". Marks the current receipt as done."
      },
      {
        "lineNumber": 2347,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 2348,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ".. Done Receipt Command format: `donereceipt`"
      },
      {
        "lineNumber": 2349,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 2350,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ".. Test case: `donereceipt` +"
      },
      {
        "lineNumber": 2351,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Expected: The receipt is marked as done. A success message will be displayed."
      },
      {
        "lineNumber": 2352,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "//end::ailanappendixgdonereceipt[]"
      },
      {
        "lineNumber": 2353,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 2354,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "//tag::willypaidappendixg[]"
      },
      {
        "lineNumber": 2355,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d Paid Command In Expense Splitter"
      },
      {
        "lineNumber": 2356,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2357,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ". Reduces the amount of money a Person owes."
      },
      {
        "lineNumber": 2358,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2359,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".. Paid command format: `paid` `INDEX` `[AMOUNT]`"
      },
      {
        "lineNumber": 2360,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2361,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".. Test case: `paid 1 1.10` +"
      },
      {
        "lineNumber": 2362,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Expected: Reduces the amount of money the Person at Index 1 owes by $1.10."
      },
      {
        "lineNumber": 2363,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2364,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".. Test case: `paid 1` +"
      },
      {
        "lineNumber": 2365,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Expected: Reduces the entire amount of money the Person at Index 1 owes."
      },
      {
        "lineNumber": 2366,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2367,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".. Test case: `paid -1` +"
      },
      {
        "lineNumber": 2368,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Expected: EYLAH will inform the user that INDEX is incorrect."
      },
      {
        "lineNumber": 2369,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "//end::willypaidappendixg[]"
      },
      {
        "lineNumber": 2370,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2371,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "//tag::ailanappendixgclearreceipt[]"
      },
      {
        "lineNumber": 2372,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d Clear Receipt In Expense Splitter"
      },
      {
        "lineNumber": 2373,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 2374,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ". Clears the receipt and marks the receipt as undone."
      },
      {
        "lineNumber": 2375,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 2376,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ".. Clear Receipt Command format: `clearreceipt`"
      },
      {
        "lineNumber": 2377,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 2378,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ".. Test case: `clearreceipt` +"
      },
      {
        "lineNumber": 2379,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Expected: The receipt is cleared and is marked as undone. A success message will be displayed."
      },
      {
        "lineNumber": 2380,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "//end::ailanappendixgclearreceipt[]"
      },
      {
        "lineNumber": 2381,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 2382,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 2383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2384,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ". Manual saving is not required as data is already saved in the hard disk after any commands that changes the data."
      },
      {
        "lineNumber": 2385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2386,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2387,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2388,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 2389,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d Effort"
      },
      {
        "lineNumber": 2390,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2391,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Overview* +"
      },
      {
        "lineNumber": 2392,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "As residents of Temasek Hall, members of our group frequents the supper area rather often and we have come to realise"
      },
      {
        "lineNumber": 2393,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "two problems that we face: +"
      },
      {
        "lineNumber": 2394,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "1. Splitting bills with multiple people can be a headache, especially if some of the food items are shared amongst"
      },
      {
        "lineNumber": 2395,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "different groups of residents. +"
      },
      {
        "lineNumber": 2396,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "2. There was no way of tracking our diet with the numerous suppers that we had."
      },
      {
        "lineNumber": 2397,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2398,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "In order to dive deeper into this problem, our group asked around to see if similar problems were faced by other"
      },
      {
        "lineNumber": 2399,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "residents. What we found was that many residents faced the same problems. One of the residents even conducted a survey"
      },
      {
        "lineNumber": 2400,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "before. As such, after studying the survey, our team wanted realised that we could make an application to help residents"
      },
      {
        "lineNumber": 2401,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "with problems we all face while staying in Temasek Hall."
      },
      {
        "lineNumber": 2402,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2403,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Hence, we decided to build EYLAH, a super application that has both a diet tracker and a expense splitter functionality."
      },
      {
        "lineNumber": 2404,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "EYLAH is significantly different from Address Book 3 (AB3) in many aspects."
      },
      {
        "lineNumber": 2405,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "We needed to add audience-specific features to satisfy the needs of our target audience-residents staying in Temasek"
      },
      {
        "lineNumber": 2406,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Hall."
      },
      {
        "lineNumber": 2407,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2408,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2409,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*Challenges* +"
      },
      {
        "lineNumber": 2410,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "The team encountered a few issues during the development process of EYLAH. The more notable ones are:"
      },
      {
        "lineNumber": 2411,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 2412,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "- *Project Ideation* +"
      },
      {
        "lineNumber": 2413,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "At the very beginning of our project, we came up with many different ideas that could potentially solve the various"
      },
      {
        "lineNumber": 2414,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "problems Temasek Hall residents face. After many discussions, we finally boiled it down to 2 ideas."
      },
      {
        "lineNumber": 2415,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Moving on, we realised that each of us had our own idea of how to implement each feature and we even had some arguments"
      },
      {
        "lineNumber": 2416,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "regarding this. However, we sat down and sorted out the uncertainties and clarified with each other what the best"
      },
      {
        "lineNumber": 2417,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "approach would be to tackle the implementation of these ideas. At the end of the day, we not only came up with the"
      },
      {
        "lineNumber": 2418,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "solution but also the roadmap to our project."
      },
      {
        "lineNumber": 2419,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 2420,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "- *Representation of Currency* +"
      },
      {
        "lineNumber": 2421,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "When we first started building our application. We were met with our first roadblock. How should we represent our"
      },
      {
        "lineNumber": 2422,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "currency? We knew that using `double` was out of the question as there were issues with it overflowing. Not only that,"
      },
      {
        "lineNumber": 2423,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "floating point values cannot be stored exactly in memory. There was also the issue of loss of significance. (Explained"
      },
      {
        "lineNumber": 2424,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "here: htts://dzone.com/articles/never-use-float-and-double-for-monetary-calculatio) As such, Willy"
      },
      {
        "lineNumber": 2425,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "did a bit of research and discovered that using Java\u0027s `BigDecimal` was the way to go. `BigDecimal` does not allow"
      },
      {
        "lineNumber": 2426,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "negative values and allows for precision formatting."
      },
      {
        "lineNumber": 2427,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 2428,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "- *Deleting an Item after Paid* +"
      },
      {
        "lineNumber": 2429,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Whenever a user adds an Item, the Amount owed by someone is stored in a PersonAmountBook. When a Item"
      },
      {
        "lineNumber": 2430,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "is deleted, the Amount is also removed from the PersonAmountBook. The problem we faced here is when the user decides to"
      },
      {
        "lineNumber": 2431,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "use the `paid` command to reduce the Amount owed by someone before using the `deleteitem` command. This meant that the"
      },
      {
        "lineNumber": 2432,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Amount owed by someone might potentially go to negative, which is not allowed by nature of `BigDecimal`. As such, our"
      },
      {
        "lineNumber": 2433,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "group decided to include a boolean flag in the Receipt to ensure that the `paid` command can only be used after the"
      },
      {
        "lineNumber": 2434,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Receipt has been marked as completed. Similarly, the `additem` and `deleteitem` commands can only be used if the Receipt"
      },
      {
        "lineNumber": 2435,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "is marked as incomplete."
      },
      {
        "lineNumber": 2436,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 2437,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "- *Integer Overflow* +"
      },
      {
        "lineNumber": 2438,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "In many of our intra-group bug testing sessions, we would often encounter problems with regards to integer overflow,"
      },
      {
        "lineNumber": 2439,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "whereby we would enter an incredibly large number as the price of an Item or the Calories of a Food. This would cause"
      },
      {
        "lineNumber": 2440,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Exceptions to be thrown, causing our application to crash. To fix such problems, we made a cap on the values that can"
      },
      {
        "lineNumber": 2441,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "be inputted by the user."
      },
      {
        "lineNumber": 2442,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 2443,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Conclusion* +"
      },
      {
        "lineNumber": 2444,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "In conclusion, our team had a terrific time working with each another and we hope our application, EYLAH, will indeed"
      },
      {
        "lineNumber": 2445,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "help to ease the lives of the residents at Temasek Hall."
      },
      {
        "lineNumber": 2446,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Overall, we believe that EYLAH is a good testament to our hard work and the time spent on perfecting it."
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 658,
      "sheexiong": 165,
      "ailanthustng": 432,
      "WillySeahh": 557,
      "akhilvuputuri": 292,
      "-": 342
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d EYLAH - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W13-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 1,
      "ailanthustng": 1,
      "-": 121
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d EYLAH - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W13-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ". Run the `seedu.eylah.Eylah` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level3` repo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level3`), you should do the following:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, EYLAH\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "sheexiong": 1,
      "ailanthustng": 1,
      "WillySeahh": 2,
      "-": 80
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d EYLAH - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W13-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "e.g. `seedu.eylah.commons.util.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "e.g. `seedu.eylah.expensesplitter.storage.SplitterStorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "e.g. `seedu.eylah.diettracker.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 3,
      "sheexiong": 1,
      "ailanthustng": 1,
      "-": 47
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d EYLAH - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ":toclevels: 5"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W13-1/main"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "By: `AY1920S2-CS2103T-W13-1`      Since: `Feb 2020`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[[intro]]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "//tag::intro[]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "This user guide provides in-depth documentation on the EYLAH desktop application. It comprises of 7 main portions,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "the \u003c\u003cintro, introduction\u003e\u003e, \u003c\u003cgetting-started, getting started\u003e\u003e, \u003c\u003cFeatures,features\u003e\u003e, \u003c\u003cfaq, FAQ\u003e\u003e,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003c\u003ccommand-summary, command summary\u003e\u003e, \u003c\u003cglossary, glossary\u003e\u003e and \u003c\u003cAppendixA, appendix\u003e\u003e."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Hello there! Welcome to EYLAH\u0027s User Guide."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Are you someone who *lives in Temasek Hall* in the National University of Singapore (NUS) and"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "has *supper frequently with your hall mates?* Do experience *splitting headaches when splitting large bills amongst"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "a large group of friends*? Have you ever wished for a *quick and easy way to manage your calorie intake*?"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Or wished for a *Command Line Interface* (CLI) application that can solve the above mentioned issues?"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "If you answered *\"YES!\"* to any of the above questions, Ease Your Life At Halls (EYLAH) is a revolutionary new"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "super-application that developed just for you that will make your lives at halls much easier!"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "EYLAH is an Expense Splitter and Diet Tracker rolled into one, for Temasek Hall residents who *prefer to use a desktop"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "app to solve issues.* More importantly, EYLAH is optimized for residents who prefer to work with a *Command Line"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Interface* (CLI)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "EYLAH can solve your problems in halls by *tracking your diet* after those unhealthy suppers"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "and *splitting the cost* after each outing or late-night party session with a few keystrokes of your keyboard."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Interested? Jump to \u003c\u003cGetting Started\u003e\u003e to get started. Let\u0027s go!"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Hope you have a pleasant experience using EYLAH!"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ".Launch screen of EYLAH"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "image::Ui.png[width\u003d\"890\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "//end::intro[]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d Purpose"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* This documentation serves as an introduction to the features and proper usage of EYLAH, and is made to aid you"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "in using the application to improve your lives in Temasek Hall."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d Tips on reading the User Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "We encourage you to read EYLAH\u0027s User Guide from top to bottom."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "While reading the User Guide you may encounter some symbols."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "These symbols are used to highlight crucial information or tips and in this portion we will be explaining the symbols"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "and what they stand for."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "These symbols include:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "This block of text with a blue exclamation mark indicates *additional notes* and *information* that you should"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "consider to prevent unexpected behaviour you are using EYLAH."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "This block of text with a yellow light bulb indicates *additional tips* that will help you when using EYLAH."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "This block of text with a warning sign indicates warnings, information you should take extreme note of."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "kbd:[Enter] - This symbol indicates the enter button on the keyboard."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`markup` - A grey highlight (known as a mark-up) indicates a command that can be inputted into EYLAH. +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "`[-c Calories]` - For some commands there are optional fields. Keywords placed in square brackets are optional fields. +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "(e.g: `edit INDEX [-n NAME] [-c CALORIES]` )"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Lastly, blue underline words like link:[this] will lead you to other portions of the User Guide or to an external"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "website."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[[getting-started]]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d Getting Started"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Need help setting up EYLAH? Simply follow the steps below to get started in no time!"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ".  Ensure you have `Java 11` or above installed in your Computer."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".  Download the latest `EYLAH.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for EYLAH."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".  Navigate to the folder in terminal and to run the jar file type `java -jar EYLAH.jar`."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will show you the commands you can type."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "* `1` or `diet` : enters the Diet Tracker component of EYLAH."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "* `2` or `split` : enters the Expense Splitter component of EYLAH."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* `help` : shows the list of commands you can execute at each page."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* `exit` : exits the app"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "In this section, you can find *all* the commands of EYLAH and some tips and trick you can use to improve your user"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "experience while using EYLAH."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[cols\u003d \"50%, 50%\"]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|*Diet Tracker*  | *Expense Splitter*"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "| \u003c\u003cmode, mode\u003e\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "| \u003c\u003cadditem, additem\u003e\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "| \u003c\u003cheight, height\u003e\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "| \u003c\u003cdeleteitem, deleteitem\u003e\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "| \u003c\u003cweight, weight\u003e\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "| \u003c\u003clistreceipt, listreceipt\u003e\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "| \u003c\u003cmetrics, metrics\u003e\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "| \u003c\u003clistamount, listamount\u003e\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "| \u003c\u003ccalculatebmi, bmi\u003e\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "| \u003c\u003cdonereceipt, donereceipt\u003e\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "| \u003c\u003caddfood, add\u003e\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "| \u003c\u003cpaid, paid\u003e\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "| \u003c\u003clistfooditem, list\u003e\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "| \u003c\u003cclearreceipt, clearreceipt\u003e\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "| \u003c\u003cdeletefooditem, delete\u003e\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "| \u003c\u003chelp, help\u003e\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "| \u003c\u003ceditfooditem, edit\u003e\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "| \u003c\u003cdietback, back\u003e\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "| \u003c\u003chelp, help\u003e\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "| \u003c\u003csplitback, back\u003e\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* Words in `UPPER_CASE` are the parameters supplied by the user,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "e.g: in `additem -i ITEMNAME -p ITEMPRICE -n NAME`,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`ITEMNAME`, `ITEMPRICE` and `NAME` are parameters which can decided by the user,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "e.g: `additem -i pizza -p 19.90 -n charlotte`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* Items in square brackets are optional, e.g: `paid INDEX [AMOUNT]` can be used as `paid 1` or as"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`paid 1 3.90`."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* Parameters with `…`​ after them can be used multiple times including zero times, e.g: `[-n NAME]...` can be used as `{nbsp}`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "(i.e. 0 times), `-n Charlotte`, `-n Alice -n Bob` etc."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "//tag::help[]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "[[help]]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "\u003d\u003d\u003d Display the available commands : `help`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "In this section, you will learn more about `help` command, \u003c\u003chowtousehelpcommand, how to use it\u003e\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "and the \u003c\u003chelpexpectedoutcome, expected outcome\u003e\u003e after using the `help` command."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*Summary of Help Command:* +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "`help` You can use the `help` command, if you are uncertain, to see the list of available commands."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "This command can be used everywhere in the application."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "[[howtousehelpcommand]]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*How to use the Help Command:*"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "`help` +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "Valid Example: +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "[[helpexpectedoutcome]]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*Expected outcome:*"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*Main Menu:*"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".Main Menu Help"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "image::main_help.png[width\u003d\"890\"]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*Diet Tracker Mode:*"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".Diet Tracker Help"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "image::diethelp.png[width\u003d\"890\"]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*Expense Splitter Mode:*"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".Expense Splitter Help"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "image::splithelp.png[width\u003d\"890\"]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*Additional notes and tips* +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "Help in main menu and different mode will give different help information."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "//end::help[]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//tag::diettrackerintro[]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "\u003d\u003d\u003d Diet Tracker : `diet`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Using a Dieting App has never been easier! You can easily achieve the functionalities of a standard Dieting App with Diet Tracker."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Diet Tracker will help you achieve your ideal weight and body mass!"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "You can store all your food intake everyday and calculate useful information."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//end::diettrackerintro[]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//tag::diettrackermode[]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[[mode]]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "\u003d\u003d\u003d\u003d Dieting Mode `mode`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "In this section, you will learn more about the `mode` command, \u003c\u003chowtousemodecommand, how to use it\u003e\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "and the \u003c\u003cmodeexpectedoutcome, expected outcome\u003e\u003e after using the"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`mode` command."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Summary of Mode Command:* +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "`mode` You can set your desired dieting goal with the different modes that set a limit on your daily"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "calorie intake. The calorie limits are calculated based on that of an average human. Your daily calories intake status"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "can be monitored with the `list` command."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Switch the dieting mode, based on the following modes: +"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* Lose Weight (-l) (2000 calorie limit)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* Gain Weight (-g) (3000 calorie limit)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* Maintain (-m) (2500 calorie limit)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[howtousemodecommand]]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*How to use the Mode Command:*"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`mode [-l] [-g] [-m]` +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Valid Example: +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`mode -l`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "You must only input *EXACTLY ONE* mode per mode command."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[modeexpectedoutcome]]"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Expected outcome:*"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".Diet Tracker Mode Command"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "image::dietTrackerModeCommandSuccessPhoto.png[width\u003d\"890\"]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Additional notes and tips* +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "The default mode is MAINTAIN if you have not set your mode."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* Switch your Dieting Mode to help yourself reach your diet targets better!"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* Check your currently chosen Dieting Mode with `metrics`."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//end::diettrackermode[]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//tag::diettrackerheight[]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[height]]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Storing Height `height`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "In this section, you will learn more about the `height` command, \u003c\u003chowtouseheightcommand, how to use it\u003e\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "and the \u003c\u003cheightexpectedoutcome, expected outcome\u003e\u003e after using the"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`height` command."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Summary of Height Command:* +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`height` You can use this command to save your Height to the Diet Tracker."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[howtouseheightcommand]]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*How to use the Height Command:*"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`height HEIGHT` +"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Valid Example: +"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`height 170.2`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[heightexpectedoutcome]]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Expected outcome:*"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".Diet Tracker Height Command"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "image::dietTrackerHeightCommandSuccessPhoto.png[width\u003d\"890\"]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Additional notes and tips* +"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Height in centimetres (cm). Decimal places are accepted. I.e. `height 172.305` is accepted."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Check your stored height with `metrics`."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//end::diettrackerheight[]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//tag::diettrackerweight[]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[weight]]"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Storing Weight `weight`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "In this section, you will learn more about the `weight` command, \u003c\u003chowtouseweightcommand, how to use it\u003e\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "and the \u003c\u003cweightexpectedoutcome, expected outcome\u003e\u003e after using the"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`weight` command."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Summary of Weight Command:* +"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`weight` You can use this command to save your Weight to the Diet Tracker."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[howtouseweightcommand]]"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*How to use the Weight Command:*"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`weight WEIGHT` +"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Valid Example: +"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`weight 65.7`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[weightexpectedoutcome]]"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Expected outcome:*"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".Diet Tracker Weight Command"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "image::dietTrackerWeightCommandSuccessPhoto.png[width\u003d\"890\"]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Additional notes and tips* +"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Weight in kilograms (kg). Decimal places are accepted. I.e. `weight 65.77` is accepted."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Check your stored weight with `metrics`."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//end::diettrackerweight[]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//tag::diettrackermetrics[]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[metrics]]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Showing your Metrics `metrics`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "In this section, you will learn more about the `metrics` command, \u003c\u003chowtousemetricscommand, how to use it\u003e\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "and the \u003c\u003cmetricsexpectedoutcome, expected outcome\u003e\u003e after using the"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`metrics` command."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Summary of Metrics Command:* +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`metrics` You can print out your individual metrics (Height, Weight and Mode) to check them."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "It will display the following data: +"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* Your height"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* Your weight"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* Your chosen Dieting Mode"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[howtousemetricscommand]]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*How to use the Metrics Command:*"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`metrics` +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Valid Example: +"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`metrics`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[metricsexpectedoutcome]]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Expected outcome:*"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".Diet Tracker Metrics Command"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "image::dietTrackerMetricsCommandSuccessPhoto.png[width\u003d\"890\"]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Additional notes and tips* +"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Diet Tracker will prompt you if you did not have any previously stored Height, Weight."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use this to check whether you have previously stored a Height, a Weight, or have chosen your Dieting Mode already."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//end::diettrackermetrics[]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//tag::diettrackerbmi[]"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[calculatebmi]]"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Calculating Body Mass Index (BMI) `bmi`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "In this section, you will learn more about the `bmi` command, \u003c\u003chowtousebmicommand, how to use it\u003e\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "and the \u003c\u003cbmiexpectedoutcome, expected outcome\u003e\u003e after using the"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`bmi` command."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Summary of Bmi Command:* +"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`bmi` You can calculate your BMI either through an input height and weight or your previously stored Height and Weight. +"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "It will display the following data: +"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* BMI value"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[howtousebmicommand]]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*How to use the Bmi Command:*"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* There are 3 ways to use `bmi`."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* The first is if there is no input height and weight. This will use"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "the height and weight that is stored in the Self object."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* The second is if there is either no input height or input weight. This will use the"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "stored Height (in the case of missing input height) or stored Weight (in the case of missing input weight)"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "to do the calculation instead."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* The third is to calculate bmi with an input height and weight."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`bmi [-h HEIGHT] [-w WEIGHT]` +"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Valid Examples:"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* `height 172` +"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`weight 65` +"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`bmi` +"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Change your height and your weight to your current measurements before calculating your BMI."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "BMI is calculated based off the stored height and weight in this instance."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* `height 173.5` +"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "`bmi -w 59.9` +"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Change your height to your current measurements before calculating you BMI."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "BMI is calculated based off the stored height and input weight in this instance."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* `bmi -h 172 -w 65.5` +"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Calculate BMI based on the input height and weight values."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[bmiexpectedoutcome]]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Expected outcome:*"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".Diet Tracker Bmi Command"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "image::dietTrackerBmiCommandSuccessPhoto.png[width\u003d\"890\"]"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Additional tips* +"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "If you are unsure whether you have already input your height and weight, you may `metrics` to check."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//end::diettrackerbmi[]"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//tag::diettrackeradd[]"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[[addfood]]"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Adding food `add`"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "In this section, you will learn more about the `add` command, \u003c\u003chowtouseaddcommand, how to use it\u003e\u003e"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "and the \u003c\u003caddexpectedoutcome, expected outcome\u003e\u003e after using the"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`add` command."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Summary of Add Command:* +"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`add` You can use this command to add a food to the list."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[howtouseaddcommand]]"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*How to use the Add Command:*"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`add -n NAME -c CALORIES [-t TAG]...` +"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Valid Example: +"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`add -n Fishball Noodles -c 383 -t favourite -t noodles`"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[addexpectedoutcome]]"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Expected outcome:*"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".Diet Tracker Add Command"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "image::dietTrackerAddCommandSuccessPhoto.png[width\u003d\"890\"]"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Additional notes* +"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* Name and Calories are compulsory."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* Tags are optional."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* Any food that you add will be added based on the time that you keyed in the food data. As of Diet Tracker\u0027s current functionalities, you cannot add in foods that you have consumed the day before while also setting that food to appear for the previous day\u0027s data."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//end::diettrackeradd[]"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//tag::diettrackerlist[]"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[[listfooditem]]"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Listing items `list`"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "In this section, you will learn more about the `list` command, \u003c\u003chowtouselistcommand, how to use it\u003e\u003e"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "and the \u003c\u003clistexpectedoutcome, expected outcome\u003e\u003e after using the"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`list` command."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Summary of List Command:* +"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`list` You can use this function to list out the different foods that you have consumed and their total calories."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Different listing modes allow you to watch your overall diet during the period, or how much you can/should eat based"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "on your daily intake."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Displays different data based on the below flags:"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* Food consumed for the day (NO FLAG)"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* All food ever consumed (-a)"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* Food consumed for the past number of days (-d)"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* All food with the given tag (-t)"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[howtouselistcommand]]"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*How to use the List Command:*"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`list [-a] [-d NUMDAYS] [-t TAGNAME]` +"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Valid Examples: +"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`list -a` +"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`list -d 3` +"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`list -t healthy`"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[listexpectedoutcome]]"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Expected outcome:*"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".Diet Tracker List Command"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "image::dietTrackerListCommandSuccessPhoto.png[width\u003d\"890\"]"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Additional notes* +"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* Default value of list is food consumed for the day."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* For the `-d` tag, the amount of days specified must be a positive Integer value."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* Calorie intake based on mode is only shown when listing food for the day."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//end::diettrackerlist[]"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//tag::diettrackerdelete[]"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[[deletefooditem]]"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a Food Item `delete`"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "In this section, you will learn more about the `delete` command, \u003c\u003chowtousedeletecommand, how to use it\u003e\u003e"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "and the \u003c\u003cdeleteexpectedoutcome, expected outcome\u003e\u003e after using the"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`delete` command."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Summary of Delete Command:* +"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`delete` You can delete a food item based on the previous list of Foods that you have listed. +"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[howtousedeletecommand]]"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*How to use the Delete Command:*"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`delete INDEX` +"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* Deletes the food item at the specified `INDEX` of the list."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* The index refers to the index number shown in the displayed food list."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Valid Example: +"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Deletes the 2nd row of food data from today\u0027s list of food."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "You *MUST* use `list` to check the list of items to identify a target to edit. This would ensure that you get the"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "correct index of the item."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[deleteexpectedoutcome]]"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Expected outcome:*"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".Diet Tracker Delete Command"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "image::dietTrackerDeleteCommandSuccessPhoto.png[width\u003d\"890\"]"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Additional notes and tips* +"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "You can list based on time period or tags to find the item that you want to delete."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//end::diettrackerdelete[]"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//tag::diettrackeredit[]"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[[editfooditem]]"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a Food Item `edit`"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "In this section, you will learn more about the `edit` command, \u003c\u003chowtouseeditcommand, how to use it\u003e\u003e"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "and the \u003c\u003ceditexpectedoutcome, expected outcome\u003e\u003e after using the"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`edit` command."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Summary of Edit Command:* +"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`edit` You can edit either the Food name, or the calories of the food at the specified index.  +"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[howtouseeditcommand]]"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*How to use the Edit Command:*"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`edit -i INDEX [-n NAME] [-c CALORIES]` +"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* Edits the Food Item at the specified `INDEX`."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The index refers to the index number shown in the displayed Food list."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Valid Example: +"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`edit -i 2 -n Chicken Rice -c 585` +"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Edits the name of the food item at index 2 to be \u0027Chicken Rice\u0027 and the calories to be \u0027585\u0027."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "You *MUST* use `list` to check the list of items to identify a target to edit. This would ensure that you get the"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "correct index of the item."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "[[editexpectedoutcome]]"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Expected outcome:*"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".Diet Tracker Edit Command"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "image::dietTrackerEditCommandSuccessPhoto.png[width\u003d\"890\"]"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*Additional notes and tips* +"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "You can list based on time period or tags to find the item that you want to edit."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//end::diettrackeredit[]"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//tag::diettrackerback[]"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "[[dietback]]"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting Diet Tracker to go back to main menu `back`"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "In this section, you will learn more about the `back` command, \u003c\u003chowtousedietbackcommand,how to use it\u003e\u003e"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "and the \u003c\u003cdietbackexpectedoutcome,expected outcome\u003e\u003e after using the `back` command."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*Summary of Back Command:* +"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "`back` allows you to exits Diet Tracker mode to go back to main menu of the application."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "[[howtousedietbackcommand]]"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*How to use the Back Command:*"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "`back`"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Valid Example: +"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "`back`"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "[[dietbackexpectedoutcome]]"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*Expected outcome:*"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".Diet Tracker Back Command"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "image::dietTrackerBackCommandSuccessPhoto.png[width\u003d\"890\"]"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//end::diettrackerback[]"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "//tag::introtoexpensesplitter[]"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "\u003d\u003d\u003d Expense Splitter : `split`"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Getting a headache from splitting *that* ever-so-complicated bill?"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "With EYLAH, splitting a large receipt with friends has never been easier! All you have to do is add the item,"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "it\u0027s price and the names involved in splitting that item and EYLAH will calculate the rest for you!"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "We have drawn some diagrams to help you visualize how Expense Splitter works, click \u003c\u003cAppendixA, here\u003e\u003e to find out more!"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Here are some of the prefixes used:"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|*Prefix* | *Representation*"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "| -i | Item Name"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "| -p | Item Price"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "| -n | Name of Person"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "//end::introtoexpensesplitter[]"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "//tag::additem[]"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[[additem]]"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d\u003d Adding an item: `additem`"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "In this section, you will learn more about the `additem` command, \u003c\u003chowtouseadditemcommand,how to use it\u003e\u003e"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "and the \u003c\u003cadditemexpectedoutcome,expected outcome\u003e\u003e after using the `additem` command."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*Summary of Add Item Command:* +"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`additem` allows you to add an item, it\u0027s price and the persons involved in sharing the cost of that item."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[[howtouseadditemcommand]]"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*How to use the Add Item Command:*"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`additem -i ITEMNAME -p PRICE -n NAME` +"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "`additem -i ITEMNAME -p PRICE -n NAME [-n NAME]...` +"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Valid Example: +"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`additem -i pizza -p 30 -n bob` +"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`additem -i pasta -p 19.90 -n alice -n bob -n charlie`"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[[additemexpectedoutcome]]"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*Expected outcome:*"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".Expense Splitter Add Item Command"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "image::expensesplitteradditemexpectedoutcome.png[width\u003d\"890\"]"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* Price can be up to 2 decimal places, i.e. 7.99."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "There is no need to add the dollar sign ($)."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* The maximum price of an item is 10,000."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* All names inputted will automatically be converted to lowercase. (e.g: Bob -\u003e bob)"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "//end::additem[]"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "//tag::deleteitem[]"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[[deleteitem]]"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting an item: `deleteitem`"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "In this section, you will learn more about the `deleteitem` command, \u003c\u003chowtousedeleteitemcommand,how to use it\u003e\u003e"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "and the \u003c\u003cdeleteitemexpectedoutcome,expected outcome\u003e\u003e after using the `deleteitem` command."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*Summary of Delete Item Command:* +"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`deleteitem` allows you to delete an item from the receipt."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[[howtousedeleteitemcommand]]"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*How to use the Delete Item Command:*"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`deleteitem INDEX` +"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Valid Example: +"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "`deleteitem 3`"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[[deleteitemexpectedoutcome]]"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*Expected outcome:*"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".Expense Splitter Delete Item Command"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "image::expensesplitterdeleteitemexpectedoutcome.png[width\u003d\"890\"]"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Use `listreceipt` to view your item indices before deletion."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "//end::deleteitem[]"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "//tag::listreceipt[]"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[[listreceipt]]"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d\u003d Listing the current receipt: `listreceipt`"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "In this section, you will learn more about the `listreceipt` command, \u003c\u003chowtouselistreceiptcommand,how to use it\u003e\u003e"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "and the \u003c\u003clistreceiptexpectedoutcome,expected outcome\u003e\u003e after using the"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "`listreceipt` command."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*Summary of List Receipt Command:* +"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`listreceipt` shows you all the entries in your current receipt."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[[howtouselistreceiptcommand]]"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*How to use the List Receipt Command:*"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "`listreceipt` +"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Valid Example: +"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "`listreceipt`"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[[listreceiptexpectedoutcome]]"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Expected outcome:*"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".Expense Splitter List Receipt Command"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "image::listreceipt.png[width\u003d\"890\"]"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Additional notes and tips* +"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Each entry in the receipt has the item\u0027s name, price and person(s) who is splitting that item with you thus you do"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "not have to remember who you split this item with!"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use `listreceipt` command to find the index of the item in the receipt. The index is useful for commands"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "such as `deleteitem` where you have to pass in the index of item to be deleted."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "//end::listreceipt[]"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "//tag::listamount[]"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[[listamount]]"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d\u003d Listing amounts owed by each person: `listamount`"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "In this section, you will learn more about the `listamount` command, \u003c\u003chowtouselistamountcommand,how to use it\u003e\u003e"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "and the \u003c\u003clistamountexpectedoutcome,expected outcome\u003e\u003e after using the"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "`listamount` command."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Summary of List Amount Command:* `listamount` *shows you how much each Person owes you*."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[[howtouselistamountcommand]]"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*How to use the List Amount Command:*"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "`listamount` +"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Valid example: +"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "`listamount`"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[[listamountexpectedoutcome]]"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Expected outcome:*"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".Expense Splitter List Amount Command"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "image::listamount.png[width\u003d\"890\"]"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Additional notes and tips* +"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* The Person and amount owed will be automatically saved after each command."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* A person is deleted after they have completely paid the amount they owe you."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use `listamount` command to find the index of the person who paid you. The index is useful for commands"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "such as `paid`."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "//end::listamount[]"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "//tag::donereceipt[]"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[[donereceipt]]"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d\u003d Mark receipt as done `donereceipt`"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "In this section, you will learn more about the `donereceipt` command, \u003c\u003chowtousedonereceiptcommand,how to use it\u003e\u003e"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "and the \u003c\u003cdonereceiptexpectedoutcome,expected outcome\u003e\u003e after using the `donereceipt` command."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*Summary of Done Receipt Command:* `donereceipt` *marks the receipt as done when you have completed entering"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "all the items."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "[[howtousedonereceiptcommand]]"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*How to use the Done Receipt Command:*"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`donereceipt`"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`donereceipt`"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "[[donereceiptexpectedoutcome]]"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*Expected outcome:*"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".Expense Splitter Done Receipt Command"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "image::donereceipt.png[width\u003d\"890\"]"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* Use this command only after all Items have been correctly added to the Receipt."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* After you use this command, you will be unable to add any new items using the `additem` command"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "or delete any items using the `deleteitem` command."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* However, you are now able to use the `paid` command."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "//end::donereceipt[]"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "//tag::paid[]"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[[paid]]"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d\u003d Paying money: `paid`"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "In this section, you will learn more about the `paid` command, \u003c\u003chowtousepaidcommand,how to use it\u003e\u003e and the"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003c\u003cpaidcommandexpectedoutcome,expected outcome\u003e\u003e after using the"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "`paid` command."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Summary of Paid Command:* `paid` *subtracts the amount of money a Person owes you.*"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[[howtousepaidcommand]]"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*How to use the Paid Command:*"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "`paid INDEX [AMOUNT]` +"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* `INDEX` is a *compulsory* field that must be stated by you. Instead of typing a Person\u0027s name,"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "you can type his/her index thus saving you time and effort. To find out his/her index, use the command"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " `listamount`."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* `AMOUNT` is an *optional* field. It refers to the amount paid by that Person. Leaving this field"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "empty is equivalent to the Person paying you the full amount he/she owes you."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* `AMOUNT` can be up to 2 decimal places, i.e. 7.99.  There is no need to add the dollar sign ($)."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Valid examples: +"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "`paid 2` - This commmand means that the Person at index 2 has paid you the full amount they owe you. +"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "`paid 3 3.90` - This command means that the Perosn at index 3 has paid you $3.90. +"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[[paidcommandexpectedoutcome]]"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Expected outcome:*"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".Expense Splitter Paid Command"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "image::paid.png[width\u003d\"890\"]"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Additional notes and tips*"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* You will only be able to use this command after you have marked the receipt as done using the"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`donereceipt` command."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* The person will automatically be removed from the list if the amount he owes you drops to $0."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Use `listamount` command to find the index of the person who paid you."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "//end::paid[]"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "//tag::clearreceipt[]"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[[clearreceipt]]"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d\u003d Clears the receipt `clearreceipt`"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "In this section, you will learn more about the `clearreceipt` command, \u003c\u003chowtouseclearreceiptcommand,how to use it\u003e\u003e"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "and the \u003c\u003cclearreceiptexpectedoutcome,expected outcome\u003e\u003e after using the `clearreceipt` command."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*Summary of Clear Receipt Command:* +"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`clearreceipt` allows you to remove all items from the receipt and start with a clean receipt."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[[howtouseclearreceiptcommand]]"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*How to use the Clear Receipt Command:*"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`clearreceipt`"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Valid Example: +"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`clearreceipt`"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[[clearreceiptexpectedoutcome]]"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*Expected outcome:*"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".Expense Splitter Clear Receipt Command"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "image::expensesplitterclearreceiptexpectedoutcome.png[width\u003d\"890\"]"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* If you use this command before marking the receipt as done via the `donereceipt` command, you will be removing all the"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "previously inputting items, as well as the amount owed by each person."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* However, if you use this command after marking the receipt as done via the `donereceipt` command, the amount owed by"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "each person will still be present and will be accessible via the `listamount` command."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* After you use this command, you will be able to add new items using the `additem` command and delete items using the"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`deleteitem` command."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* However, you will be unable to use the `paid` command."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "//end::clearreceipt[]"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "//tag::splitback[]"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "[[splitback]]"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting Expense Splitter to go back to main menu `back`"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "In this section, you will learn more about the `back` command, \u003c\u003chowtousesplitbackcommand,how to use it\u003e\u003e"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "and the \u003c\u003csplitbackexpectedoutcome,expected outcome\u003e\u003e after using the `back` command."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*Summary of Back Command:* +"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "`back` allows you to exits Expense Splitter mode to go back to main menu of the application."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "[[howtousesplitbackcommand]]"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*How to use the Back Command:*"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "`back`"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "Valid Example: +"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "`back`"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "[[splitbackexpectedoutcome]]"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*Expected outcome:*"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".Expense Splitter Back Command"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "image::expenseback.png[width\u003d\"890\"]"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "//end::splitback[]"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "//tag::exit[]"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "[[exit]]"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "\u003d\u003d\u003d Exiting the Application : `exit`"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "In this section, you will learn more about `exit` command, \u003c\u003chowtouseexitcommand, how to use it\u003e\u003e"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "and the \u003c\u003cexitexpectedoutcome, expected outcome\u003e\u003e after using the `exit` command."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*Summary of Exit Command:* +"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "`exit` You can use this command everywhere in the application to exit."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "[[howtouseexitcommand]]"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*How to use the Exit Command:*"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "`exit` +"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "Valid Example: +"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "`exit`"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "[[exitexpectedoutcome]]"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*Expected outcome:*"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".Exit Command"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "image::exit.png[width\u003d\"890\"]"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "//end::exit[]"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "In this section, you will learn more about the saving mechanism of EYLAH. +"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "EYLAH will automatically help you store any information that you have inputted into the hard disk. +"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "You *do not* need to save manually."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[[faq]]"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous EYLAH folder."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[[command-summary]]"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "In this section, you can find out more about the commands supported by EYLAH, as well as their respective format and"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "example."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "If you would like to know more about a specific command, simply click on the provided links in the table below and you"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "will be brought to the respective command."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "//tag::commandsummaryfordiettracker[]"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d For Diet Tracker"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".Summary of Command for Diet Tracker"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "|Command |Format |Example"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|\u003c\u003caddfood, *Adding Food*\u003e\u003e"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|`add -n NAME -c CALORIES [-t TAGS]`"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|`add -n salad -c 235` +"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`add -n fries -c 195 -t fastfood`"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|\u003c\u003cdeletefooditem, *Deleting Food*\u003e\u003e"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "|`delete INDEX`"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "|`delete 1` +"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "`delete 2`"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|\u003c\u003ceditfooditem, *Editing Food*\u003e\u003e"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|`edit -i INDEX [-n NAME] [-c CALORIES]`"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|`edit -i 1 -n carbonara -c 543` +"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`edit -i 2 -n chips`"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|\u003c\u003clistfooditem, *Listing Food*\u003e\u003e"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|`list [-a] [-d NUMDAYS] [-t TAG]`"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "|`list` +"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "or +"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "`list -a` +"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "or +"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "`list -d 6` +"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "or +"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "`list -t healthy`"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|\u003c\u003cmode, *Setting Mode*\u003e\u003e"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "|`mode MODE`"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "|`mode -l` +"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "or +"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "`mode -g` +"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "or +"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "`mode -h`"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|\u003c\u003cheight, *Storing Height*\u003e\u003e"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "|`height HEIGHT`"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|`height 165` +"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`height 172.5`"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|\u003c\u003cweight, *Storing Weight*\u003e\u003e"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "|`weight WEIGHT`"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|`weight 69` +"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`weight 67.3`"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|\u003c\u003cmetrics, *Showing Metrics*\u003e\u003e"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|`metrics`"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|`metrics`"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|\u003c\u003ccalculatebmi, *Calculating BMI*\u003e\u003e"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "|`bmi [-h HEIGHT] [-w WEIGHT]`"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "|`bmi` +"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "or +"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`bmi -h 172 -w 65.5` +"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "or +"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`bmi -h 172` +"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "or"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "+"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`bmi -w 65.7`"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|\u003c\u003chelp, *Getting Help*\u003e\u003e"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|`help`"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|`help`"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "|\u003c\u003cdietback, *Going Back*\u003e\u003e"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|`back`"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|`back`"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|\u003c\u003cexit, *Exiting the Application*\u003e\u003e"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "|`exit`"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "|`exit`"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "//end::commandsummaryfordiettracker[]"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "//tag::commandsummaryforexpensesplitter[]"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d\u003d For Expense Splitter"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".Summary of Command for Expense Splitter"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|Command |Format |Example"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|\u003c\u003cadditem, *Adding Item*\u003e\u003e"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|`additem` `-i ITEMNAME` `-p ITEMPRICE` `-n NAME` `[-n NAME]...`"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|`additem` `-i pasta` `-p 5` `-n John` +"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "or +"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "`additem` `-i pasta` `-p 32` `-n John` `-n Carl` `-n Jasmine`"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|\u003c\u003cdeleteitem, *Deleting Item*\u003e\u003e"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|`deleteitem` `INDEX`"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|`deleteitem` `1` +"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "or +"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "`deleteitem` `2`"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|\u003c\u003clistreceipt, *Listing Receipt*\u003e\u003e"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|`listreceipt`"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|`listreceipt`"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|\u003c\u003clistamount, *Listing Amount*\u003e\u003e"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|`listamount`"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|`listamount`"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|\u003c\u003cdonereceipt, *Marking Receipt as Done*\u003e\u003e"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|`donereceipt`"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|`donereceipt`"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|\u003c\u003cpaid, *Getting Paid by Someone*\u003e\u003e"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|`paid` `INDEX` `[AMOUNT]`"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|`paid` `3`  +"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "or +"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "`paid` `3` `10.00` +"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "or +"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "`paid` `2` `10.0`"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|\u003c\u003cclearreceipt, *Clearing Receipt*\u003e\u003e"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|`clearreceipt`"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|`clearreceipt`"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "|\u003c\u003chelp, *Getting Help*\u003e\u003e"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|`help`"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|`help`"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "|\u003c\u003csplitback, *Going Back*\u003e\u003e"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|`back`"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|`back`"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|\u003c\u003cexit, *Exiting the Application*\u003e\u003e"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|`exit`"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|`exit`"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "//end::commandsummaryforexpensesplitter[]"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "[[glossary]]"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ".Glossary"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[width\u003d\"%\",cols\u003d\"\u003c20%,\u003c40,\u003c40,options\u003d\"header\",]"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|Term | Explanation | Examples"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "| Temasek Hall | This refers the one of the Halls of Residences in the National University of Singapore |"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "| Halls of Residences | This refers to student accommodation on campus |"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "| NUS | This is the short form of National University of Singapore. |"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "| SOC or SoC | This is the short form for School of Computing. |"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "| CLI | This is the short form for Command Line Interface. It processes commands to"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "TA-Tracker in the form of lines of text |"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "| Index | This refers to the position of an item on a list. | Index of 1 refers to the first"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "item in a list."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "| Activity Diagram | This refers to the workflow of a software. | \u003c\u003cAppendixA,Appendix\u003e\u003e"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "[[AppendixA]]"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d Appendix: Simple activity diagram to aid you with using Expense Splitter +"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "This diagram will help you understand the flow of Expense Splitter thus improving your user experience."
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The fully blackened circle at the top represents the start point while the circle"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "at the bottom represents the end point."
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".Expense Splitter Activity Diagram"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "image::ExpenseSplitterActivityDiagramV2.png[width\u003d\"890\"]"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*Simplified Add Item Activity Diagram*  +"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "This diagram below is used in conjunction with the diagram directly above this."
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".Simplified Add Item Activity Diagram"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "image::ExpenseSplitterActivityDiagram.png[width\u003d\"890\"]"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 389,
      "sheexiong": 171,
      "ailanthustng": 227,
      "WillySeahh": 279,
      "akhilvuputuri": 72,
      "-": 104
    }
  },
  {
    "path": "docs/team/ailanthustng.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d Tng Liang Yi, Ailanthus - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ":imagesDir: ../images/expense-splitter"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d PROJECT: EYLAH"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "EYLAH is a desktop application programmed specifically for students staying in Temasek Hall at the National University"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "of Singapore. It aims to ease their lives in hall by providing them with an application that split bills easily and help"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "them keep track of their diet. The user interacts with the application using a CLI and it is programmed using `Java 11`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* *Major Enhancements*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ". *Added Entry and Receipt for Expense Splitter portion of EYLAH*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "(Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/130[#130])"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*** *What it does:* +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Receipt is used to store multiple Entries, and these Entries are used to store the information about a particular Item"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "and the Persons involved in splitting the cost of that Item."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*** *Justification:* +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "These classes are required to keep track of Items and the Persons involved for each of that Item."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ". *Added AddItemCommand and enhanced the DeleteItemCommand for the Expense Splitter portion of EYLAH*"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "(Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/134[#134],"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W13-1/main/pull/164[#163])"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*** *What it does:* +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "It simply adds a new Entry into the Receipt or deletes an existing Entry from the Receipt."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*** *Justification:* +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "The AddItemCommand is required for users to input new Items and the Persons involved in splitting the cost of that Item."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "The DeleteItemCommand is for users to remove an Item in case he/she made a mistake or simply wants to remove the Item."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*** *Highlights:* +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "These commands are only allowed to be used when the Receipt has not been marked as completed as this was accomplished"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "using a boolean flag in the Receipt class. This is because of a bug that we discovered, which will be explained in the"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "point below."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ". *Added a boolean flag in Receipt*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "(Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/201[#201])"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*** *What it does* +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "It checks if the Receipt is marked as complete (true) or incomplete (false)."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*** *Justification* +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "DeleteItemCommand actually removes the Amount owed by the person from the PersonAmountBook. So does the PaidCommand."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "As such, if a user uses the DeleteItemCommand after using the PaidCommand, and if the Amount owed goes to negative,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "an exception would be thrown due to the nature of BigDecimal (BigDecimal does not accept negative values)."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Hence, a flag was included to prevent this from happening."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ". *Added DoneReceiptCommand and ClearReceiptCommand for the Expense Splitter portion of EYLAH*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "(Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/201[#201],"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W13-1/main/pull/204[#204])"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*** *What it does:* +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "DoneReceiptCommand marks the Receipt as done and ClearReceiptCommand removes all existing Entries from the Receipt."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*** *Justification:* +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "DoneReceiptCommand is required to toggle the boolean flag of Receipt to be done. ClearReceiptCommand does the opposite"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "by toggling the Receipt back as undone."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*** *Highlights:* +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "These commands are required to prevent an Exception being thrown with regards to negative BigDecimal values, as"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "explained in the point above."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ". *Added CalculateUtil for EYLAH*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "(Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/191[#191])"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*** *What it does:* +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "CalculateUtil does all the handling of calculations required in EYLAH."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*** *Justification:* +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Abstraction, to make things easier and more streamlined in our application."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* *Minor Enhancements*"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ". *Removed case sensitivity when adding a new Person*"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "** *What it does:* +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "All the names inputted by the user are now made into lowercase."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "** *Justification* +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "This is to facilitate quicker use of the application as users would not be required to capitalize any names."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Internally, this is also to prevent duplicate Person objects with the same name (but in different case sensitivity)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "from being created, i.e Bob vs bob or aLiCe vs alice."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ". *Fixed the rounding issue with regards to using BigDecimal as currency in our application*"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "** *What it does:* +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Decimals with regards to currency in EYLAH is made to be 2 decimal points (d.p)."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "** *Justification* +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "The Amount class only accepts decimals up till 2 d.p. Users are also made to only input decimals up"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "till 2 d.p. However, the problem comes when dividing BigDecimals, e.g 10 / 3 \u003d 3.333333... Since we create a new Amount"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "object called amountPerPerson, i.e new Amount(\"3.33333\"), this would throw an Exception. As such, I made it such that"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "any all calculations with regards to BigDecimal and Amount would be kept at a maximum of 2 d.p to prevent this Exception"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "from being thrown. In addition, I also did the formatting of the BigDecimal to be represented as a currency."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "** *Credits* +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*** http://www.javapractices.com/topic/TopicAction.do?Id\u003d13 +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*** https://stackoverflow.com/questions/1359817/using-bigdecimal-to-work-with-currencies"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "** Added test cases for Entry and Receipt classes"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "** Added test cases for AddItemCommand, DeleteItemCommand, DoneReceiptCommand and ClearReceiptCommand"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "** Assisted in downscaling of AddressBook3 by removing Phone class"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* *Code contributed*: +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dailanthustng\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[Functional and Test code]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*** Lead for ExpenseSplitter portion of EYLAH."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*** Participated in planning the project timeline for EYLAH."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*** Enhanced ParserUtil to be able to handle more inputted texts and output the required Objects."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*** Adapted the given Address Book 3 code into EYLAH."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*** Updated the Developer Guide to include AddItemCommand and DeleteItemCommand"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "(Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/164[#164],"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W13-1/main/pull/171[#171],"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W13-1/main/pull/353[#353],"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W13-1/main/pull/409[#409])"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*** Updated the Developer Guide to include ClearReceiptCommand"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "(Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/359[#359],"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W13-1/main/pull/409[#409])"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*** Updated the User Guide to include DoneReceiptCommand and ClearReceipt Command"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "(Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/241[#241])"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*** Updated the User Guide to include Appendix H: Effort"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "(Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/384[#384])"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*** Updated the User Guide with minor changes with regards to the use of English and to maintain consistency throughout"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "the document"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "(Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/411[#411])"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): Pull requests https://github.com/AY1920S2-CS2103T-W13-1/main/pull/397[#397]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class: https://github.com/ailanthustng/ped/issues[ped]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d Code contributed"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "Please click the following link to see my code contributions dashboard."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dailanthustng\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[Code Report]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "include::../UserGuide.adoc[tag\u003dadditem]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddeleteitem]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "include::../UserGuide.adoc[tag\u003dclearreceipt]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dexpensesplitteradditem]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dexpensesplitterdeleteitem]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dexpensesplitterclearreceipt]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dailanadditemusecase]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dailandeleteitemusecase]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dailanclearreceiptusecase]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dailanappendixgadditem]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dailanappendixgdeleteitem]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dailanappendixgdonereceipt]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dailanappendixgclearreceipt]"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 222
    }
  },
  {
    "path": "docs/team/akhilvuputuri.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "\u003d Akhil Vuputuri - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "\u003d\u003d PROJECT: EYLAH"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "EYLAH is a desktop application specifically programmed for Freshmen staying on NUS Campus. It aims to ease their lives"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "at halls/residential colleges by providing them with an application to split bills easily and help"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "them track their diet. The user interacts with it using a CLI and it is programmed using JAVA 11."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* *Major enhancement*: [In Process]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** What it does:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** Justification:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* *Major Enhancements*:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ". *Refactored entire AB3 Code base to be used for EYLAH*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "(Refactoring Codebase - Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/126[#126]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** *What it does:* +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "The idea was to allow both the Expense Splitter and Diet Tracker features of EYLAH to be built onto the existing AB3"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "framework rather than replace it entirely."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** *Justification:* +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "The partitioning into the two feature sections during the refactoring meant that it would be easy to extend the app in"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "the future when adding more new features. It would also allow the two teams for each of the features work independently"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "without much conflict of code, especially during the initial building phase where there are bound to be many bugs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Building on the existing AB3 code base also meant that we were able to follow the good practices and structure used."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** *Highlights:* +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "As we had already started development of the two features before the refactoring, the highlight was trying to understand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "the existing structure at that point to refactor and partition without introducing any bugs. This required working"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "together with my teammates to understand the functionality they had started to implement."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** *Credits:* +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Address Book 3 Code Base"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ". *Adding of Food, Calories and Date classes, their test classes for the Diet Tracker*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "(Food, Calories, Tests - Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/104[#104]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "\u0026 Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/125[#125]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "\u0026 Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/111[#111])"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "(Date - Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/104[#104])"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** *What it does:* +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Food is used to represent a food item to be added into the diet tracker and it stores a Calorie object that contains the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "number of calories in the food."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** *Justification:* +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "These classes are what the Diet Tracker is built upon as almost every command uses the classes to track the"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "food intake of users. Without these classes, users would be unable to track the food they eat and their"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "calorie intake. Date was added subsequently to allow for functionality of tracking food by date."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** *Highlights:* +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "The highlight was understanding the requirements of a user when using the Diet Tracker and translating them into the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Food class. For example, for a diet tracker a user would want a food item that they store to have calories so as to"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "track and a name to remember by. It was also interesting to understand how date was to be stored. Instead of serializing"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "the LocalDateTime object, I decided to store as a string and call the parser that Java offers to convert it back."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** *Credits:* +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "AB3 Code Base on how Person is being modelled and used. Duke for the idea of using LocalDateTime."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ". *Implement Storage for Diet Tracker in EYLAH*"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** *What it does:* +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Store food data of user so that when the app is restarted, the information still exists."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "(Storage - Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/152[#152]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "\u0026 https://github.com/AY1920S2-CS2103T-W13-1/main/pull/210[#210])"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** *Justification:* +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Users will not constantly keep the app open and there are times when they would close it,thus, storage"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "allows users to close the app and continue where they left off without doing all the work again."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** Highlights:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "It was quite a challenge dealing with the storage due to the complex nature of translating Java objects into a form that"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "can be stored in a Json. There were several issues, such as data being able to be stored but no read when the app was"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "re-initialised."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** Credits: Would like to credit all my team mates in discussing and deciding that in this case the best way to store"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "would be as a JSON rather than a string and also helping me with troubleshooting storage issues."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ". *Implement Add, Delete Commands and relevant tests*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** *What it does:* +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Allows for food to be added and removed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "(Add, Delete - Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/128[#128])"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "(Tests - Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/242[#242])"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** *Justification:* +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "The core functionality of a diet tracking app is to be able to control the food in the app, that the Add and Delete"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "commands let you do."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** Highlights:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "It was intriguing to understand the LogicManager as this was my first implementation of logic components."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** Credits: Address Book 3"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ". *Implement various list command (Daily, By Tag, By Time Period, All)*"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** *What it does:* +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "This allows the list shown to change based on the flag provided by the user. They can view daily list, filter by tag,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "filter by time period or view all consumption ever."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "(List Fix - Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/210[#210])"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "(List By Tag - Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/221[#221])"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "(List By Past Num of Days - Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/225[#225])"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "(Refactor Flags For Each Type - https://github.com/AY1920S2-CS2103T-W13-1/main/pull/248[#248])"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** *Justification:* +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Instead of simply listing out all the food, there are different list commands for different user needs. If the user"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "wants to track his daily consumption, they can view the daily list, if they wish to find a certain type of food,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "they can filter by tag and if they want to know what they ate over a past number of days they can use time period."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** Highlights:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "The incorporation of the various list command types was not straightforward as it did not just require changes in the"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "List Command but also required addition of date and tags into food to be filtered."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** Credits: My team mate, Jarrod for the idea on having different types of lists to serve different user functions"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ".  *Show Total Calories Intake and Calories left based on Mode* +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "(Total Calorie Count - Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/248[#248])"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "(Show Remaining Calories - Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/365[#356])"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** *What it does:* +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Tabulate the total calorie intake for the day and display to the user. Based on the mode, obtain the calorie limit"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "and let the user know how many more calories he can take or whether he has hit the limit."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** *Justification:* +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Knowing how many calories have been taken in and how much more one can eat would let the user better track his diet to"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "know whether to consume more or less."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ".  *Fix Several Failing Tests* +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "(Fix Bmi, Mode, Height, Weight Tests - Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/375[#375])"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "(Fix AddCommand, ListCommand, LogicManager Tests - Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/247[#247])"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "(Fix JsonFoodBookStorage Test - Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/243[#243])"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "(Fix Add, Delete, List Test - Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/242[#242])"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** *What it does:* +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "There were many test methods that were failing."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** *Justification:* +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "The classes would not be able to be rigorously tested if the assertions do not work. This also meant that we potentially"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "had problems in our code if the test classes were correct."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** *Highlights* +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "It was extremely hard to understand why the tests were failing, thus, required extensive logging and tracing to find out"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "problems in the code."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ".  *Fix Storage Bugs* +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "(Storing of height, weight, mode - Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/318[#318])"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "(Reading height, weight from storage - Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/362[#362])"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "(Reading existing JSON - Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/210[#210])"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** *What it does:* +"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "There were many bugs with storage, first when implementing storage for food and subsequently when implementing storage"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "for personal metrics. For the storing for food, it was being saved to a JSON but could not be loaded when app was"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "re-initialised. For the storing of personal metrics, there was issue with generating of the JSON file."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** *Highlights* +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Similar to the bugs with tests, it was quite challenging to figure out my values were not able to be stored or read."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ".  *Fix Overflow Bug For Number Of Days* +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "(Num of Days Overflow - Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/318[#373])"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** *What it does:* +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "There was an issue during internal testing where extremely large values would cause overflow even when the data type"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "was a long."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** *Highlights* +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "There was much discussion on where to handle this and impose a limit. Here, I imposed a limit in the parser based on"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "the size of the input string and taking into consideration the average lifespan of a human."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** *Drew Activity Diagrams for various Diet Tracker functions.*"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "+"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ".Diet Tracker Overall Activity Diagram"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "image::DietTrackerActivityDiagram.png[]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** *Drew Sequence Diagrams for various Diet Tracker functions.*"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ".Diet Tracker Add Command Sequence Diagram"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "image::DietTrackerAddCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ".Diet Tracker Delete Command Sequence Diagram"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "image::DietTrackerDeleteCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ".Diet Tracker Edit Command Sequence Diagram"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "image::DietTrackerEditCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ".Diet Tracker List Command Sequence Diagram"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "image::DietTrackerListCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** *Drew Class Diagrams for various Diet Tracker functions.*"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ".Diet Tracker Add Command Class Diagram"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "image::DietTrackerAddCommandClassDiagram.png[]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ".Diet Tracker Delete Command Class Diagram"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "image::DietTrackerDeleteCommandClassDiagram.png[]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ".Diet Tracker Edit Command Class Diagram"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "image::DietTrackerEditCommandClassDiagram.png[]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ".Diet Tracker List Command Class Diagram"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "image::DietTrackerListCommandClassDiagram.png[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dakhilvuputuri\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[Functional Code and Test Code]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** In charge of refactoring initial codebase to be used for Expense Splitter and Diet Tracker."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** In charge of Diet Tracker functionalities for EYLAH."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** Incorporated"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** Participated in planning the project timeline for EYLAH."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** Adapted existing storage functionality of Address Book for Diet Tracker. (Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/152[#152])"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** Updated Developer Guide to include Add and Delete Commands and their Sequence Diagrams (Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/177[#177])"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** Update User Guide and Construct Summary Table (Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/255[#255], Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/212[#212], Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/377[#377])"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** Updated all Use Cases for Developer Guide (Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/412[#412])"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): (Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/209[#209],"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/186[#186],"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/372[#372],"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/132[#132])"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class: https://github.com/akhilvuputuri/ped/issues[ped]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "\u003d\u003d\u003d\u003d Code contributed"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Please click the following link to see my code contributions dashboard."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dakhilvuputuri\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[Code Report]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddiettrackeradd]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddiettrackerdelete]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddiettrackerlist]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcommandsummarydiettracker]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddiettrackeradd]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddiettrackerdelete]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddiettrackerlist]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddiettrackerusecases]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddiettrackercommandprefix]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "Questions to ask: +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "1. Is JSON the most optimal way of storing the data? Would text files have been more appropriate in this instance? +"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "2. Are there additional attributes that should be in a food?"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 279
    }
  },
  {
    "path": "docs/team/jarrod-bob.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d Ng Jun Guang, Jarrod - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d PROJECT: EYLAH"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "EYLAH is a desktop application specifically programmed for Freshmen staying on NUS Campus. It aims to ease their lives"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "at halls/residential colleges by providing them with an application to split bills easily and help"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "them track their diet. The user interacts with it using a CLI and it is programmed using JAVA 11."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* *Major Enhancements*:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ". Adding of *Height, Weight, Mode, Bmi and Self classes, and their storage components"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "for the Diet Tracker* portion of EYLAH"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "(Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/109[#109], https://github.com/AY1920S2-CS2103T-W13-1/main/pull/109[#109], https://github.com/AY1920S2-CS2103T-W13-1/main/pull/157[#157], https://github.com/AY1920S2-CS2103T-W13-1/main/pull/312[#312])"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*** *What it does:* +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "These classes are used to stored user\u0027s metrics and also perform calculations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*** *Justification:* +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The User needs a Health Metrics Tracker to aid his Dieting."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*** *Highlights:* +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Implementing Self was rather tricky at first, since I had used static references class attributes,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "thinking that it would be stored without a Storage. Together with Akhil, we managed to resolve this issue."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*** *Credits:* +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "My groupmate Akhil, who helped with the correction for some of the bugs in the implementation of the classes."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "(Akhil\u0027s resolution and refactors - Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/318[#318])"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ". Suggested *for the renaming of same sounding class components across both DietTracker and ExpenseSplitter for EYLAH*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "(https://github.com/AY1920S2-CS2103T-W13-1/main/pull/135#discussion_r393328371[#Github Discussion])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*** *What it does:* +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "_Allows_ the integration of the both Diet Tracker and Expense Splitter seamlessly in the unified EYLAH class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*** *Highlights:* +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "I noticed this in my review of my team mate, Shee Xiong\u0027s, initial reorganisation of the code to allow for unification of both components. Upon further research, Java does not support **class name aliasing**."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*** *Credits:* +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "I understood more about Java Name Aliasing from https://stackoverflow.com/questions/2204157/class-or-method-alias-in-java[here]."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Shee Xiong, our Team\u0027s Integrations IC, went ahead and implemented it eventually in this following PR:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "(Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/232[#232])"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* *Minor Enhancements*:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ". Performed defensive coding for `bmi`, `height`, and `weight` commands. +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "(Height, Weight \u0026 Bmi - Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/351[#351], https://github.com/AY1920S2-CS2103T-W13-1/main/pull/378[#378])"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*** *What it does:* +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "`bmi`, `height` and `weight` commands are commands in Diet Tracker,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "which includes numerical digits and multiple parameters. Common exploits that could break the program was with Integer Overflow"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "values. I combat these errorneous commands by setting limits on their values by checking them through BigDecimal."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*** *Justification:* +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Significantly reduces the chances of breaking Diet Tracker and crashing EYLAH."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ". Fixed the Calories bug that occurs when Calories are not in the desired range."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "(Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/354[#354])"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*** *What it does:* +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Properly validates the user\u0027s Calories input for any of the Diet Tracker Commands which involve Calories."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*** *Highlights* +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "The original implementation had failed to consider a VALIDATION_REGEX for the Calories String itself, since Calories was built using a long instead of directly from a String."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Another issue was that you could exceed in the input long for Calories which would crash the program also."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "This was circumvented using BigInteger."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003djarrod-bob\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026tabOpen\u003dfalse[Functional Code and Test Code]]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*** In charge of Diet Tracker functionalities for EYLAH."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*** Drew most UML Diagrams for the various Diet Tracker classes and functions for EYLAH."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*** Adapted the given Parser and Command Design into Diet Tracker\u0027s Design for EYLAH. (Commands - Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/157[#157])"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "(Parsers - https://github.com/AY1920S2-CS2103T-W13-1/main/pull/107[#107])"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*** Updated Developer Guide to include Bmi, Height, Weight, Mode, Metrics Commands and diagrams (Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/372[#372], https://github.com/AY1920S2-CS2103T-W13-1/main/pull/376[#376], https://github.com/AY1920S2-CS2103T-W13-1/main/pull/401[#401], https://github.com/AY1920S2-CS2103T-W13-1/main/pull/404[#404])"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*** Updated Developer Guide Template for Diet Tracker(Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/252[#372])"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*** Updated User Guide to include the above Commands (Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/361[#361])"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*** PRs reviewed: (Pull requests: https://github.com/AY1920S2-CS2103T-W13-1/main/pull/128[#128], https://github.com/AY1920S2-CS2103T-W13-1/main/pull/134[#134], https://github.com/AY1920S2-CS2103T-W13-1/main/pull/135[#135], https://github.com/AY1920S2-CS2103T-W13-1/main/pull/217[#217)])"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/jarrod-bob/ped/issues)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddiettrackerintro]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddiettrackerbmi]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddiettrackerheight]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddiettrackerweight]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddiettrackermode]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddiettrackermetrics]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddiettrackeredit]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddiettrackerintro]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddiettrackeredit]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddiettrackerbmi]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddiettrackerheight]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddiettrackerweight]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddiettrackermode]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddiettrackermetrics]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dtesting]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddevops]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dappendixdtedit]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dappendixdtbmi]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dappendixdtheight]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dappendixdtweight]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dappendixdtmode]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dappendixdtmetrics]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "---"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "Questions to ask: +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "1. Should users be able to use BMI without input, or even with just a single (Height/Weight) input? +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "2. What is different for Calories than other Classes that are stored as attributes? +"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 159,
      "sheexiong": 1,
      "akhilvuputuri": 1
    }
  },
  {
    "path": "docs/team/sheexiong.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "\u003d Chen Shee Xiong - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "\u003d\u003d PROJECT: EYLAH"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "EYELAH is a desktop application specifically programmed for Freshmen staying on NUS Campus. It aims to ease their lives"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "at halls/residential colleges by providing them with an application to split bills easily and help"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "them track their diet. The user interacts with it using a CLI and it is programmed using JAVA 11."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "* *Major enhancement*:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ". *Integrating* 2 main features of EYLAH by common generic class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "(Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/140[#140], https://github.com/AY1920S2-CS2103T-W13-1/main/pull/232[#232], https://github.com/AY1920S2-CS2103T-W13-1/main/pull/357[#357]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W13-1/main/pull/367[#367])"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*** *What it does:* +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "Ensure both of the features integrated in the main application."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*** *Justification:* +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "The integration can help to reduce the duplicate code in the `EYLAH` which cased by the features done by different sub group."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*** *Highlights:* +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "During the implementation, I faced a lot of difficulty as we working on the existing `AddressBook Level-3`, the code base given does not show how to integrate 2 different features."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "I have decided to modify some common use class to generic version in order can be implemented by both features."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*** *Credits:* +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "N.A."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ". Added the expense splitter storage component to allowed the application to automatically save the *Receipt* in local file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "(Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/197[#197])"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*** *What it does:* +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "Allow EYLAH to save the receipt details into a local files after execution of each command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*** *Justification:* +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "This will allow the user to be able to view the receipt details even they accidentally close the application"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "or the application crashing. The receipt details will store in the local file after each command to ensure the updated data"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "in the local storage."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*** *Highlights:* +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "The structure of the receipt storage is much more complicated from the original `AddressBook Level-3` storage."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "So when I implementing this storage, I am required to understand how the Json file store the value. The receipt storage has much"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "more complicated structure compare to other storage structure. It contains nested json structure to store the different entry of"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "item and person involved."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*** *Credits:* +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "N.A."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ". Create `ExitCommand` and `BackCommand` for the application"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "(Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/357[#357])"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*** *What it does:* +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "Allows user to go back to main menu when in either one of the feature mode and exit the application at any point of time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*** *Justification:* +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "The user now have the option to go back main menu if want to use another feature. They also able to exit the application through the command"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "instead of close the app through the mouse curser to click the exit button."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*** *Highlights:* +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "The `ExitCommand` in the main menu handle differently as it directly handle by `Eylah.java` instead of going through the"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "`ModelManager#execute()` to create the `ExitCommand` object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*** *Credits:* +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "N.A."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "* *Code contributed*:[https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dsheexiong\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[Functional code and Test Code]]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*** In charge of project repository management and ensure the weekly task achievement."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*** Participated in planning the project timeline for EYLAH."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*** Adapted the given Address Book Storage into EYLAH\u0027s Storage."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*** Updated Developer Guide for Done Receipt Command (Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/386[#386], https://github.com/AY1920S2-CS2103T-W13-1/main/pull/388[#388])"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*** Updated Developer Guide for whole Design Section (Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/369[#369], https://github.com/AY1920S2-CS2103T-W13-1/main/pull/380[#380])"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*** Updated User Guide for Back, Exit, Help and Done Receipt Command (Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/380[#380], https://github.com/AY1920S2-CS2103T-W13-1/main/pull/386[#386], https://github.com/AY1920S2-CS2103T-W13-1/main/pull/394[#394])"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): (Pull requests: https://github.com/AY1920S2-CS2103T-W13-1/main/pull/306[#306], https://github.com/AY1920S2-CS2103T-W13-1/main/pull/176[#176], https://github.com/AY1920S2-CS2103T-W13-1/main/pull/177[#177])"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*** Contributed to forum discussions (examples: https://github.com/nus-cs2103-AY1920S2/forum/issues/48[1], https://github.com/nus-cs2103-AY1920S2/forum/issues/69[2])"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/sheexiong/ped/issues)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "include::../UserGuide.adoc[tag\u003dhelp]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddonereceipt]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsplitback]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "include::../UserGuide.adoc[tag\u003dexit]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddesign-architecture]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dexpensesplitterdonereceiptcommand]"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 110
    }
  },
  {
    "path": "docs/team/willyseahh.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d Willy Seah Wee Hung - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d PROJECT: EYLAH"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "This project portfolio details my key contributions to the team software engineering project, EYLAH. The team consists"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "of five Year 2 Computer Science undergraduates in the National University of Singapore (NUS), including myself."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "We were given six weeks to either morph or enhance an existing Java project, Address Book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "We chose to morph the project into EYLAH, a desktop application specifically"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "programmed for students staying in Temasek Hall at the National University"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "of Singapore. It aims to ease their lives"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "at halls by providing them with an application that *split bills easily* and *help"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "them track their diet*."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "The user interacts with it using a CLI and it is programmed using JAVA 11."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "My role was to build the Expense Splitter portion of EYLAH and ensure that our project"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "is on schedule for completion."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* *Major enhancement*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ". Adding of *Item, ItemPrice, ItemName for the Expense Splitter* portion of EYLAH"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "(Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/127[#127])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*** *What it does:* +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Allows the user to perform the `additem` command successfully hence adding an Entry which consists"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "of an Item into the current Receipt."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*** *Justification:* +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "These classes are crucial for Expense Splitter to work because this allows the User"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "to input an Item to split among his friends, the crux of Expense Splitter."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*** *Highlights:* +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Implementing the ItemPrice was a little tricky because Double should not be used to hold Currency"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "as it will lead to rounding errors."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Upon further research on Stack Overflow, I have decided that BigDecimal will be a better type to hold currency."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*** *Credits:* +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Online links where I researched on: \"https://stackoverflow.com/questions/1359817/using-bigdecimal-to-work-with-currencies\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ". Added *the ability to deduct Amount owed by a Person when they have paid through `paid` command*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "(Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/176[#176])"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*** *What it does:* +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Allows the user to reduce the amount owed by a Person."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*** *Justification:* +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "This feature allows a Person to clear his/her debt. In EYLAH after a Person has cleared his/her debt, their"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "name will be deleted to prevent cluttering of names which may confuse the user. Thus it is important to have a feature which reduces the"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "amount of money owed by a Person."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*** *Highlights:* +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "This enhancement helped our team discover a rather major bug with Expense Splitter workflow. In the event where"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "the user accidentally delete an item in the receipt after his/her peers has paid the user, EYLAH will not work as intended."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Fortunately, we"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "resolved it by not allowing users to use the `paid` command until after a receipt has been finalised."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ". Added *the expense splitter"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "storage component that allowed the user to automatically save a Person and their amount owed after"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "each command*"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "(Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/148[#148])"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*** *What it does:* +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Allows EYLAH to save a Person and the amount they owe after each command."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*** *Justification:* +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "This feature allows the user to automatically save the amount of money each person owes him after every command."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "This is important so the user do not have to manually input every entry again in the unlikely event where EYLAH crash."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*** *Highlights:* +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Ability to save a Person name and their amount owed automatically."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ". Modified the `paid` command to allow a Person to pay his debt fully +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "(Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/209[#209])"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*** *What it does:* +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Expanded the `paid` command to accept empty amount field, which meant that the Person paid his debt fully. +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Previously: `paid 1 3` meant that person at INDEX 1 paid $3. +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Now: `paid 1` meant that person at INDEX 1 paid the full amount he owes."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*** *Justification:* +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "This allows the user to conveniently clear a Person debt fully."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ". Performed defensive coding for `additem` command and `paid` command +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "(Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/352[#352])"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*** *What it does:* +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "`additem` and `paid` commands are commands in expense splitter"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "which includes numerical digits and multiple parameters. As a result, these commands may be exploited"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "when discovering bugs in EYLAH. Common issues includes passing a huge numerical number which causes Integer Overflow"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "or passing a negative index which causes ArrayOutOfBounds Exceptions. Thus I handled these rouge commands by"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "including try-catch statement to catch these exceptions."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*** *Justification:* +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "This reduces the chances of EYLAH crashing."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* *Code contributed*:[https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dwillyseahh\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[Functional code and Test Code]]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*** In charge of team progress and planning intermediate deadlines to achieve milestones."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*** Ensure that project deliverables are completed on time."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*** Adapted the given Address Book code into EYLAH\u0027s."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*** Updated Developer Guide to include Paid Command (Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/352[#352])"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*** Updated Developer Guide to include List Amount Command (Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/355[#355])"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*** Updated Developer Guide to include List Receipt Command (Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/355[#355])"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*** Updated Developer Guide to include Expense Splitter main activity diagram (Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/252[#252])"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*** Updated User Guide to include Paid, List Amount Command (Pull request https://github.com/AY1920S2-CS2103T-W13-1/main/pull/349[#349])"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): (Pull requests: https://github.com/AY1920S2-CS2103T-W13-1/main/pull/132[#132], https://github.com/AY1920S2-CS2103T-W13-1/main/pull/134[#134])"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com/nus-cs2103-AY1920S2/forum/issues/52[1], https://github.com/nus-cs2103-AY1920S2/forum/issues/48[2], https://github.com/nus-cs2103-AY1920S2/forum/issues/105[3])"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/willyseahh/ped/issues)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlistreceipt]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlistamount]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "include::../UserGuide.adoc[tag\u003dpaid]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcommandsummaryforexpensesplitter]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dexpensesplitteractivitydiagram]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dexpensesplitterlistreceiptcommand]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dexpensesplitterlistamountcommand]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dexpensesplitterpaidcommand]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dwillyusecase]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dwillylistreceiptappendixg]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dwillylistamountappendixg]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dwillypaidappendixg]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 181
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/add-remark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "The command should have the format of `remark INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "An example of the command is `remark 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.addressbook.logic.commands;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.addressbook.splitterModel.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public CommandResult execute(Model splitterModel) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "image::ParserInterface.png[]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "But what about the Index? Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "\u003d\u003d Add `Remark` to the splitterModel"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "We achieve that by working with the `person` splitterModel."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person\u0027s name)."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "Create a new `Remark` in `seedu.address.splitterModel.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`seedu.eylah.addressbook.ui.PersonCard`]."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/PersonListCard.fxml`]."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".$remark shows up in each entry"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Since `PersonCard` displays data from a `person`, we need to update `person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Modify `Person`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "We change the constructor of `person` to take a `Remark`."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Person`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Unfortunately, a change to `person` will cause other commands to break, you will have to modify these commands to use the updated `person`!"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `person` class to find these commands."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Let\u0027s update `JsonAdaptedPerson` to work with our new `person`!"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "WARNING: You must delete AddressBook\u0027s splitterStorage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Finalizing the UI"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "Now that we have finalized the `person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".The remark label is bound properly!"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "image::ContextMenu.png[, 1223px, 267px]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "image::CreateTest.png[, 664px,751px]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 6,
      "akhilvuputuri": 2,
      "WillySeahh": 7,
      "-": 237
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `person` splitterModel to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `eylah` field from `person`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "The `eylah` field in `person` is actually an instance of the `seedu.address.splitterModel.person.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ". Safe delete the field `eylah` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ". Remove the usages of `eylah` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "For example, removing the `eylah` field from the `person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "You can find them by searching for instances of the word `eylah` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "While keeping the `eylah` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".invalidPersonAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "You can go through each individual `json` file and manually remove the `eylah` field."
      }
    ],
    "authorContributionMap": {
      "sheexiong": 2,
      "WillySeahh": 2,
      "akhilvuputuri": 5,
      "-": 108
    }
  },
  {
    "path": "docs/tutorials/TracingCode.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Tracing a Command Execution Path"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/tracing"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "part of the effort to write new code.  ...[Therefore,] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "path through the code base. One easy way to trace an execution path is to use a debugger to step through the code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you will be using the IntelliJ IDEA\u0027s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture sequence diagram from the developer guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows _between_ the main components. That is, it does not show details of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "the execution path _inside_ each component. By hiding those details, the diagram succeeds in informing the reader"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "about the overall execution path of a command without overwhelming the reader with too much details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Read the _Architecture_ section of the DG"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting a break point"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "user input i.e., somewhere in the UI component, and then trace through how the execution proceeds through the UI component."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "However, the execution path through a GUI is often somewhat obscure due to various _event-driven mechanisms_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "`seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the `Search for target by name` feature. `Navigate` \u003e `Symbol`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image::Execute.png[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we\u0027re looking for. However, it is just an"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "`Interface`. Let\u0027s delve further and find the implementation of the interface by using the `Find Usages` feature in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ IDEA."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".`Find Usages` tool window. `Edit` \u003e `Find` \u003e `Find Usages`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindUsages.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo! `MainWindow#executeCommand()` seems to be exactly what we\u0027re looking for!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "image:LeftGutter.png[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tracing the execution path"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[a/ADDRESS] [t/TAG]...` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".Taking notes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Over the course of the debugging session, you will encounter every major component in the application. Try to jot down"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". To start the debugging session, simply `Run` \u003e `Debug Main`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". The Debugger tool window should show up and look something like this:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:DebuggerStep1.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the `Show execution point` feature to jump to the line of code that we stopped at:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image:ShowExecutionPoint.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". We are interested in the `logic.execute(commandText)` portion of that line so let\u0027s `Step in` into that method call:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepInto.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". We end up in `LogicManager#execute()`. Let\u0027s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".LogicManager#execute()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     //Logging, safe to ignore"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     CommandResult commandResult;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     //Parse user input from String to a Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     //Executes the Command and stores the result"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     commandResult \u003d command.execute(splitterModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "         //We can deduce that the previous line of code modifies splitterModel in some way"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         // since it\u0027s being stored here."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "         splitterStorage.saveAddressBook(splitterModel.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     return commandResult;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ". `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let\u0027s take a closer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "look at each one."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` the logging code since it is of no interest to us now."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepOver.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "`commandWord` and `arguments` :"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image:Variables.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ". We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into the `switch`, we obviously stop at"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "obtain the arguments and index required."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".Stepping out"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them!"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ". The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "`editPersonDesciptor` through the `Variable` tool window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image:EditCommand.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below shows the details of the execution path through the Logic component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Does the execution path you traced in the code so far matches with the diagram?"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Tracing an `edit` command through the Logic component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ". Now let\u0027s see what happens when we call `command#execute()`!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".EditCommand#execute()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public CommandResult execute(Model splitterModel) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 splitterModel.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    splitterModel.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    splitterModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ". As suspected, `command#execute()` does indeed make changes to `splitterModel`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ". We can a closer look at how splitterStorage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ". Again, it appears that the heavy lifting is delegated. Let\u0027s take a look at ``JsonSerializableAddressBook``\u0027s"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "constructor."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".JsonSerializableAddressBook#JsonSerializableAddressBook()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": " * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    persons.addAll("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getPersonList()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "              .stream()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "              .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "              .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ". It appears that a `JsonAdaptedPerson` is created for each `person` and then added to the"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ". We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into ``resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());``, we end up in:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".ResultDisplay#setFeedbackToUser()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ". Finally, we step through until we reach the end of `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "this tutorial, you learned more about the inner workings of AddressBook and how the various components mesh together"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "to form one cohesive product."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".What\u0027s next?"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "do further tracing for the given commands to find exactly what happens."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ". In this tutorial, we traced the \"happy path\" (i.e., no errors). What do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "instead? What exceptions do you think will be thrown(if any), where will the exceptions be thrown and where will they be"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "handled?"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".. `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ". What components will you have to modify to perform the following enhancements to the application?"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".. Make command words case-insensitive"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".. Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".. Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ".. Add a new field to `person`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new entity to the address book"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 9,
      "WillySeahh": 2,
      "-": 247
    }
  },
  {
    "path": "src/main/java/seedu/eylah/Eylah.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INITIATION_FAILED;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.exceptions.InitialiseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.model.Mode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.storage.Storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.util.StringUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.logic.DietLogicManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.DietModel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.DietModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.FoodBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.Myself;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyFoodBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyMyself;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.storage.DietStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.storage.DietStorageManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.storage.FoodBookStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.storage.JsonFoodBookStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.storage.JsonMyselfStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.storage.MyselfStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.logic.SplitterLogicManager;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.PersonAmountBook;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyPersonAmountBook;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyReceiptBook;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReceiptBook;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.SplitterModel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.SplitterModelManager;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.storage.JsonPersonAmountBookStorage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.storage.JsonReceiptBookStorage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.storage.PersonAmountStorage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.storage.ReceiptStorage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.storage.SplitterStorage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.storage.SplitterStorageManager;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.ui.Ui;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.ui.UiManager;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * The main entry for the EYLAH."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class Eylah {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 0, true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Eylah.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private UserPrefs userPrefs;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private boolean isBack;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private String commandWord;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Runs the application until termination."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        start();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        runCommandLoopUntilExitCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        exit();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Setup the required objects and show welcome message."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private void start() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        logger.info(\"Starting EYLAH \" + Eylah.VERSION);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        ui \u003d new UiManager();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        Config config \u003d initConfig();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Main menu of the EYLAH."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Reads the user command and enter different mode based on input, until the user enter the exit command."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private void runCommandLoopUntilExitCommand() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        ui.showLogo();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            ui.showWelcome();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            commandWord \u003d ui.readCommand();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            isBack \u003d false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            switch(commandWord.toLowerCase()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            case \"diet\": // Fallthrough"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            case \"1\":"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                initSetup(Mode.DIET);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                runCommandLoopUntilBackCommand(Mode.DIET);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            case \"split\": // Fallthrough"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            case \"2\":"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                initSetup(Mode.SPLITTER);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                runCommandLoopUntilBackCommand(Mode.SPLITTER);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            case \"exit\":"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                isExit \u003d true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            case \"help\":"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                ui.showMainHelp();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                ui.showError(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Reads the user command and executes it, until the user enter the exit or back command."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private void runCommandLoopUntilBackCommand(Mode mode) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            ui.showMode(mode);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            commandWord \u003d ui.readCommand();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                CommandResult commandResult \u003d logic.execute(commandWord);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                isBack \u003d commandResult.isBack();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                isExit \u003d commandResult.isExit();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                ui.showResult(commandResult);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            if (isBack) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Initialise all the required objects."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param mode mode the EYLAH"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private void initSetup(Mode mode) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            storage \u003d initStorageManager(mode);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            model \u003d initModelManager(storage, mode);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            logic \u003d initLogicManager(mode);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        } catch (InitialiseException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            isExit \u003d true;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Shows exit message and exits."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private void exit() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        ui.showExit();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Starting point for whole application."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            Eylah eylah \u003d new Eylah();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            eylah.run();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            logger.warning(e.toString());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns a {@code StorageManager} with the given path in the {@code userPref}."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param mode current mode of EYLAH"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @return the storage manager"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private Storage initStorageManager(Mode mode) throws InitialiseException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        switch(mode) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        case DIET:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            FoodBookStorage foodBookStorage \u003d new JsonFoodBookStorage(userPrefs.getFoodBookFilePath());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            MyselfStorage myselfStorage \u003d new JsonMyselfStorage(userPrefs.getMyselfFilePath());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return new DietStorageManager(foodBookStorage, userPrefsStorage, myselfStorage);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        case SPLITTER:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            PersonAmountStorage personAmountStorage \u003d"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    new JsonPersonAmountBookStorage(userPrefs.getPersonAmountBookFilePath());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            ReceiptStorage receiptStorage \u003d new JsonReceiptBookStorage(userPrefs.getReceiptBookFilePath());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return new SplitterStorageManager(personAmountStorage, receiptStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new InitialiseException(MESSAGE_INITIATION_FAILED);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s EYLAH and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * The data from the sample will be used instead if {@code storage} is not found,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * or an empty data will be used instead if errors occur when reading {@code storage}."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private Model initModelManager(Storage storage, Mode mode) throws InitialiseException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        switch(mode) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        case DIET:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            DietStorage dietStorage \u003d (DietStorage) storage;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            Optional\u003cReadOnlyFoodBook\u003e foodBookOptional;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            ReadOnlyFoodBook initialFoodBookData;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            Optional\u003cReadOnlyMyself\u003e myselfOptional;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            ReadOnlyMyself initialMyselfData;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                foodBookOptional \u003d dietStorage.readFoodBook();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                if (foodBookOptional.isEmpty()) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    logger.info(\"Data file not found. Will be starting with a sample FoodBook\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                initialFoodBookData \u003d"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                        foodBookOptional.orElseGet(SampleDataUtil::getEmptyFoodBook);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                logger.warning(\"Data file not in the correct format. Will be starting with an empty FoodBook\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                initialFoodBookData \u003d new FoodBook();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                logger.warning(\"Problem while reading from the file. Will be starting with an empty FoodBook\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                initialFoodBookData \u003d new FoodBook();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                myselfOptional \u003d dietStorage.readMyself();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                if (myselfOptional.isEmpty()) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                    logger.info(\"Data file not found. Will be starting with a sample Myself (User health metrics)\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                initialMyselfData \u003d myselfOptional.orElseGet(SampleDataUtil::getSampleMyself);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                logger.warning(\"Data file not in the correct format. Will be starting with an empty Myself\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                initialMyselfData \u003d new Myself();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                logger.warning(\"Problem while reading from the file. Will be starting with an empty Myself\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                initialMyselfData \u003d new Myself();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return new DietModelManager(initialFoodBookData, userPrefs, initialMyselfData);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        case SPLITTER:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            SplitterStorage splitterStorage \u003d (SplitterStorage) storage;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            Optional\u003cReadOnlyPersonAmountBook\u003e personAmountBookOptional;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            Optional\u003cReadOnlyReceiptBook\u003e receiptBookOptional;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            ReadOnlyPersonAmountBook initialPersonData;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            ReadOnlyReceiptBook initialReceiptData;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                personAmountBookOptional \u003d splitterStorage.readPersonAmountBook();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                receiptBookOptional \u003d splitterStorage.readReceiptBook();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                if (personAmountBookOptional.isEmpty()) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                    logger.info(\"Data file not found. Will be starting with a sample PersonAmountBook\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    initialPersonData \u003d new PersonAmountBook();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    initialPersonData \u003d personAmountBookOptional.get();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                if (receiptBookOptional.isEmpty()) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    logger.info(\"Data file not found. Will be starting with a sample ReceiptBook\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    initialReceiptData \u003d new ReceiptBook();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    initialReceiptData \u003d receiptBookOptional.get();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                logger.warning(\"Data file not in the correct format. Will be starting with an empty \""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                        + \"PersonAmountBook and ReceiptBook\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                initialPersonData \u003d new PersonAmountBook();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                initialReceiptData \u003d new ReceiptBook();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                logger.warning(\"Problem while reading from the file. Will be starting with an empty \""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                        + \"PersonAmountBook and ReceiptBook\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                initialPersonData \u003d new PersonAmountBook();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                initialReceiptData \u003d new ReceiptBook();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return new SplitterModelManager(initialReceiptData, initialPersonData, userPrefs);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new InitialiseException(MESSAGE_INITIATION_FAILED);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns a {@code LogicManager} with the {@code model}\u0027s EYLAH and {@code storage}. \u003cbr\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param mode current mode of EYLAH"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @return a logic manager"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private Logic initLogicManager(Mode mode) throws InitialiseException {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        switch (mode) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        case DIET:"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return new DietLogicManager(((DietModel) model), ((DietStorage) storage));"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        case SPLITTER:"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return new SplitterLogicManager(((SplitterModel) model), ((SplitterStorage) storage));"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new InitialiseException(MESSAGE_INITIATION_FAILED);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    protected Config initConfig() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty PersonAmountBook\");"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            //myselfStorage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 25,
      "sheexiong": 252,
      "WillySeahh": 87,
      "akhilvuputuri": 13
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * These loggers have been configured to output messages to a {@code .log} file by default,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final String LOG_FILE \u003d \"eylah.log\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 2,
      "akhilvuputuri": 1,
      "-": 89
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command! Enter help to get more information.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String MESSAGE_INVALID_FOOD_DISPLAYED_INDEX \u003d \"The food index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String MESSAGE_FOOD_LISTED_OVERVIEW \u003d \"%1$d food listed!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final String MESSAGE_INITIATION_FAILED \u003d \"The EYLAH is unable to initialise, \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"Please try to restart the EYLAH\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 4,
      "akhilvuputuri": 5,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/exceptions/InitialiseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Represents an error during initialise the objects for EYLAH."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class InitialiseException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public InitialiseException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 10
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.commons.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 20
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/logic/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.commons.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public abstract class Command\u003cE\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public abstract CommandResult execute(E model) throws CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 4,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/logic/command/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.commons.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /** The application should back to main menu. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final boolean back;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean exit, boolean back) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.back \u003d back;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public boolean isBack() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return back;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                \u0026\u0026 back \u003d\u003d otherCommandResult.back;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return Objects.hash(feedbackToUser, exit, back);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sheexiong": 13,
      "WillySeahh": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/logic/command/exception/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.commons.logic.command.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.commons.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.commons.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 3,
      "-": 145
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/logic/parser/CommonParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.commons.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public interface CommonParser\u003cE\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    Command\u003cE\u003e parseCommand(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 27
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.commons.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public interface Parser\u003cT extends Command\u003c?\u003e\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 4,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.commons.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/logic/parser/exception/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.commons.logic.parser.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 1,
      "akhilvuputuri": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/model/Mode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.commons.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * This is the class the represents the enum for the different modes of the EYLAH."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public enum Mode {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    DIET,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    SPLITTER"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 9
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.commons.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 17
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.commons.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    Path getMyselfFilePath();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    void setMyselfFilePath(Path myselfFilePath);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    Path getFoodBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    void setFoodBookFilePath(Path foodBookFilePath);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    void setPersonAmountBookFilePath(Path personAmountBookFilePath);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    Path getPersonAmountBookFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    Path getReceiptBookFilePath();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 4,
      "sheexiong": 17,
      "WillySeahh": 2
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.commons.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private Path myselfFilePath \u003d Paths.get(\"data\" , \"myself.json\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private Path foodBookFilePath \u003d Paths.get(\"data\" , \"foodbook.json\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private Path personAmountBookFilePath \u003d Paths.get(\"data\", \"personamount.json\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private Path receiptBookFilePath \u003d Paths.get(\"data\", \"receiptbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        setMyselfFilePath(newUserPrefs.getMyselfFilePath());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        setFoodBookFilePath(newUserPrefs.getFoodBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        setPersonAmountBookFilePath(newUserPrefs.getPersonAmountBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        setReceiptBookFilePath(newUserPrefs.getReceiptBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Path getMyselfFilePath() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return myselfFilePath;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setMyselfFilePath(Path myselfFilePath) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(myselfFilePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.myselfFilePath \u003d myselfFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns the FoodBook file path."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @return FoodBook file path"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Path getFoodBookFilePath() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return foodBookFilePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Set the FoodBook file path based on the given path."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param foodBookFilePath the given file path."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void setFoodBookFilePath(Path foodBookFilePath) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(foodBookFilePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.foodBookFilePath \u003d foodBookFilePath;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns the PersonAmount file path."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @return PersonAmount file path"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Path getPersonAmountBookFilePath() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return personAmountBookFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Set the Person Amount file path based on the given path."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param personAmountFilePath the given file path."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void setPersonAmountBookFilePath(Path personAmountFilePath) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(personAmountFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.personAmountBookFilePath \u003d personAmountFilePath;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns the Receipt file path."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @return Receipt file path"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Path getReceiptBookFilePath() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return receiptBookFilePath;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Set the Receipt file path based on the given path."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param receiptBookFilePath the given file path."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void setReceiptBookFilePath(Path receiptBookFilePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(receiptBookFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.receiptBookFilePath \u003d receiptBookFilePath;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return myselfFilePath.equals(o.myselfFilePath) \u0026\u0026 foodBookFilePath.equals(o.foodBookFilePath)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                \u0026\u0026 personAmountBookFilePath.equals(o.personAmountBookFilePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return Objects.hash(myselfFilePath, foodBookFilePath, personAmountBookFilePath);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        sb.append(String.format(\"Local data file location : %s %s %s\", myselfFilePath, foodBookFilePath,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                personAmountBookFilePath));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 17,
      "sheexiong": 121
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.commons.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 3,
      "akhilvuputuri": 2,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.commons.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * API of the Storage component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public interface Storage extends UserPrefsStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 21
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.commons.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 8,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/util/CalculateUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * Functions for handling calculations."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class CalculateUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static final int DECIMALS \u003d 2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static final int EXTRA_DECIMALS \u003d 4;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static final RoundingMode ROUNDING_MODE \u003d RoundingMode.HALF_DOWN;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Calculates the price per person by dividing the cost of item with the number of persons involved."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param itemPrice Price of the item."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param numPersons Number of persons sharing the cost of the item."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @return Price per person."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static Amount calculatePricePerPerson(BigDecimal itemPrice, BigDecimal numPersons) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        BigDecimal pricePerPerson \u003d itemPrice.divide(numPersons, DECIMALS, ROUNDING_MODE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return new Amount(pricePerPerson);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Adds {@code toBeAdded} cost to the {@code original} amount."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param original Original amount."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param toBeAdded Amount to be added to the original amount."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @return New total amount."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static Amount addAmount(BigDecimal original, BigDecimal toBeAdded) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return new Amount(original.add(toBeAdded));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Subtracts {@code toBeRemoved} cost from the {@code original} amount."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param original Original amount."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param toBeRemoved Amount to be subtracted from the original amount."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @return New total amount."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static Amount removeAmount(BigDecimal original, BigDecimal toBeRemoved) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return new Amount(original.subtract(toBeRemoved));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 50,
      "WillySeahh": 1
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths@get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "WillySeahh": 1,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/eylah/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/DietLogic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.diettracker.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.Logic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.DietModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyFoodBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyMyself;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public interface DietLogic extends Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns the FoodBook."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @see DietModel#getFoodBook()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    ReadOnlyFoodBook getFoodBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of food */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    ObservableList\u003cFood\u003e getFilteredFoodList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns the user prefs\u0027 food book file path."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    Path getFoodBookFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns the Myself."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @see DietModel#getMyself()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    ReadOnlyMyself getMyself();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns the user prefs\u0027 myself file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    Path getMyselfFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 14,
      "sheexiong": 36
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/DietLogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.logic.parser.FoodBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.DietModel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyFoodBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyMyself;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.storage.DietStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class DietLogicManager implements DietLogic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DietLogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final DietModel model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //private final FoodBookStorage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final DietStorage dietStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final FoodBookParser foodBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public DietLogicManager(DietModel model, DietStorage dietStorage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.dietStorage \u003d dietStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        foodBookParser \u003d new FoodBookParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        Command\u003cDietModel\u003e command \u003d foodBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            logger.info(\"Food Book: \" + model.getFoodBook().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            logger.info(\"Myself: \" + model.getMyself().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            dietStorage.saveFoodBook(model.getFoodBook());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            dietStorage.saveMyself(model.getMyself());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            logger.info(e.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public ReadOnlyFoodBook getFoodBook() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return model.getFoodBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilteredFoodList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return model.getFilteredFoodList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Path getFoodBookFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return model.getFoodBookFilePath();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public ReadOnlyMyself getMyself() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return model.getMyself();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Path getMyselfFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return model.getMyselfFilePath();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 18,
      "sheexiong": 9,
      "akhilvuputuri": 59
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.DietCliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.DietCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.DietCliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.DietModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Adds a food to the food book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class AddCommand extends Command\u003cDietModel\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a food to the food book. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            + PREFIX_NAME + \" NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            + PREFIX_CALORIES + \" CALORIES \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            + PREFIX_TAG + \" [TAGS] \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Food Added: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FOOD \u003d \"This food already exists in the food book\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final Food toAdd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Food}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public AddCommand(Food food) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        toAdd \u003d food;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public CommandResult execute(DietModel model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (model.hasFood(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        model.addFood(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 9,
      "akhilvuputuri": 49
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/commands/BackCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.DietModel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * This Command is used to go back to the Main Application of EYLAH."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class BackCommand extends Command\u003cDietModel\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"back\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Returned to Main Menu.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public CommandResult execute(DietModel dietModel) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 20
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/commands/BmiCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.DietModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Bmi;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Height;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "//import seedu.eylah.diettracker.model.self.Self;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Weight;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Calculates BMI. BMI is calculated based on one of the following:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * If there is height and weight input, then it will be based on that."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * If not, it will calculate based on the internal height and weight"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * previously recorded."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class BmiCommand extends Command\u003cDietModel\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bmi\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \": \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"Parameters: [-h HEIGHT (must be in centimeters)] [-w WEIGHT (must be in kilograms)]\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" -h 170 -w 65\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_CALCULATE_BMI_SUCCESS \u003d \"The BMI Calculated is: %1$s\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"Your BMI is in the %2$s category.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private Bmi bmi;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private Height height;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private Weight weight;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Constructor for Command that does not include Height and Weight."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public BmiCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        height \u003d new Height(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        weight \u003d new Weight(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Constructor for Command that includes input Height and Weight."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public BmiCommand(Height height, Weight weight) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(height);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(weight);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public CommandResult execute(DietModel model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Height storedHeight \u003d model.getHeight();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Weight storedWeight \u003d model.getWeight();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (height.isZero() \u0026\u0026 weight.isZero()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            if (storedHeight.isZero() \u0026\u0026 storedWeight.isZero()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                throw new CommandException(\"Please provide height and weight after the -h and -w flags respectively \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                        + \"as you have not stored them yet!\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (height.isZero()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            if (storedHeight.isNotZero()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                height \u003d storedHeight;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                throw new CommandException(\"Please provide height after the -h flag as you have not stored your \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                        + \"height yet\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (weight.isZero()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            if (storedWeight.isNotZero()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                weight \u003d storedWeight;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                throw new CommandException(\"Please provide weight after the -w flag as you have not stored your \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                        + \"weight yet!\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        bmi \u003d new Bmi(height, weight);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (bmi.getBmi() \u003c 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_CALCULATE_BMI_SUCCESS, bmi, bmi.getCategory()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                || (other instanceof BmiCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                \u0026\u0026 height.equals(((BmiCommand) other).height) // state check"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                \u0026\u0026 weight.equals(((BmiCommand) other).weight)); // state check"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 59,
      "sheexiong": 6,
      "akhilvuputuri": 39
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.DietModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Deletes a food identified using it\u0027s displayed index from the food book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class DeleteCommand extends Command\u003cDietModel\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            + \": Deletes the food identified by the index number used in the displayed food list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String MESSAGE_DELETE_FOOD_SUCCESS \u003d \"Deleted Food: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public CommandResult execute(DietModel model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        List\u003cFood\u003e lastShownList \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Food foodToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        model.deleteFood(foodToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_FOOD_SUCCESS, foodToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 6,
      "akhilvuputuri": 49
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.DietCliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.DietCliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.DietCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.DietCliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.DietModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Calories;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Adds a food to the food book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class EditCommand extends Command\u003cDietModel\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits a food in the food book. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"by the index number used in the displayed food list. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"Parameters: \" + PREFIX_INDEX + \" INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"[\" + PREFIX_NAME + \" NAME] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"[\" + PREFIX_CALORIES + \" CALORIES] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"[\" + PREFIX_TAG + \" TAG] \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Food Edited: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FOOD \u003d \"This food already exists in the food book.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final EditFoodDescriptor editFoodDescriptor;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Creates an EditCommand to edit the specified {@code Food}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public EditCommand(Index index, EditFoodDescriptor editFoodDescriptor) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(editFoodDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.editFoodDescriptor \u003d editFoodDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public CommandResult execute(DietModel model) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        List\u003cFood\u003e lastShownList \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Food foodToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Food editedFood \u003d createEditedFood(foodToEdit, editFoodDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (!foodToEdit.isSameFood(editedFood) \u0026\u0026 model.hasFood(editedFood)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        model.setFood(foodToEdit, editedFood);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        model.updateFilteredFoodList(DietModel.PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, editedFood));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Creates and returns a {@code Food} with the details of {@code foodToEdit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * edited with {@code editFoodDescriptor}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static Food createEditedFood(Food foodToEdit, EditFoodDescriptor editFoodDescriptor) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assert foodToEdit !\u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Name updatedName \u003d editFoodDescriptor.getName().orElse(foodToEdit.getName());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Calories updatedCalories \u003d editFoodDescriptor.getCalories().orElse(foodToEdit.getCalories());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editFoodDescriptor.getTags().orElse(foodToEdit.getTags());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return new Food(updatedName, updatedCalories, updatedTags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                \u0026\u0026 editFoodDescriptor.equals(e.editFoodDescriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Stores the details to edit the food with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * corresponding field value of the food."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static class EditFoodDescriptor {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        private Calories calories;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        public EditFoodDescriptor() {}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        public EditFoodDescriptor(EditFoodDescriptor toCopy) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            setCalories(toCopy.calories);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, calories, date, tags);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        public void setCalories(Calories calories) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            this.calories \u003d calories;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        public Optional\u003cCalories\u003e getCalories() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return Optional.ofNullable(calories);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "         */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            if (!(other instanceof EditFoodDescriptor)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            EditFoodDescriptor e \u003d (EditFoodDescriptor) other;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                    \u0026\u0026 getCalories().equals(e.getCalories())"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                    //\u0026\u0026 getDate().toString().equals(e.getDate().toString())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 195,
      "sheexiong": 12
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.DietModel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class ExitCommand extends Command\u003cDietModel\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting EYLAH as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public CommandResult execute(DietModel dietModel) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, true, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 20
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/commands/HeightCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.DietModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Height;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Adds the height of the user in centimeters."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class HeightCommand extends Command\u003cDietModel\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"height\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \": \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"Parameters: HEIGHT (must be in centimeters)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 170\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_ADD_HEIGHT_SUCCESS \u003d \"Added Height: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final Height height;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Constructor for Command that includes input Height."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public HeightCommand(Height height) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(height);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public CommandResult execute(DietModel model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        model.setHeight(height);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_HEIGHT_SUCCESS, height.toString()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                || (other instanceof HeightCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                \u0026\u0026 height.equals(((HeightCommand) other).height)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 44,
      "sheexiong": 6
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.DietModel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class HelpCommand extends Command\u003cDietModel\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows Diet Tracker usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String DIVIDER \u003d \"--------------------------------\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Welcome to Diet Tracker! The following commands are \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"available:\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + DIVIDER"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"1. add - Use this to add a food item to your Diet Tracker.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"   USAGE: add -n NAME -c CALORIES\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"   EXAMPLE: add -n Mushroom Aglio -c 360\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + DIVIDER"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"2. delete - Use this to delete a food item at the specified index in your list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"   USAGE: delete INDEX\\n \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"   EXAMPLE: delete 1\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + DIVIDER"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"3. edit - Use this to edit a food item at the specified index in your list.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"   USAGE: edit -i INDEX [-n NAME] [-c CALORIES]\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"   EXAMPLE: edit -i 1 -n Prawn Aglio -c 520\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + DIVIDER"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            + \"4. list - Use this to list the food for a given period of time or food of a certain tag.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            + \"   USAGE: list [-a] [-d NUMDAYS] [-t TAG]\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            + \"   EXAMPLE: list -a\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + DIVIDER"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"5. mode - Use this to change the mode (GAIN, MAINTAIN, LOSS) of the Diet Tracker.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"   USAGE: mode [-g] [-l] [-m]\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"   EXAMPLE: mode -g\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + DIVIDER"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"6. height - Use this to add your personal height to the Diet Tracker.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"   USAGE: height HEIGHT\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"   EXAMPLE: height 170.2\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + DIVIDER"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"7. weight - Use this to add your personal weight to the Diet Tracker.\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"   USAGE: weight WEIGHT\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"   EXAMPLE: weight 65.7\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + DIVIDER"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"8. bmi - Use this to calculate your bmi.\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"   USAGE: bmi [-h HEIGHT] [-w WEIGHT]\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"   EXAMPLE: bmi -h 170.2 -w 65.7\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + DIVIDER"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"9. back - Use this to go back to EYLAH main application window in order to switch between Diet Tracker\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \" and Expense Splitter.\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"   USAGE: back\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"   EXAMPLE: back\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"We hope you enjoy your usage of EYLAH Diet Tracker!\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public CommandResult execute(DietModel model) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, false, false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 40,
      "sheexiong": 6,
      "akhilvuputuri": 18
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.model.DietModel.PREDICATE_SHOW_ALL_FOODS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.DietModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Lists all food and their calories."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class ListCommand extends Command\u003cDietModel\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": lists all food in the book. Use tags to list \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"different things.\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            + \"Parameters: [-a] / [-d][numDays] / [-t [tag]]\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String MESSAGE_USAGE_DAYS \u003d \"Parameter number of days after flag -d must more than 0 and less \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            + \"than 100000 which is over 200 years!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All foods over period based on input tag has been listed.\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private String mode \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private int numDays;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private Tag tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Creates a ListCommand to list all food consumed by default."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public ListCommand() {}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Creates a ListCommand to list the foods consumed for a certain duration of time based on the input mode."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public ListCommand(String mode) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Creates a ListCommand to list the foods over the last numDays number of days."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public ListCommand(String mode, int numDays) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.numDays \u003d numDays;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Creates a ListCommand to list all food with the given tag."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public ListCommand(String mode, Tag tag) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public CommandResult execute(DietModel model) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        String listString;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (mode.equals(\"\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            Predicate\u003cFood\u003e todayPredicate \u003d food -\u003e food.getDate().getLocalDateValue().equals(today);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            model.updateFilteredFoodList(todayPredicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            listString \u003d model.listFoods(mode);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        } else if (mode.equals(\"-d\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            // date till which to obtain food logged"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            Date limit \u003d new Date(LocalDateTime.now().minusDays(numDays));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            Predicate\u003cFood\u003e datePredicate \u003d food -\u003e food.getDate().isAfter(limit);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            model.updateFilteredFoodList(datePredicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            listString \u003d model.listFoods(mode);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        } else if (mode.equals(\"-t\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            Predicate\u003cFood\u003e tagPredicate \u003d food -\u003e food.getTags().contains(this.tag);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            model.updateFilteredFoodList(tagPredicate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            listString \u003d model.listFoods(mode);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            model.updateFilteredFoodList(PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            listString \u003d model.listFoods(mode);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return new CommandResult(listString.concat(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                || (other instanceof ListCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                );"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 47,
      "sheexiong": 13,
      "akhilvuputuri": 38
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/commands/MetricsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.DietModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Shows the user their various metrics like Height, Weight and Dieting Mode."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class MetricsCommand extends Command\u003cDietModel\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"metrics\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows you user metrics like height, weight, and \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"dieting mode\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"Parameters: NONE\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Your metrics are shown.\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Creates a MetricsCommand to show all user metrics (Height, Weight, Mode)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public MetricsCommand() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public CommandResult execute(DietModel model) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        String output \u003d model.printMetrics();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return new CommandResult(output.concat(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                || (other instanceof MetricsCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 36,
      "sheexiong": 4
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/commands/ModeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.DietModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.Mode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Sets the Mode of the Diet Tracker depending on user preferences. The 3 modes available are"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * -l for weight loss, -g for weight gain, and -m for maintaining weight."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class ModeCommand extends Command\u003cDietModel\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"mode\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets the mode in which you want to use the diet app \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"for tracking. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"Parameters: [-l] [-g] [-m]\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Mode Change Successful: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String MESSAGE_FLAG_NOT_PROVIDED \u003d \"Please provide a flag [-g]/[-m]/[-l]!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final Mode mode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Food}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public ModeCommand(Mode mode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(mode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public CommandResult execute(DietModel model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        model.setMode(mode);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, mode));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                || (other instanceof ModeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                \u0026\u0026 mode.equals(((ModeCommand) other).mode));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 44,
      "sheexiong": 6,
      "akhilvuputuri": 1
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/commands/WeightCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.DietModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Weight;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Adds the weight of the user in kilograms."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class WeightCommand extends Command\u003cDietModel\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"weight\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \": \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"Parameters: WEIGHT (must be in kilograms)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 65.3\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_ADD_WEIGHT_SUCCESS \u003d \"Added Weight: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final Weight weight;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Constructor for Command that includes input Weight."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public WeightCommand(Weight weight) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(weight);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public CommandResult execute(DietModel model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        model.setWeight(weight);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_WEIGHT_SUCCESS, weight.toString()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                || (other instanceof WeightCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                \u0026\u0026 weight.equals(((WeightCommand) other).weight)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 44,
      "sheexiong": 6
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.DietCliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.DietCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.DietCliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Calories;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_CALORIES, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Calories calories \u003d ParserUtil.parseCalories(argMultimap.getValue(PREFIX_CALORIES).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Food food \u003d new Food(name, calories, tagList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return new AddCommand(food);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 1,
      "sheexiong": 8,
      "akhilvuputuri": 48
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/parser/BmiCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.DietCliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.DietCliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.logic.DietLogicManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.BmiCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Height;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Weight;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class BmiCommandParser implements Parser\u003cBmiCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DietLogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the BmiCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * and returns an BmiCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public BmiCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_HEIGHT, PREFIX_WEIGHT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Height height;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Weight weight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (!argMultimap.getPreamble().isBlank()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, BmiCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (argMultimap.getValue(PREFIX_HEIGHT).isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            height \u003d new Height(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            height \u003d ParserUtil.parseHeight(argMultimap.getValue(PREFIX_HEIGHT).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            if (height.getHeightFloat() \u003e 1000 || height.getHeightFloat() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                throw new ParseException(\"Invalid height or weight value, height and weight may only range from \u003e0 up\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                        + \" to 1000.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (argMultimap.getValue(PREFIX_WEIGHT).isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            weight \u003d new Weight(0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            weight \u003d ParserUtil.parseWeight(argMultimap.getValue(PREFIX_WEIGHT).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            if (weight.getWeightFloat() \u003e 1000 || weight.getWeightFloat() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                throw new ParseException(\"Invalid height or weight value, height and weight may only range from \u003e0 up\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                        + \" to 1000.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return new BmiCommand(height, weight);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 53,
      "sheexiong": 7,
      "akhilvuputuri": 14
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 2,
      "akhilvuputuri": 4,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/parser/DietCliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class DietCliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"-n\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final Prefix PREFIX_CALORIES \u003d new Prefix(\"-c\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"-i\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Prefix PREFIX_HEIGHT \u003d new Prefix(\"-h\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Prefix PREFIX_WEIGHT \u003d new Prefix(\"-w\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final Prefix PREFIX_ALL \u003d new Prefix(\"-a\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final Prefix PREFIX_DAYS \u003d new Prefix(\"-d\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Prefix PREFIX_LOSS \u003d new Prefix(\"-l\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Prefix PREFIX_GAIN \u003d new Prefix(\"-g\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Prefix PREFIX_MAINTAIN \u003d new Prefix(\"-m\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 6,
      "sheexiong": 3,
      "akhilvuputuri": 13
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.EditCommand.MESSAGE_NOT_EDITED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.DietCliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.DietCliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.DietCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.DietCliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.Parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.Prefix;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                ArgumentTokenizer"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                        .tokenize(args, PREFIX_INDEX, PREFIX_NAME, PREFIX_CALORIES, PREFIX_TAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        EditCommand.EditFoodDescriptor editFoodDescriptor \u003d new EditCommand.EditFoodDescriptor();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            editFoodDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CALORIES).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            editFoodDescriptor.setCalories(ParserUtil.parseCalories(argMultimap.getValue(PREFIX_CALORIES).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editFoodDescriptor::setTags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (!editFoodDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new ParseException(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return new EditCommand(index, editFoodDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 79,
      "sheexiong": 10,
      "akhilvuputuri": 3
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/parser/FoodBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.CommonParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.BackCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.BmiCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.HeightCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.MetricsCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.ModeCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.WeightCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.DietModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class FoodBookParser implements CommonParser\u003cDietModel\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Command\u003cDietModel\u003e parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return new HelpCommand(); // No Args so no need to Parse."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        case HeightCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return new HeightCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        case WeightCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return new WeightCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        case BmiCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return new BmiCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        case ModeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return new ModeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        case BackCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return new BackCommand(); // No Args so no need to Parse."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return new ExitCommand(); // No Args so no need to Parse."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        case MetricsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return new MetricsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 43,
      "sheexiong": 14,
      "akhilvuputuri": 11
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/parser/HeightCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.HeightCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Height;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Parses input arguments and creates a new HeightCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class HeightCommandParser implements Parser\u003cHeightCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the HeightCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * and returns an HeightCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public HeightCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HeightCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Height height \u003d ParserUtil.parseHeight(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (height.getHeightFloat() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new ParseException(\"Please enter a height value \u003e0 and \u003c1000. Fun fact: The shortest person in the \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                    + \"world is Chandra Bahadur Dangi at 54.6cm. However, we at EYLAH know you might want to calculate\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                    + \" metrics for your baby too!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (height.getHeightFloat() \u003e 1000) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new ParseException(\"Please enter a height value \u003e0 and \u003c1000. Fun fact: The tallest person in the \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                    + \"world is Robert Wadlow at 2.72m. However, we at EYLAH believe people can grow till 10m!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return new HeightCommand(height);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 38,
      "sheexiong": 2
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/parser/ListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.DietCliSyntax.PREFIX_ALL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.DietCliSyntax.PREFIX_DAYS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.DietCliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Parses input arguments and creates a new ListCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * and returns an ListCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ALL, PREFIX_DAYS, PREFIX_TAG);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        String mode \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_ALL)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            mode \u003d \"-a\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap, PREFIX_DAYS)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            mode \u003d \"-d\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            mode \u003d \"-t\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (mode.equals(\"-d\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            int numDays;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                System.out.println(\"VALUE: \" + argMultimap.getValue(PREFIX_DAYS).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                if (argMultimap.getValue(PREFIX_DAYS).get().length() \u003e 6) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                    throw new ParseException(\"Input days is invalid.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                numDays \u003d ParserUtil.parseDays(argMultimap.getValue(PREFIX_DAYS).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                if (numDays \u003c 1) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                    throw new ParseException(\"Input days is invalid.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE_DAYS));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return new ListCommand(mode, numDays);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        } else if (mode.equals(\"-t\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            Tag tag \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return new ListCommand(mode, tag);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        } else { // \"\" and \"-a\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return new ListCommand(mode);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 44,
      "sheexiong": 8,
      "akhilvuputuri": 24
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/parser/MetricsCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.Prefix;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.MetricsCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Parses input arguments and creates a new MetricsCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class MetricsCommandParser implements Parser\u003cMetricsCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MetricsCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * and returns an MetricsCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public MetricsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MetricsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return new MetricsCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 39,
      "sheexiong": 4
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/parser/ModeCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.DietCliSyntax.PREFIX_GAIN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.DietCliSyntax.PREFIX_LOSS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.DietCliSyntax.PREFIX_MAINTAIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.ModeCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.Mode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Parses input arguments and creates a new ModeCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class ModeCommandParser implements Parser\u003cModeCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ModeCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * and returns an ModeCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public ModeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_LOSS, PREFIX_GAIN, PREFIX_MAINTAIN);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ModeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Mode mode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_LOSS)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            mode \u003d Mode.LOSS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap, PREFIX_GAIN)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            mode \u003d Mode.GAIN;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap, PREFIX_MAINTAIN)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            mode \u003d Mode.MAINTAIN;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                    ModeCommand.MESSAGE_FLAG_NOT_PROVIDED));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return new ModeCommand(mode);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 48,
      "sheexiong": 8,
      "akhilvuputuri": 3
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Calories;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Height;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Weight;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Parses a {@code String name} into a {@code Calories}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static Calories parseCalories(String calories) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(calories);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String trimmedCalories \u003d calories.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (!Calories.isValidCaloriesString(trimmedCalories)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new ParseException(Calories.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (Double.parseDouble(trimmedCalories) \u003e 1000000) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new ParseException(\"Maximum Calories for a food is 1000000. You have entered a value for calories\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                    + \" beyond that.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return new Calories(Long.parseLong(trimmedCalories));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws ParseException if the given {@code height} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static Height parseHeight(String height) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(height);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String trimmedHeight \u003d height.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (!Height.isValidHeight(trimmedHeight)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new ParseException(Height.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return new Height(trimmedHeight);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws ParseException if the given {@code weight} is invalid."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static Weight parseWeight(String weight) throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(weight);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String trimmedWeight \u003d weight.trim();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (!Weight.isValidWeight(trimmedWeight)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new ParseException(Weight.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return new Weight(trimmedWeight);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws ParseException if the given {@code weight} is invalid."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static int parseDays(String days) throws ParseException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(days);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String trimmedDays \u003d days.trim();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        int result;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            result \u003d Integer.parseInt(trimmedDays);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new ParseException(\"Input days is invalid.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 38,
      "sheexiong": 1,
      "akhilvuputuri": 33,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/logic/parser/WeightCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.WeightCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Weight;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Parses input arguments and creates a new WeightCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class WeightCommandParser implements Parser\u003cWeightCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the WeightCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * and returns an WeightCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public WeightCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, WeightCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Weight weight \u003d ParserUtil.parseWeight(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (weight.getWeightFloat() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new ParseException(\"Please enter a weight value \u003e0 and \u003c1000.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (weight.getWeightFloat() \u003e 1000) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new ParseException(\"Please enter a weight value \u003e0 and \u003c1000. Fun fact: The heaviest person in the \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                    + \"world is Jon Brower Minnoch at 635kg. However, we at EYLAH believe people can grow till \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                    + \"1000kg!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return new WeightCommand(weight);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 38,
      "sheexiong": 2
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/DietModel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Height;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Weight;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public interface DietModel extends Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    Predicate\u003cFood\u003e PREDICATE_SHOW_ALL_FOODS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns the user prefs\u0027 myself (user info) file path."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    Path getMyselfFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Sets the user prefs\u0027 myself (user info) file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    void setMyselfFilePath(Path myselfFilePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Replaces myself (the user) data with the data in {@code myself}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    void setMyself(ReadOnlyMyself myself);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /** Returns the Myself */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    ReadOnlyMyself getMyself();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Replaces the user\u0027s height in Myself with {@code height}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * {@code height} must be a valid height."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    void setHeight(Height height);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Replaces the user\u0027s weight in Myself with {@code weight}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * {@code weight} must be a valid weight."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    void setWeight(Weight weight);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Getter method to obtain height of user"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @return height of user"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    Height getHeight();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Getter method to obtain weight of user"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @return weight of user"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    Weight getWeight();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Replaces the user\u0027s mode in Myself with {@code mode}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * {@code mode} must be a valid mode."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    void setMode(Mode mode);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Prints out the user\u0027s metrics, like Height, Weight and their Dieting Mode."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    String printMetrics();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Retrieves mode stored in the model"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @return mode"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    Mode getMode();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns the user prefs\u0027 food book file path."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    Path getFoodBookFilePath();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Sets the user prefs\u0027 food book file path."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    void setFoodBookFilePath(Path foodBookFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Replaces food book data with the data in {@code foodBook}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    void setFoodBook(ReadOnlyFoodBook foodBook);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /** Returns the FoodBook */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    ReadOnlyFoodBook getFoodBook();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns true if a food with the same identity as {@code food} exists in the food book."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    boolean hasFood(Food food);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Deletes the given food."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * The food must exist in the food book."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    void deleteFood(Food target);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Adds the given food."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * {@code food} must not already exist in the food book."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    void addFood(Food food);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Replaces the given food {@code target} with {@code editedFood}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * {@code target} must exist in the food book."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * The food identity of {@code editedFood} must not be the same as another existing food in the food book."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    void setFood(Food target, Food editedFood);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns an unmodifiable view of the filtered food list */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    ObservableList\u003cFood\u003e getFilteredFoodList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns the String format of the foods based on the mode input."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    String listFoods(String mode);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Updates the filter of the filtered food list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    void updateFilteredFoodList(Predicate\u003cFood\u003e predicate);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 49,
      "sheexiong": 5,
      "akhilvuputuri": 97
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/DietModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.diettracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Calories;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Height;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Weight;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class DietModelManager implements DietModel {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final long GAIN_CALORIES \u003d 3000;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final long LOSE_CALORIES \u003d 2000;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final long MAINTAIN_CALORIES \u003d 2500;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DietModelManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final FoodBook foodBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final Myself myself;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final FilteredList\u003cFood\u003e filteredFoods;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Initializes a ModelManager with the given addressBook, userPrefs and myself (user metrics)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public DietModelManager(ReadOnlyFoodBook foodBook, ReadOnlyUserPrefs userPrefs, ReadOnlyMyself myself) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireAllNonNull(foodBook, userPrefs, myself);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        logger.fine(\"Initializing with food book: \" + foodBook + \" and user prefs \" + userPrefs"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                + \"and Myself (user) \" + myself);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.foodBook \u003d new FoodBook(foodBook);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        filteredFoods \u003d new FilteredList\u003c\u003e(this.foodBook.getFoodList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.myself \u003d new Myself(myself);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public DietModelManager() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this(new FoodBook(), new UserPrefs(), new Myself());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Myself \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Path getMyselfFilePath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return userPrefs.getMyselfFilePath();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setMyselfFilePath(Path myselfFilePath) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(myselfFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        userPrefs.setMyselfFilePath(myselfFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setMyself(ReadOnlyMyself myself) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.myself.resetData(myself);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public ReadOnlyMyself getMyself() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return myself;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Height getHeight() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return myself.getHeight();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Weight getWeight() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return myself.getWeight();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setHeight(Height height) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        myself.setHeight(height);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setWeight(Weight weight) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        myself.setWeight(weight);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setMode(Mode mode) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        myself.setMode(mode);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public String printMetrics() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        StringBuilder result \u003d new StringBuilder(\"Your metrics are as follows:\\n\\n\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // checks for stored height, displays height if available."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (myself.getHeight().toString().equals(\"0.0\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            result.append(\"    Height: You have not stored your own height yet! Type \u0027height \u003c\u003cinsert height here\u003e\u003e\u0027 \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                    + \"to store your height!\\n\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            result.append(\"    Height: \" + myself.getHeight() + \"\\n\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // checks for stored weight, displays weight if available."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (myself.getWeight().toString().equals(\"0.0\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            result.append(\"    Weight: You have not stored your own weight yet! Type \u0027weight \u003c\u003cinsert weight here\u003e\u003e\u0027 \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                    + \"to store your weight!\\n\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            result.append(\"    Weight: \" + myself.getWeight() + \"\\n\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // checks for stored mode, displays mode if available."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (myself.getMode() \u003d\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            result.append(\"    Dieting Mode: You have not chosen your dieting mode yet! Type \u0027mode \u003c\u003c-l/-m/-g\u003e\u003e\u0027 \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                    + \"to choose your dieting mode!\\n\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            result.append(\"    Dieting Mode: \" + myself.getMode() + \"\\n\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Mode getMode() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return myself.getMode();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FoodBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Path getFoodBookFilePath() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return userPrefs.getFoodBookFilePath();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void setFoodBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        userPrefs.setFoodBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void setFoodBook(ReadOnlyFoodBook addressBook) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.foodBook.resetData(foodBook);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public ReadOnlyFoodBook getFoodBook() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return foodBook;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return foodBook.hasFood(food);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void deleteFood(Food target) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        foodBook.removeFood(target);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void addFood(Food food) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        foodBook.addFood(food);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        updateFilteredFoodList(PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void setFood(Food target, Food editedFood) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireAllNonNull(target, editedFood);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        foodBook.setFood(target, editedFood);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public String listFoods(String mode) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Calories calorieCount \u003d new Calories(0);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (filteredFoods.isEmpty()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            if (mode \u003d\u003d null || mode.equals(\"\")) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                result.append(\"List is empty for today! Add a -a flag to access your entire diet history.\\n\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            } else if (mode.equals(\"-t\")) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                result.append(\"List is empty for the given tag!\\n\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            } else if (mode.equals(\"-d\")) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                result.append(\"List is empty for the given time period!\\n\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                result.append(\"You have no food in your entire diet history!\\n\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            if (mode \u003d\u003d null || mode.equals(\"\")) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                result.append(\"These are all food that you have consumed for today!\\n\\n\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            } else if (mode.equals(\"-d\")) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                result.append(\"These are the food consumed for the given number of days!\\n\\n\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            } else if (mode.equals(\"-t\")) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                result.append(\"These are all the food consumed of the given tag!\\n\\n\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            } else { // \"-a\""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                result.append(\"These are all food you have ever consumed!\\n\\n\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        for (Food food: filteredFoods) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            calorieCount \u003d calorieCount.add(food.getCalories());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            result.append(count + \". \" + food.toString() + \"\\n\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        result.append(\"\\nTotal Calorie Intake : \" + calorieCount + \"\\n\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (mode \u003d\u003d null || mode.equals(\"\")) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            Calories caloriesLeft;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            long calorieIntake;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            if (myself.getMode() \u003d\u003d Mode.GAIN) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                calorieIntake \u003d GAIN_CALORIES;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            } else if (myself.getMode() \u003d\u003d Mode.LOSS) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                calorieIntake \u003d LOSE_CALORIES;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            } else { // MAINTAIN"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                calorieIntake \u003d MAINTAIN_CALORIES;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            caloriesLeft \u003d new Calories(calorieIntake);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            if (caloriesLeft.greaterThan(calorieCount)) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                caloriesLeft \u003d caloriesLeft.difference(calorieCount);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                result.append(\"\\nYou have \" + caloriesLeft + \" calories left for the day!\\n\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            } else if (caloriesLeft.lessThan(calorieCount)) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                caloriesLeft \u003d caloriesLeft.difference(calorieCount);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                result.append(\"\\nYou have exceeded your daily calorie limit (\" + Long.valueOf(calorieIntake)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                        + \") by \" + caloriesLeft + \" calories!\\n\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                result.append(\"\\nYou have hit your calorie limit for the day!\\n\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Food Book Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilteredFoodList() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return filteredFoods;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void updateFilteredFoodList(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        filteredFoods.setPredicate(predicate);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (!(obj instanceof DietModelManager)) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        DietModelManager other \u003d (DietModelManager) obj;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return foodBook.equals(other.foodBook)"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                \u0026\u0026 filteredFoods.equals(other.filteredFoods);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 83,
      "sheexiong": 81,
      "akhilvuputuri": 129
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/FoodBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Duplicates are not allowed (by .isSameFood comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class FoodBook implements ReadOnlyFoodBook {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final UniqueFoodList foods;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        foods \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public FoodBook() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Creates a FoodBook using the Foods in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public FoodBook(ReadOnlyFoodBook toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Replaces the contents of the food list with {@code foods}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * {@code foods} must not contain duplicate foods."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setFoods(List\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.foods.setFoods(foods);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Resets the existing data of this {@code FoodBook} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void resetData(ReadOnlyFoodBook newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        setFoods(newData.getFoodList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //// food-level operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns true if a food with the same identity as {@code food} exists in the food book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return foods.contains(food);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Adds a food to the food book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * The food must not already exist in the food book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void addFood(Food food) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        foods.add(food);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Replaces the given food {@code target} in the list with {@code editedFood}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * {@code target} must exist in the food book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * The food identity of {@code editedFood} must not be the same as another existing food in the food book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setFood(Food target, Food editedFood) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(editedFood);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        foods.setFood(target, editedFood);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Removes {@code key} from this {@code FoodBook}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * {@code key} must exist in the food book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void removeFood(Food key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        foods.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public UniqueFoodList getFoods() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return this.foods;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return Arrays.toString(foods.asUnmodifiableObservableList().toArray());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public ObservableList\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return foods.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                || (other instanceof FoodBook // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                \u0026\u0026 foods.equals(((FoodBook) other).getFoods()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return foods.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 112,
      "akhilvuputuri": 12
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/Mode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * This is the class the represents the enum for the different modes of the diet tracker."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public enum Mode {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    LOSS,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    GAIN,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    MAINTAIN"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 10
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/Myself.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Height;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Self;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Weight;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Wraps all data at the diet tracker user level"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Duplicates are not allowed (by static Self class)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class Myself implements ReadOnlyMyself {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private Self self;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Myself() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.self \u003d new Self();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Myself(Self self) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.self \u003d self;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Creates a FoodBook using the Foods in the {@code toBeCopied}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Myself(ReadOnlyMyself toBeCopied) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Replaces the height of the personal user with {@code newHeight}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setHeight(Height newHeight) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        self.setHeight(newHeight);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Replaces the weight of the personal user with {@code newWeight}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setWeight(Weight newWeight) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        self.setWeight(newWeight);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Replaces the mode of the personal user with {@code newMode}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setMode(Mode newMode) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        self.setMode(newMode);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Resets the existing data of this {@code Myself} with {@code newData}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void resetData(ReadOnlyMyself newData) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        setHeight(newData.getHeight());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        setWeight(newData.getWeight());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        setMode(newData.getMode());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //// metric-level operations"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return self.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Height getHeight() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return self.getHeight();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Weight getWeight() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return self.getWeight();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Mode getMode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return self.getMode();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Self getSelf() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return this.self;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                || (other instanceof Myself)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                \u0026\u0026 self.equals(((Myself) other).getSelf());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return (new Self()).hashCode();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 83,
      "akhilvuputuri": 23
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/ReadOnlyFoodBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public interface ReadOnlyFoodBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    ObservableList\u003cFood\u003e getFoodList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 2,
      "akhilvuputuri": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/ReadOnlyMyself.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Height;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.self.Self;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Weight;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Unmodifiable view of a Diet Tracker user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public interface ReadOnlyMyself {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns an unmodifiable view of the Diet Tracker user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    Height getHeight();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    Weight getWeight();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    Mode getMode();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    Self getSelf();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 17,
      "akhilvuputuri": 2
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/food/Calories.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Represents a Food\u0027s calories count in the diet tracker of EYLAH."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCalories(long)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class Calories {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final long LONG_ZERO \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            \"Calories count should be zero or a positive whole number\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[/]?\\\\d+$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public final long value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Constructs a {@code Calories}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @param calories A valid calories number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Calories(long calories) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(calories);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        checkArgument(isValidCalories(calories), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.value \u003d calories;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public long getValue() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns true if a given string is a valid calories."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static boolean isValidCalories(long test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return test \u003e\u003d LONG_ZERO;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns true if a given string is a valid calories."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static boolean isValidCaloriesString(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Calories add(Calories other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return new Calories(this.getValue() + other.getValue());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Calories difference(Calories other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return new Calories(Math.abs(this.getValue() - other.getValue()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public boolean greaterThan(Calories other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return this.value \u003e other.getValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public boolean lessThan(Calories other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return this.value \u003c other.getValue();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return String.valueOf(value);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                || (other instanceof Calories // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((Calories) other).value); // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return Long.valueOf(value).hashCode();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 8,
      "akhilvuputuri": 71
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/food/Date.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Represents a Food\u0027s date created in the diet tracker of EYLAH."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public final LocalDateTime value;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Constructs a {@code Date} at current time."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Date() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.value \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Constructs a {@code Date} at dateTime given."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @param date string given in the format 2007-12-03T10:15:30"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (date \u003d\u003d null || date \u003d\u003d \"\") {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            this.value \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            this.value \u003d LocalDateTime.parse(date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Date(LocalDateTime date) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.value \u003d date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public String getStorageString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return value.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public LocalDateTime getValue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public boolean isBefore(Date other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return value.isBefore(other.getValue());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public boolean isAfter(Date other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return value.isAfter(other.getValue());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public LocalDate getLocalDateValue () {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return value.toLocalDate();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return value.toLocalDate().toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (!(other instanceof Date)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Date otherDate \u003d (Date) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return value.equals(otherDate.getValue());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 82
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/food/Food.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Represents a Food in the diet tracker of EYLAH."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final Calories calories;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    // Data Fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Every field must be present"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * name and calories fields must not be null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Food(Name name, Calories calories, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireAllNonNull(name, calories);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.date \u003d new Date();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Food(Name name, Calories calories, Date date, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireAllNonNull(name, calories);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Calories getCalories() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return calories;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns true if both food of the same name have the same calories."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * This defines a weaker notion of equality between two food."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public boolean isSameFood(Food otherFood) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (otherFood \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return otherFood !\u003d null"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                \u0026\u0026 otherFood.getName().equals(getName())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                \u0026\u0026 otherFood.getCalories().equals(getCalories())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                \u0026\u0026 otherFood.getDate().equals(getDate())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                \u0026\u0026 otherFood.getTags().equals(getTags());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns true if both food have the same identity and data fields."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * This defines a stronger notion of equality between two food."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (!(other instanceof Food)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Food otherFood \u003d (Food) other;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return otherFood.getName().equals(getName())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                \u0026\u0026 otherFood.getCalories().equals(getCalories())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                \u0026\u0026 otherFood.getDate().equals(getDate())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                \u0026\u0026 otherFood.getTags().equals(getTags());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return Objects.hash(name, calories, date, tags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                .append(\" Calories: \")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                .append(getCalories())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                .append(\" At: \")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                .append(getDate());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (!tags.isEmpty()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            builder.append(\" Tags: \");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 3,
      "akhilvuputuri": 120
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/food/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Represents a Food\u0027s name in the diet tracker of EYLAH."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                \u0026\u0026 name.equals(((Name) other).name)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 59
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/food/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Tests that a {@code Food}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cFood\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean test(Food food) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(food.getName().name, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 31
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/food/UniqueFoodList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.exceptions.FoodNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * A list of foods that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * A food is considered unique by comparing using {@code Food#isSameFood(Food)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * foodss uses Food#isSameFood(Food) for equality so as to ensure that the food being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * unique in terms of identity in the UniqueFoodList. However, the removal of a food uses Food#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * as to ensure that the food with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * @see Food#isSameFood(Food)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class UniqueFoodList implements Iterable\u003cFood\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final ObservableList\u003cFood\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final ObservableList\u003cFood\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns true if the list contains an equivalent food as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean contains(Food toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameFood);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Adds a food to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * The food must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void add(Food toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Replaces the food {@code target} in the list with {@code editedFood}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * The food identity of {@code editedFood} must not be the same as another existing food in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setFood(Food target, Food editedFood) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireAllNonNull(target, editedFood);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new FoodNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (!target.isSameFood(editedFood) \u0026\u0026 contains(editedFood)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        internalList.set(index, editedFood);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Removes the equivalent food from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * The food must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void remove(Food toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new FoodNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setFoods(UniqueFoodList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Replaces the contents of this list with {@code foods}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * {@code foods} must not contain duplicate foods."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setFoods(List\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireAllNonNull(foods);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (!foodsAreUnique(foods)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        internalList.setAll(foods);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public ObservableList\u003cFood\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Iterator\u003cFood\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                || (other instanceof UniqueFoodList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueFoodList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns true if {@code foods} contains only unique foods."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private boolean foodsAreUnique(List\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        for (int i \u003d 0; i \u003c foods.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            for (int j \u003d i + 1; j \u003c foods.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                if (foods.get(i).isSameFood(foods.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 133,
      "akhilvuputuri": 4
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/food/exceptions/DuplicateFoodException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model.food.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Signals that the operation will result in duplicate Foods (Foods are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class DuplicateFoodException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public DuplicateFoodException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        super(\"Operation would result in duplicate foods\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 10,
      "akhilvuputuri": 1
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/food/exceptions/FoodNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model.food.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Signals that the operation is unable to find the specified food."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class FoodNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 5,
      "akhilvuputuri": 1
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/self/Bmi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.model.self;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Represents the BMI in the diet tracker of EYLAH."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidHeight(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class Bmi {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \"Please input a height and a weight to calculate BMI\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * The first character of the height must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[-+]?\\\\d*\\\\.?\\\\d*$*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public final Float height;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public final Float weight;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public final String bmi;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public final Float bmiFloat;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public final String category;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Constructs a {@code Bmi} using {@code Height} and {@code Weight} values."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @param height A valid height."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @param weight A valid weight."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Bmi(Height height, Weight weight) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(height);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        checkArgument(isValidHeight(height.toString()), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        checkArgument(isValidWeight(weight.toString()), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.height \u003d height.getHeightFloat();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.weight \u003d weight.getWeightFloat();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.bmiFloat \u003d calcBmi();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.bmi \u003d this.bmiFloat.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (bmiFloat \u003c 25.0 \u0026\u0026 bmiFloat \u003e\u003d 18.5) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            this.category \u003d \"Normal\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } else if (bmiFloat \u003e\u003d 16.0 \u0026\u0026 bmiFloat \u003c 18.5) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            this.category \u003d \"Underweight\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } else if (bmiFloat \u003c 16.0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            this.category \u003d \"Severely Underweight\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } else if (bmiFloat \u003e\u003d 25.0 \u0026\u0026 bmiFloat \u003c 30.0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            this.category \u003d \"Overweight\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            this.category \u003d \"Obese\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns true if a given string is a valid height."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static boolean isValidHeight(String test) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns true if a given string is a valid height."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static boolean isValidWeight(String test) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Method to calculate BMI. Formula used to calculate BMI is"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Weight (in kilograms) divided by Height squared (in metres^2)."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @return Float of the BMI value."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private Float calcBmi() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // Weight/Height^2"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        float result \u003d (float) (this.weight / Math.pow(this.height / 100, 2));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public float getBmi() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return this.bmiFloat;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return this.category;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return \"\" + bmi;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                || (other instanceof Height // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                \u0026\u0026 bmi.equals(((Bmi) other).bmi)); // state check"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return bmi.hashCode();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 105
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/self/Height.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model.self;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Represents the user\u0027s height in the diet tracker of EYLAH."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidHeight(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class Height {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \"Height should only contain numbers, and it should not be blank. It is to be input in centimeters.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * The first character of the height must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[-+]?\\\\d*\\\\.?\\\\d*$*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private String heightString;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private Float heightFloat;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Constructs a {@code Height}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @param height A valid height in float."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Height(float height) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(height);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        String heightString \u003d Float.valueOf(height).toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        checkArgument(isValidHeight(heightString), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.heightString \u003d heightString;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.heightFloat \u003d height;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Constructs a {@code Height}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @param heightString A valid height in string."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Height(String heightString) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(heightString);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        checkArgument(isValidHeight(heightString), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.heightString \u003d heightString;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.heightFloat \u003d Float.parseFloat(this.heightString);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Height(String heightString, Float heightFloat) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.heightString \u003d heightString;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.heightFloat \u003d heightFloat;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Height() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns true if a given string is a valid height."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static boolean isValidHeight(String test) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public float getHeightFloat() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return this.heightFloat;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public boolean isZero() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return heightFloat.equals(Float.valueOf(0));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public boolean isNotZero() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return !heightFloat.equals(Float.valueOf(0));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return \"\" + heightString;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                || (other instanceof Height // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                \u0026\u0026 heightString.equals(((Height) other).heightString)); // state check"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return heightString.hashCode();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 69,
      "akhilvuputuri": 24
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/self/Self.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model.self;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.Mode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Represents a User in the diet tracker of EYLAH."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class Self {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private Height height;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private Weight weight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private Mode mode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Every field must be present"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * height and weight fields must not be null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * mode set to default value of MAINTAIN"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Self(Height height, Weight weight) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireAllNonNull(height, weight);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.mode \u003d Mode.MAINTAIN;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Self() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.height \u003d new Height(0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.weight \u003d new Weight(0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.mode \u003d Mode.MAINTAIN;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Height getHeight() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Weight getWeight() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return weight;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Mode getMode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return mode;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void setHeight(Height newHeight) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        height \u003d newHeight;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void setWeight(Weight newWeight) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        weight \u003d newWeight;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void setMode(Mode newMode) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        mode \u003d newMode;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return Objects.hash(height, weight, mode);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        builder.append(\" Height: \")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                .append(getHeight())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                .append(\" Weight: \")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                .append(getWeight())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                .append(\" Mode: \")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                .append(getMode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 55,
      "akhilvuputuri": 21,
      "WillySeahh": 4
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/self/Weight.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model.self;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Represents the user\u0027s weight in the diet tracker of EYLAH."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidWeight(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class Weight {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \"Weight should only be a floating point number, and it should not be blank. It is to be input in \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                    + \"kilograms.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * The first character of the weight must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[-+]?\\\\d*\\\\.?\\\\d*$*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private String weightString;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private Float weightFloat;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Constructs a {@code Height}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @param weight A valid weight in float."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Weight(float weight) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(weight);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        String heightString \u003d Float.valueOf(weight).toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        checkArgument(isValidWeight(heightString), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.weightString \u003d heightString;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.weightFloat \u003d weight;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Constructs a {@code Weight}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @param weightString A valid weight in string."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Weight(String weightString) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(weightString);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        checkArgument(isValidWeight(weightString), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.weightString \u003d weightString;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.weightFloat \u003d Float.parseFloat(this.weightString);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Weight() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Weight(String weightString, float weightFloat) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.weightString \u003d weightString;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.weightFloat \u003d weightFloat;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns true if a given string is a valid weight."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static boolean isValidWeight(String test) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public float getWeightFloat() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return this.weightFloat;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public boolean isZero() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return weightFloat.equals(Float.valueOf(0));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public boolean isNotZero() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return !weightFloat.equals(Float.valueOf(0));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return weightString;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                || (other instanceof Weight // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                \u0026\u0026 weightString.equals(((Weight) other).weightString)); // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return weightString.hashCode();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 70,
      "akhilvuputuri": 25
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.FoodBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.Myself;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyFoodBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyMyself;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Calories;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Contains utility methods for populating {@code FoodBook} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static Food[] getSampleFoods() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return new Food[] {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            new Food(new Name(\"Burger\"), new Calories(290), new Date(\"2020-02-24T02:50:22.279828\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                    getTagSet(\"fastfood\")),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            new Food(new Name(\"Fries\"), new Calories(120), new Date(\"2020-03-15T02:50:22.279828\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                    getTagSet(\"fastfood\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            new Food(new Name(\"Coke\"), new Calories(150), new Date(\"2020-03-20T02:50:22.279828\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                    getTagSet(\"fastfood\", \"drinks\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            new Food(new Name(\"Hotdog\"), new Calories(230), new Date(\"2020-03-30T02:50:22.279828\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                    getTagSet(\"fastfood\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            new Food(new Name(\"Spaghetti\"), new Calories(450), new Date(\"2020-04-01T02:50:22.279828\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                    getTagSet(\"italian\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            new Food(new Name(\"Sandwich\"), new Calories(300), new Date(\"2020-04-02T02:50:22.279828\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                    getTagSet(\"healthy\"))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        };"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static ReadOnlyMyself getSampleMyself() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Myself sampleMs \u003d new Myself();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return sampleMs;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static ReadOnlyFoodBook getSampleFoodBook() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        FoodBook sampleFb \u003d new FoodBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        for (Food sampleFood: getSampleFoods()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            sampleFb.addFood(sampleFood);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return sampleFb;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static ReadOnlyFoodBook getEmptyFoodBook() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        FoodBook emptyFb \u003d new FoodBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return emptyFb;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 7,
      "akhilvuputuri": 59
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/storage/DietStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyFoodBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyMyself;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public interface DietStorage extends MyselfStorage, FoodBookStorage, Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    Path getMyselfFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    Path getFoodBookFilePath();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    Optional\u003cReadOnlyFoodBook\u003e readFoodBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    void saveFoodBook(ReadOnlyFoodBook foodBook) throws IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    Optional\u003cReadOnlyMyself\u003e readMyself() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    void saveMyself(ReadOnlyMyself myself) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 11,
      "sheexiong": 1,
      "akhilvuputuri": 23
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/storage/DietStorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyFoodBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyMyself;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Manages storage of FoodBook data  and User metrics data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class DietStorageManager implements DietStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DietStorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private FoodBookStorage foodBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private MyselfStorage myselfStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public DietStorageManager(FoodBookStorage foodBookStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                              MyselfStorage myselfStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.foodBookStorage \u003d foodBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.myselfStorage \u003d myselfStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Myself methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Path getMyselfFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return myselfStorage.getMyselfFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Optional\u003cReadOnlyMyself\u003e readMyself() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return readMyself(myselfStorage.getMyselfFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Optional\u003cReadOnlyMyself\u003e readMyself(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return myselfStorage.readMyself(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void saveMyself(ReadOnlyMyself myself) throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        logger.info(myself.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        saveMyself(myself, myselfStorage.getMyselfFilePath());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void saveMyself(ReadOnlyMyself myself, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        myselfStorage.saveMyself(myself, filePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FoodBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Path getFoodBookFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return foodBookStorage.getFoodBookFilePath();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Optional\u003cReadOnlyFoodBook\u003e readFoodBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return readFoodBook(foodBookStorage.getFoodBookFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Optional\u003cReadOnlyFoodBook\u003e readFoodBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return foodBookStorage.readFoodBook(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void saveFoodBook(ReadOnlyFoodBook foodBook) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        saveFoodBook(foodBook, foodBookStorage.getFoodBookFilePath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void saveFoodBook(ReadOnlyFoodBook foodBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        foodBookStorage.saveFoodBook(foodBook, filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 34,
      "sheexiong": 21,
      "akhilvuputuri": 50
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/storage/FoodBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.FoodBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyFoodBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Represents a storage for {@link FoodBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public interface FoodBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    Path getFoodBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns FoodBook data as a {@link ReadOnlyFoodBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    Optional\u003cReadOnlyFoodBook\u003e readFoodBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @see #getFoodBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    Optional\u003cReadOnlyFoodBook\u003e readFoodBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Saves the given {@link ReadOnlyFoodBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @param foodBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    void saveFoodBook(ReadOnlyFoodBook foodBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @see #saveFoodBook(ReadOnlyFoodBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    void saveFoodBook(ReadOnlyFoodBook foodBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 41,
      "akhilvuputuri": 5
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/storage/JsonAdaptedFood.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Calories;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Jackson-friendly version of {@link Food}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "class JsonAdaptedFood {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Food\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final long calories;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Constructs a {@code JsonAdaptedFood} with the given food details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public JsonAdaptedFood(@JsonProperty(\"name\") String name, @JsonProperty(\"calories\") long calories,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                           @JsonProperty(\"date\") String date, @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Converts a given {@code Food} into this class for Jackson use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public JsonAdaptedFood(Food source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        name \u003d source.getName().name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        calories \u003d source.getCalories().value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        date \u003d source.getDate().getStorageString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Converts this Jackson-friendly adapted food object into the model\u0027s {@code Food} object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted food."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Food toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        final List\u003cTag\u003e foodTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            foodTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        final Calories modelCalories \u003d new Calories(calories);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        final Date modelDate;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (date !\u003d null || date !\u003d \"\") {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            modelDate \u003d new Date();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(foodTags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return new Food(modelName, modelCalories, modelDate, modelTags);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 87
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/storage/JsonAdaptedSelf.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.Mode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Height;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Self;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Weight;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Jackson-friendly version of {@link Self}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "class JsonAdaptedSelf {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Self\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final float height;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final float weight;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final String mode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Constructs a {@code JsonAdaptedSelf} with the given user metric details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public JsonAdaptedSelf(@JsonProperty(\"height\") float height, @JsonProperty(\"weight\") float weight,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                           @JsonProperty(\"mode\") String mode) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Converts a given {@code Self} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public JsonAdaptedSelf(Height height, Weight weight, Mode mode) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.height \u003d height.getHeightFloat();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.weight \u003d weight.getWeightFloat();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.mode \u003d mode.name();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Converts this Jackson-friendly adapted self object into the model\u0027s {@code Self} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Self."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Self toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Self self \u003d new Self(new Height(height), new Weight(weight));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Mode mode \u003d Mode.MAINTAIN;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (this.mode.equals(\"LOSS\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            mode \u003d Mode.LOSS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        } else if (this.mode.equals(\"GAIN\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            mode \u003d Mode.GAIN;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        self.setMode(mode);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return self;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 41,
      "akhilvuputuri": 19
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/storage/JsonFoodBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyFoodBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * A class to access FoodBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class JsonFoodBookStorage implements FoodBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonFoodBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public JsonFoodBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Path getFoodBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Optional\u003cReadOnlyFoodBook\u003e readFoodBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return readFoodBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Similar to {@link #readFoodBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Optional\u003cReadOnlyFoodBook\u003e readFoodBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Optional\u003cJsonSerializableFoodBook\u003e jsonFoodBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                filePath, JsonSerializableFoodBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        if (!jsonFoodBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return Optional.of(jsonFoodBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void saveFoodBook(ReadOnlyFoodBook foodBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        saveFoodBook(foodBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Similar to {@link #saveFoodBook(ReadOnlyFoodBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void saveFoodBook(ReadOnlyFoodBook foodBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(foodBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableFoodBook(foodBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 80
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/storage/JsonMyselfStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyMyself;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * A class to access FoodBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class JsonMyselfStorage implements MyselfStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonFoodBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public JsonMyselfStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Path getMyselfFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Optional\u003cReadOnlyMyself\u003e readMyself() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return readMyself(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Similar to {@link #readMyself()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Optional\u003cReadOnlyMyself\u003e readMyself(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Optional\u003cJsonSerializableMyself\u003e jsonMyself \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                filePath, JsonSerializableMyself.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (!jsonMyself.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return Optional.of(jsonMyself.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void saveMyself(ReadOnlyMyself myself) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        saveMyself(myself, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Similar to {@link #saveMyself(ReadOnlyMyself)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void saveMyself(ReadOnlyMyself myself, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(myself);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableMyself(myself), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 80
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/storage/JsonSerializableFoodBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.FoodBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyFoodBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * An Immutable FoodBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "@JsonRootName(value \u003d \"foodbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "class JsonSerializableFoodBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FOOD \u003d \"Food list contains duplicate food(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private final List\u003cJsonAdaptedFood\u003e foods \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Constructs a {@code JsonSerializableFoodBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public JsonSerializableFoodBook(@JsonProperty(\"foods\") List\u003cJsonAdaptedFood\u003e foods) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.foods.addAll(foods);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Converts a given {@code ReadOnlyFoodBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableFoodBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public JsonSerializableFoodBook(ReadOnlyFoodBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        foods.addAll(source.getFoodList().stream().map(JsonAdaptedFood::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Converts this food book into the model\u0027s {@code FoodBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public FoodBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        FoodBook foodBook \u003d new FoodBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        for (JsonAdaptedFood jsonAdaptedFood : foods) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            Food food \u003d jsonAdaptedFood.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            if (foodBook.hasFood(food)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            foodBook.addFood(food);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return foodBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 60
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/storage/JsonSerializableMyself.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.Myself;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyMyself;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Self;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * An Immutable Myself that is serializable to JSON format."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "@JsonRootName(value \u003d \"myself\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "class JsonSerializableMyself {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final JsonAdaptedSelf self;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Constructs a {@code JsonSerializableMyself} with the given persons."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public JsonSerializableMyself(@JsonProperty(\"self\") JsonAdaptedSelf self) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.self \u003d self;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Converts a given {@code ReadOnlyMyself} into this class for Jackson use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableMyself}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public JsonSerializableMyself(ReadOnlyMyself source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.self \u003d new JsonAdaptedSelf(source.getHeight(), source.getWeight(), source.getMode());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Converts myself (User Details) into the model\u0027s {@code Myself} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Myself toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Self self \u003d this.self.toModelType();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Myself myself \u003d new Myself(self);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return myself;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 46,
      "akhilvuputuri": 2
    }
  },
  {
    "path": "src/main/java/seedu/eylah/diettracker/storage/MyselfStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.Myself;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyMyself;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Represents a storage for {@link Myself}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public interface MyselfStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    Path getMyselfFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns Myself data as a {@link ReadOnlyMyself}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    Optional\u003cReadOnlyMyself\u003e readMyself() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @see #getMyselfFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    Optional\u003cReadOnlyMyself\u003e readMyself(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Saves the given {@link ReadOnlyMyself} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @param myself cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    void saveMyself(ReadOnlyMyself myself) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * @see #saveMyself(ReadOnlyMyself)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    void saveMyself(ReadOnlyMyself myself, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 46
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/SplitterLogic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * API of the SplitterLogic component"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public interface SplitterLogic extends Logic {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 15
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/SplitterLogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.logic.parser.ExpenseSplitterParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.SplitterModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.storage.SplitterStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * Logic Manager for ExpenseSplitter."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class SplitterLogicManager implements SplitterLogic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(SplitterLogicManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final SplitterModel splitterModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final SplitterStorage splitterStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final ExpenseSplitterParser expenseSplitterParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public SplitterLogicManager(SplitterModel splitterModel, SplitterStorage splitterStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.splitterModel \u003d splitterModel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.splitterStorage \u003d splitterStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        expenseSplitterParser \u003d new ExpenseSplitterParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        Command\u003cSplitterModel\u003e command \u003d expenseSplitterParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        commandResult \u003d command.execute(splitterModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            splitterStorage.savePersonAmountBook(splitterModel.getPersonAmountBook());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            splitterStorage.saveReceiptBook(splitterModel.getReceiptBook());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 42,
      "ailanthustng": 1,
      "WillySeahh": 7
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/commands/AddItemCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.parser.SplitterCliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.parser.SplitterCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.parser.SplitterCliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.SplitterModel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.Item;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Entry;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * Used to add entries to the receipt."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class AddItemCommand extends Command\u003cSplitterModel\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"additem\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an item to the receipt. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + PREFIX_ITEM + \" ITEM NAME \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + PREFIX_PRICE + \" PRICE \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + PREFIX_NAME + \" PERSON NAME\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The entry: \\n  -\u003e %1$s\\nhas been added.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    // note:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    // if receipt is done, can only do paid, back, listamount and listreceipt. CANNOT: add/deleteitem."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    // if receipt is undone, can only additem, back, deleteitem, listreceipt, listamount. CANNOT: paid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String MESSAGE_RECEIPT_DONE \u003d \"The current receipt is marked as completed. You may not use \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"the additem command.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"To start a clean receipt, please use the clearreceipt command.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private Entry toBeAdded;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private ArrayList\u003cPerson\u003e persons;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private Item item;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Creates an AddItemCommand to add the specified {@code Item}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param item    Item to be added."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param persons String array of persons to be added."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public AddItemCommand(Item item, ArrayList\u003cPerson\u003e persons, Amount amount) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireAllNonNull(item, persons, amount);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.persons \u003d persons;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.toBeAdded \u003d new Entry(item, persons);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public CommandResult execute(SplitterModel splitterModel) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(splitterModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (splitterModel.isReceiptDone()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return new CommandResult(MESSAGE_RECEIPT_DONE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            splitterModel.addEntry(toBeAdded);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            for (Person person : persons) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                if (!splitterModel.hasPerson(person)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    splitterModel.addPerson(person);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    splitterModel.addAmount(splitterModel.getPerson(person), amount);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toBeAdded));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                || (other instanceof AddItemCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                \u0026\u0026 item.equals(((AddItemCommand) other).item)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                \u0026\u0026 persons.equals(((AddItemCommand) other).persons)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                \u0026\u0026 amount.equals(((AddItemCommand) other).amount));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 17,
      "ailanthustng": 71,
      "WillySeahh": 3
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/commands/BackCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.SplitterModel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * This Command is used to go back to the Main Application of EYLAH."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class BackCommand extends Command\u003cSplitterModel\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"back\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Returned to Main Menu.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public CommandResult execute(SplitterModel splitterModel) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 6,
      "WillySeahh": 16
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/commands/ClearReceiptCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.SplitterModel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Deletes existing Entries in a Receipt."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class ClearReceiptCommand extends Command\u003cSplitterModel\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearreceipt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Cleared the receipt.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public CommandResult execute(SplitterModel splitterModel) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(splitterModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (!splitterModel.isReceiptDone()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            splitterModel.deleteAllEntries();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            splitterModel.clearReceipt();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            splitterModel.clearReceipt();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            splitterModel.getReceipt().makeUndone();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 8,
      "ailanthustng": 22,
      "WillySeahh": 1
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/commands/DeleteItemCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.SplitterModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Entry;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Deletes an Item from the Receipt and the reduces the Amount of the Person(s) involved in splitting this Item."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class DeleteItemCommand extends Command\u003cSplitterModel\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteitem\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \": Deletes the item identified by the index number used in the displayed item list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Item: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    // note:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    // if receipt is done, can only do paid, back, listamount and listreceipt. CANNOT: add/deleteitem."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    // if receipt is undone, can only additem, back, deleteitem, listreceipt, listamount. CANNOT: paid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String MESSAGE_RECEIPT_DONE \u003d \"The current receipt is marked as completed. You may not use \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"the deleteitem command.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"To start a clean receipt, please use the clearreceipt command.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public DeleteItemCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public CommandResult execute(SplitterModel splitterModel) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(splitterModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (splitterModel.isReceiptDone()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return new CommandResult(MESSAGE_RECEIPT_DONE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            Entry currentEntry;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                currentEntry \u003d splitterModel.getEntry(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            } catch (IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                throw new CommandException(\"There is no Item with this index. Please use `listreceipt` to get the\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                + \" Index of item.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            Item currentItem \u003d currentEntry.getItem();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            Amount amountPerPerson \u003d currentItem.getAmountPerPerson();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            ArrayList\u003cPerson\u003e persons \u003d currentEntry.getPersonsList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            for (Person person : persons) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                splitterModel.removeAmount(person, amountPerPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            splitterModel.deleteEntry(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                || (other instanceof DeleteItemCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteItemCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 46,
      "ailanthustng": 22,
      "WillySeahh": 8
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/commands/DoneReceiptCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.SplitterModel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Set the Receipt as DONE thus no further modification to the Receipt can be made."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * For instance, after the Receipt is set as DONE, additem and deleteitem commands will not work until"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * a new receipt is created."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class DoneReceiptCommand extends Command\u003cSplitterModel\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"donereceipt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Receipt has been marked as completed.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String MESSAGE_RECEIPT_DONE \u003d \"Receipt has already been marked as completed.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public CommandResult execute(SplitterModel splitterModel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(splitterModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (splitterModel.isReceiptDone()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return new CommandResult(MESSAGE_RECEIPT_DONE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            splitterModel.getReceipt().makeDone();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            splitterModel.listReceipt();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 8,
      "ailanthustng": 23,
      "WillySeahh": 3
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.SplitterModel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class ExitCommand extends Command\u003cSplitterModel\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting EYLAH as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public CommandResult execute(SplitterModel splitterModel) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, true, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 19,
      "ailanthustng": 1
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.SplitterModel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class HelpCommand extends Command\u003cSplitterModel\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows Expense Splitter usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final String DIVIDER \u003d \"--------------------------------\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Welcome to Expense Splitter! The following commands are \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"available:\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + DIVIDER"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"1. additem - Use this to add an item, price and the person(s) involved in the splitting for that item.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"   USAGE: additem -i ITEMNAME -p PRICE -n NAME [-n NAME]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"   EXAMPLE: additem -i pasta -p 19.90 -n alice -n bob -n charlie\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + DIVIDER"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"2. deleteitem - Use this to delete the item at the specified index in your receipt.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"   USAGE: deleteitem INDEX\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"   EXAMPLE: deleteitem 1\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + DIVIDER"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"3. listreceipt - Use this to list all the item(s) in the receipt.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"   USAGE: listreceipt\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"   EXAMPLE: listreceipt\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + DIVIDER"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"4. listamount - Use this to list all the person(s) and the amount they owe.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"   USAGE: listamount\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"   EXAMPLE: listamount\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + DIVIDER"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"5. donereceipt - Use this to mark the receipt as done after adding all items.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"   USAGE: donereceipt\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"   EXAMPLE: donereceipt\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + DIVIDER"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"6. paid - Use this to subtract the amount paid by a person at the specified index.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"   USAGE: paid INDEX [AMOUNT]\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"   EXAMPLE: paid 2 3.90\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + DIVIDER"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"7. clearreceipt - Use this to clear the receipt and start a new receipt.\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"   USAGE: clearreceipt\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"   EXAMPLE: clearreceipt\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + DIVIDER"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"8. back - Use this to back to the main menu of EYLAH.\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"   USAGE: back\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"   EXAMPLE: back\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + DIVIDER"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"We hope you enjoy your usage of EYLAH Expense Splitter!\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public CommandResult execute(SplitterModel splitterModel) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, false, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 38,
      "ailanthustng": 9,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/commands/ListAmountCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.SplitterModel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Lists all Person(s) and the Amount they owe you."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class ListAmountCommand extends Command\u003cSplitterModel\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listamount\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all person with their amount.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String MESSAGE_EMPTY \u003d \"Currently no one owes you any money.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"Please use the additem command to add an item.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"additem -i ITEMNAME -p PRICE -n NAME [-n NAME]...\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public CommandResult execute(SplitterModel splitterModel) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(splitterModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (!splitterModel.getPersonAmountBook().getPersonList().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            String output \u003d splitterModel.listAmount();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            return new CommandResult(output.concat(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return new CommandResult(MESSAGE_EMPTY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 21,
      "ailanthustng": 10,
      "WillySeahh": 3
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/commands/ListReceiptCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.SplitterModel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " *  Lists the current receipt to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class ListReceiptCommand extends Command\u003cSplitterModel\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listreceipt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"listreceipt is entered as `listreceipt`\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed current receipt containing all Items and Person(s) involved \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            + \"in splitting it.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String MESSAGE_EMPTY \u003d \"Receipt is currently empty.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"Please use the additem command to add an item.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"additem -i ITEMNAME -p PRICE -n NAME [-n NAME]...\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public CommandResult execute(SplitterModel splitterModel) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(splitterModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (!splitterModel.getReceipt().getReceipt().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            String output \u003d splitterModel.listReceipt();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            return new CommandResult(output.concat(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return new CommandResult(MESSAGE_EMPTY);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 6,
      "ailanthustng": 10,
      "WillySeahh": 20
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/commands/PaidCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyPersonAmountBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.SplitterModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Reduce the amount a Person owes you."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class PaidCommand extends Command\u003cSplitterModel\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"paid\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully deducted amount from person named: \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        + \": Deducts the amount of Person identified by the index number of the Person in listamount.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        + \"Parameters: INDEX and AMOUNT (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\" + \" 3.30\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String PROPER_AMOUNT \u003d \"Amount paid should only contains numerical characters.\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"It should not contain any alphabets and only has a maximum of 2 decimal places.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String MESSAGE_RECEIPT_UNDONE \u003d \"The current receipt is marked as incomplete. You may not \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"use the paid command.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \"To mark the current receipt as done, please use the donereceipt command.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    //private final Person personPaid;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private final Index indexOfPersonPaid;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private final String amountPaid;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Creates an PaidCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public PaidCommand (Index indexOfPersonPaid, String amountPaid) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireNonNull(indexOfPersonPaid);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireNonNull(amountPaid);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.indexOfPersonPaid \u003d indexOfPersonPaid;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.amountPaid \u003d amountPaid;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public CommandResult execute(SplitterModel splitterModel) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(splitterModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (!splitterModel.isReceiptDone()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return new CommandResult(MESSAGE_RECEIPT_UNDONE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            ReadOnlyPersonAmountBook book \u003d splitterModel.getPersonAmountBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            //This ensures that the indexOfPersonPaid is correct."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            if (indexOfPersonPaid.getZeroBased() \u003c 0"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                || indexOfPersonPaid.getZeroBased() \u003e book.getPersonList().size() - 1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                throw new CommandException(\"Index of person is incorrect. Please use `listamount` to get the index.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            Person person \u003d book.getPersonByIndex(indexOfPersonPaid.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            String initialAmount \u003d person.getAmount().toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            // This cases handles when user key in `paid 1` which stands for paid the full amount Person in Index 1"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            // owes."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            if (amountPaid.equals(\"all\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                PaidCommand newPaidCommand \u003d new PaidCommand(indexOfPersonPaid, initialAmount.substring(1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                return newPaidCommand.execute(splitterModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                //This ensures that amountPaid is correct. p.getAmount MUST be BIGGER OR EQUAL TO AMOUNT PAID"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                if (person.getAmount().amount.compareTo(new BigDecimal(amountPaid)) \u003d\u003d -1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                    throw new CommandException(\"Person cannot pay more than what he owes you. Please use `listamount` \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                        + \"to get the index of person and amount he owes you.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                splitterModel.paidPerson(person, amountPaid);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                String finalAmount \u003d person.getAmount().toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                return new CommandResult(MESSAGE_SUCCESS + person.getName() + \". Amount owed decreased \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                        + \"from \" + initialAmount + \" to \" + finalAmount + \".\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            || (other instanceof PaidCommand"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            \u0026\u0026 indexOfPersonPaid.equals(((PaidCommand) other).indexOfPersonPaid)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            \u0026\u0026 amountPaid.equals(((PaidCommand) other).amountPaid));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 11,
      "ailanthustng": 14,
      "WillySeahh": 76
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/parser/AddItemCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.parser.SplitterCliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.parser.SplitterCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.parser.SplitterCliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.AddItemCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.Item;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.ItemName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.ItemPrice;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * Parses input arguments and creates a new AddCommandItem object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class AddItemCommandParser implements Parser\u003cAddItemCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddItemCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * and returns an AddItemCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public AddItemCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ITEM, PREFIX_PRICE, PREFIX_NAME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddItemCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        ItemPrice price;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRICE).get().length() \u003e\u003d 5) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            throw new ParseException(String.format(\"Amount field\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            + \" cannot be more than 5 digits long. \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            + \" The maximum price of an item is 9999.\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                AddItemCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            price \u003d ParserUtil.parseItemPrice(argMultimap.getValue(PREFIX_PRICE).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            if (price.getItemPrice().compareTo(new BigDecimal(\"10000\")) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                throw new ParseException(String.format(\"Amount field\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                        + \" cannot be more than 10000. \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                        + \" The maximum price of an item is 10000\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                    AddItemCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            throw new ParseException(String.format(\"Amount field\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                    + \" does not require the \u0027$\u0027 sign and can only contain numerical digits. \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                    + \"Do enter `help` if you require further clarification.\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                AddItemCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ItemName itemName \u003d ParserUtil.parseItemName(argMultimap.getValue(PREFIX_ITEM).get());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ArrayList\u003cName\u003e names \u003d ParserUtil.parseNames(argMultimap.getAllValues(PREFIX_NAME));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Amount amountPerPerson \u003d ParserUtil.parseAmount(price, names.size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ArrayList\u003cPerson\u003e persons \u003d ParserUtil.parsePersons(names, amountPerPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Item item \u003d new Item(itemName, price, amountPerPerson);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return new AddItemCommand(item, persons, amountPerPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 8,
      "ailanthustng": 53,
      "WillySeahh": 30
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/parser/DeleteItemCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.DeleteItemCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Parses input arguments and creates a new DeleteItemCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class DeleteItemCommandParser implements Parser\u003cDeleteItemCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public DeleteItemCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return new DeleteItemCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteItemCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 29
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/parser/ExpenseSplitterParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.CommonParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.AddItemCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.BackCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.ClearReceiptCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.DeleteItemCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.DoneReceiptCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.ListAmountCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.ListReceiptCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.PaidCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.SplitterModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Parses user input for ExpenseSplitter."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class ExpenseSplitterParser implements CommonParser\u003cSplitterModel\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Command\u003cSplitterModel\u003e parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        switch(commandWord) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        case ListReceiptCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            return new ListReceiptCommand(); // No Args so no need to Parse."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        case BackCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            return new BackCommand(); // No Args so no need to Parse."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        case PaidCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            return new PaidCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        case AddItemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            return new AddItemCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        case DeleteItemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return new DeleteItemCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        case ListAmountCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return new ListAmountCommand(); // No Args so no need to Parse."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        case DoneReceiptCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return new DoneReceiptCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        case ClearReceiptCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return new ClearReceiptCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 47,
      "ailanthustng": 8,
      "WillySeahh": 21
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/parser/PaidCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.PaidCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Parses input arguments and creates a new PaidCommandItem object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class PaidCommandParser implements Parser\u003cPaidCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(?\u003d.*?\\\\d)^\\\\$?(([1-9]\\\\d{0,2}(,\\\\d{3})*)|\\\\d+)?(\\\\.\\\\d{1,2})?$\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * For Paid Command we maintained consistency because INDEX did not have a flag like \"-i\" or \"/i\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * similar to AB3. We decided not to have a flag for amount too."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Thus the entire command is consistent in a way that there is no flags."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public PaidCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Index indexOfPerson;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        String amountPaid;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        String[] helper \u003d args.trim().split(\" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            indexOfPerson \u003d ParserUtil.parseIndex(helper[0]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        } catch (ParseException ex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, PaidCommand.MESSAGE_USAGE), ex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            amountPaid \u003d helper[1];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        } catch (IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            amountPaid \u003d \"all\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        if (!amountPaid.matches(VALIDATION_REGEX) \u0026\u0026 !amountPaid.equals(\"all\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            throw new ParseException(PaidCommand.PROPER_AMOUNT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return new PaidCommand(indexOfPerson, amountPaid);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sheexiong": 2,
      "WillySeahh": 60
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.commons.util.CalculateUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.ItemName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.ItemPrice;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Parses a {@code String itemName} into a {@code ItemName}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @throws ParseException if the given {@code itemName} is invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static ItemName parseItemName(String itemName) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireNonNull(itemName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        String trimmedItemName \u003d itemName.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (!ItemName.isValidName(trimmedItemName)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            throw new ParseException(ItemName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return new ItemName(trimmedItemName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Parses a {@code String priceInString} into a {@code ItemPrice}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @throws ParseException if the given {@code priceInString} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static ItemPrice parseItemPrice(String priceInString) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireNonNull(priceInString);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        String trimmedPrice \u003d priceInString.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        BigDecimal bigDecimalPrice \u003d new BigDecimal(trimmedPrice);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (!ItemPrice.isValidPrice(bigDecimalPrice)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            throw new ParseException(ItemPrice.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return new ItemPrice(bigDecimalPrice);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Parses {@code ItemPrice price}, {@code int numPersons} into a {@code Amount}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @throws ParseException if the given {@code price}, {@code numPersons} is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static Amount parseAmount(ItemPrice price, int numPersons) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireAllNonNull(price, numPersons);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        BigDecimal bigDecimalNumPersons \u003d new BigDecimal(numPersons);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        BigDecimal itemPrice \u003d price.getItemPrice();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return CalculateUtil.calculatePricePerPerson(itemPrice, bigDecimalNumPersons);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        String lowercaseName \u003d trimmedName.toLowerCase();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (!Name.isValidName(lowercaseName)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return new Name(lowercaseName);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e names} into a {@code ArrayList\u003cName\u003e}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @throws ParseException if the given {@code Collection\u003cString\u003e names} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static ArrayList\u003cName\u003e parseNames(Collection\u003cString\u003e names) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireNonNull(names);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        final ArrayList\u003cName\u003e nameList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        for (String name : names) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            nameList.add(parseName(name));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return nameList;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Parses {@code ArrayList\u003cName\u003e names}, {@code ItemPrice price} into a {@code ArrayList\u003cPerson\u003e}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @throws ParseException if the given {@code ArrayList\u003cName\u003e names}, {@code ItemPrice price} is invalid."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static ArrayList\u003cPerson\u003e parsePersons(ArrayList\u003cName\u003e names, Amount amount) throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireNonNull(names);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        final ArrayList\u003cPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        for (Name name : names) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            persons.add(new Person(name, amount));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return persons;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Parses a {@code String priceInString} into a {@code ItemPrice}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @throws ParseException if the given {@code priceInString} is invalid."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static Integer parseIndexV2(String i) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireNonNull(i);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return Integer.valueOf(i);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 42,
      "ailanthustng": 85,
      "WillySeahh": 11
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/logic/parser/SplitterCliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class SplitterCliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final Prefix PREFIX_ITEM \u003d new Prefix(\"-i\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final Prefix PREFIX_PRICE \u003d new Prefix(\"-p\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"-n\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sheexiong": 15
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/PersonAmountBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.Item;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Entry;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Receipt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Wraps all data at the expense splitter level"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class PersonAmountBook implements ReadOnlyPersonAmountBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public PersonAmountBook() {}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Creates an PersonAmountBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public PersonAmountBook(ReadOnlyPersonAmountBook toBeCopied) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Resets the existing data of this {@code PersonAmountBook} with {@code newData}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void resetData(ReadOnlyPersonAmountBook newData) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the personAmountBook."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Adds a person to the person amount book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * The person must not already exist in the personAmountBook."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Person is duplicated so that a new Person is added instead of the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * existing Person in the Receipt."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Name name \u003d p.getName();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Amount amount \u003d p.getAmount();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        persons.add(new Person(name, amount));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Adds {@code amount} to the current amount of the {@code person}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void addAmount(Person person, Amount amount) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireAllNonNull(person, amount);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        persons.addAmount(person, amount);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Person getPerson(Person person) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return persons.getPerson(person);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Removes {@code key} from this {@code PersonAmountBook}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * {@code key} must exist in the personamount book."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Removes Amount from a Person"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @param person"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @param amount"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void removeAmount(Person person, Amount amount) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        persons.removeAmount(person, amount);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        This handles the deleting of Person when their amount is 0. Cannot use enhanced for loop because"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        that will throw java.ConcurrentException because you are editing the personList while you\u0027re doing enhanced"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        for loop."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.asUnmodifiableObservableList().size(); i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            if (persons.getPersonUsingIndex(i).getAmount().amount.doubleValue() \u003d\u003d 0.0) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                removePerson(getPersonByIndex(i));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * This method removes all the Entries from the Receipt, as well as removes the Amount owed by each Person"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param receipt"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void deleteAllEntries(Receipt receipt) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireNonNull(receipt);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        for (Entry entry : receipt.getReceipt()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            Item currItem \u003d entry.getItem();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            Amount amountPerPerson \u003d currItem.getAmountPerPerson();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            for (Person person : entry.getPersonsList()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                removeAmount(person, amountPerPerson);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        ObservableList\u003cPerson\u003e personsList \u003d persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        builder.append(\"Person : Amount\\n\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        for (Person person : personsList) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            int index \u003d personsList.indexOf(person) + 1;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            builder.append(\"    \")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    .append(index)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    .append(\". \")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    .append(person.getName())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                    .append(\" : \")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    .append(person.getAmount())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    .append(\"\\n\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                || (other instanceof PersonAmountBook // instanceof handles null"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                \u0026\u0026 persons.equals(((PersonAmountBook) other).persons));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Person getPersonByIndex(int indexOfPerson) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireNonNull(indexOfPerson);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return persons.getPersonUsingIndex(indexOfPerson);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 14,
      "ailanthustng": 42,
      "WillySeahh": 132
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/ReadOnlyPersonAmountBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Unmodifiable view of an personamount book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public interface ReadOnlyPersonAmountBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Returns an unmodifiable view of the PersonAmount list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * This list will not contain any duplicate Persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    Person getPersonByIndex(int indexOfPerson);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 18
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/ReadOnlyReceiptBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Receipt;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Unmodifiable view of an ReceiptBook book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public interface ReadOnlyReceiptBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns an unmodifiable view of the Receipt list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * This list will not contain any duplicate Receipt."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    ObservableList\u003cReceipt\u003e getReceiptList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Check if the list contain at least a receipt."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @return true if contain at least a receipt, otherwise false."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    boolean isContainSingleReceipt();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 23
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/ReceiptBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Receipt;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.UniqueReceiptList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Wraps all data at the receipt level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Duplicates are not allowed (by .isSameReceipt comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class ReceiptBook implements ReadOnlyReceiptBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final UniqueReceiptList receipts;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        receipts \u003d new UniqueReceiptList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public ReceiptBook() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public ReceiptBook(ReadOnlyReceiptBook toBeCopied) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Replaces the contents of the receipt list with {@code receipts}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * {@code receipts} must not contain duplicate receipts."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void setReceipts(List\u003cReceipt\u003e receipts) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.receipts.setReceipts(receipts);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Resets the existing data of this {@code ReceiptBook} with {@code newData}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void resetData(ReadOnlyReceiptBook newData) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        setReceipts(newData.getReceiptList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    // receipt-level operations"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns true if a receipt with the same identity as {@code receipt} exists in the receipt book."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public boolean hasReceipt(Receipt receipt) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(receipt);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return receipts.contains(receipt);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Adds a receipt to the receipt book."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * The receipt must not already exist in the receipt book."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void addReceipt(Receipt r) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        receipts.add(r);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public ObservableList\u003cReceipt\u003e getReceiptList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return receipts.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public boolean isContainSingleReceipt() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return receipts.isContainSingleReceipt();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                || (other instanceof ReceiptBook // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                \u0026\u0026 receipts.equals(((ReceiptBook) other).receipts));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 82
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/SplitterModel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Entry;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Receipt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public interface SplitterModel extends Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Returns the user prefs\u0027 food book file path."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    Path getPersonAmountBookFilePath();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Sets the user prefs\u0027 person amount bookfile path."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    void setPersonAmountBookFilePath(Path personAmountBookFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Adds an entry to the receipt."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param entry consists of an Item and ArrayList of Person sharing the cost of the item."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    void addEntry(Entry entry);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Removes an entry from the receipt via the index."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param index Index of the entry to be removed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    void deleteEntry(int index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    Entry getEntry(int index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /** Returns the PersonAmountBook */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    ReadOnlyPersonAmountBook getPersonAmountBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /** Returns the ReceiptBook */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    ReadOnlyReceiptBook getReceiptBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Updates the amount the Person owes you. If amount is $0 then the Person is deleted."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    void paidPerson(Person person, String amountPaid);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Command for listing all person with their amount."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    String listAmount();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Command for listing all items in that receipt."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    String listReceipt();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    boolean isReceiptDone();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    Receipt getReceipt();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    void clearReceipt();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Returns true if a person with the same identity as"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * {@code person} exists in the person amount book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    Person getPerson(Person person);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    void addAmount(Person person, Amount amount);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    void removeAmount(Person person, Amount amount);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    void deleteAllEntries();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sheexiong": 17,
      "ailanthustng": 28,
      "WillySeahh": 54
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/SplitterModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Entry;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Receipt;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class SplitterModelManager implements SplitterModel {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(SplitterModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private final Receipt receipt;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private final PersonAmountBook personAmountBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final ReceiptBook receiptBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Initializes a ModelManager with a new Receipt (and data from existing storage)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public SplitterModelManager(ReadOnlyReceiptBook receiptBook, ReadOnlyPersonAmountBook personAmountBook,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                                ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        logger.fine(\"Initializing receipt and data from existing storage\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.personAmountBook \u003d new PersonAmountBook(personAmountBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.receiptBook \u003d new ReceiptBook(receiptBook);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.personAmountBook.getPersonList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (receiptBook.isContainSingleReceipt()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            this.receipt \u003d this.receiptBook.getReceiptList().get(0); // current only have 1 receipt in receipt book."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            this.receipt \u003d new Receipt();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            this.receiptBook.addReceipt(this.receipt);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public SplitterModelManager() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this(new ReceiptBook(), new PersonAmountBook(), new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Receipt \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public ReadOnlyReceiptBook getReceiptBook() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return receiptBook;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Adds an entry to the receipt."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param entry consists of an Item and ArrayList of Person sharing the cost of the item."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        receipt.addEntry(entry);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Removes an entry from the receipt via the index."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param index Index of the entry to be removed."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void deleteEntry(int index) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        receipt.deleteEntry(index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Entry getEntry(int index) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return receipt.getEntry(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void deleteAllEntries() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        personAmountBook.deleteAllEntries(receipt);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Command for listing the Receipt."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public String listReceipt() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return receipt.toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Command for listing all person with their amount."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public String listAmount() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return personAmountBook.toString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * This method is used to subtract the {@code amountPaid} from the current amount owed from the {@code person}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void paidPerson(Person person, String amountPaid) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireAllNonNull(person, amountPaid);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Amount amount \u003d new Amount(new BigDecimal(amountPaid));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        personAmountBook.removeAmount(person, amount);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Checks if the current receipt is marked as completed."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public boolean isReceiptDone() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return this.receipt.isDone();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Receipt getReceipt() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return this.receipt;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Clears the receipt by making a new ArrayList of Entry."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void clearReceipt() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        receipt.clearReceipt();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PersonAmountBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void setPersonAmountBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireAllNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        userPrefs.setPersonAmountBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Path getPersonAmountBookFilePath() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return userPrefs.getPersonAmountBookFilePath();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public ReadOnlyPersonAmountBook getPersonAmountBook() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return personAmountBook;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Returns true if a person with the same identity as"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * {@code person} exists in the person amount book."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return personAmountBook.hasPerson(person);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        personAmountBook.addPerson(person);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Person getPerson(Person person) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return personAmountBook.getPerson(person);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void addAmount(Person person, Amount amount) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireAllNonNull(person, amount);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        personAmountBook.addAmount(person, amount);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void removeAmount(Person person, Amount amount) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireAllNonNull(person, amount);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        personAmountBook.removeAmount(person, amount);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (!(obj instanceof SplitterModelManager)) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        SplitterModelManager other \u003d (SplitterModelManager) obj;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return receipt.equals(other.receipt);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 45,
      "ailanthustng": 154,
      "WillySeahh": 42
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/item/Item.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.expensesplitter.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Represents an Item in the Expense Splitter of EYLAH."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Guarantees: details are present and not null."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class Item {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private final ItemName name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private final ItemPrice price;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private final Amount amountPerPerson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Every field must be present,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * ItemName and ItemPrice fields must not be null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @param name,price represents the compulsory fields of an Item object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Item(ItemName name, ItemPrice price, Amount amountPerPerson) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireAllNonNull(name, price);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.amountPerPerson \u003d amountPerPerson;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Returns the ItemName of an Item."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @return the ItemName of an Item."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ItemName getItemName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Returns the ItemPrice of an Item."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @return the ItemPrice of an Item."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ItemPrice getItemPrice() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Amount getAmountPerPerson() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return amountPerPerson;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Returns true if both Items of the same name have the same price."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * This defines a weaker notion of equality between two food."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @param otherItem the other Item we are comparing with."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public boolean isSameItem(Item otherItem) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        if (otherItem \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return otherItem !\u003d null"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                \u0026\u0026 otherItem.getItemName().equals(getItemName())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                \u0026\u0026 otherItem.getItemPrice().equals(getItemPrice());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        if (!(other instanceof Item)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Item otherItem \u003d (Item) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return otherItem.getItemName().equals(getItemName())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                \u0026\u0026 otherItem.getItemPrice().equals(getItemPrice());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return Objects.hash(name, price);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        String formattedItemName \u003d getItemName().toString().substring(0, 1).toUpperCase()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                + getItemName().toString().substring(1).toLowerCase();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        builder.append(formattedItemName)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                .append(\" | Price: \")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                .append(getItemPrice());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 13,
      "akhilvuputuri": 2,
      "WillySeahh": 93
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/item/ItemName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.expensesplitter.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Represents a Item\u0027s name in ExpenseSplitter of EYLAH."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class ItemName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            \"ItemName should only contain alphanumeric characters and spaces, and it should not be blank.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public final String itemName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ItemName(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.itemName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @param test whether a name is valid or not."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return itemName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Checks if two Items have the same ItemName."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @param other ItemName to be checked against."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @return True if two of the Items have the same ItemName, False otherwise."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                || (other instanceof ItemName // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                \u0026\u0026 itemName.equals(((ItemName) other).itemName)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return itemName.hashCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public String getItemName() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return this.itemName;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "WillySeahh": 71
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/item/ItemPrice.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.expensesplitter.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.text.NumberFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Represents an Item\u0027s price in Expense Splitter of EYLAH."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPrice(BigDecimal)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Additional Notes:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " *     Initially I coded ItemPrice using Double to represent the dollar amount. However when coding out the tests and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " *     doing further research online, using Double will lead to rounding errors and many credible sources"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " *     have recommended against"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " *     using Double to represent currency. Thus I have decided to replace Double with BigDecimal."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " *     I obtained this Regex expression from this link:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " *     https://stackoverflow.com/questions/16242449/regex-currency-validation"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " *     As per discussed in the meeting, we are using flags to split it so the Scanner input takes in a String."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " *     To make String to BigDecimal is new BigDecimal(\"123.12\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " *     Big Decimal can also make use of Rounding to solve cases of $1.6667777, which should be rounded to $1.67"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " *     Another issue I found out is new BigDecimal(\"19.90\") (takes in a string is correct), but if it"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " *     new BigDecimal(19.90) (takes in a double) then is wrong. it shows 19.89999999... Perhaps this is due to how"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " *     the class is defined. We should restrict it to taking in a string only."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class ItemPrice {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            \"Price should be greater than $0\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(?\u003d.*?\\\\d)^\\\\$?(([1-9]\\\\d{0,2}(,\\\\d{3})*)|\\\\d+)?(\\\\.\\\\d{1,2})?$\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public final BigDecimal itemPrice;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Constructs a {@code ItemPrice}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @param price A valid price"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ItemPrice(BigDecimal price) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        checkArgument(isValidPrice(price), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.itemPrice \u003d price;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Returns the itemPrice as a BigDecimal object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @return the itemPrice as a BigDecimal object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public BigDecimal getItemPrice() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return this.itemPrice;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Returns true if a given price is a valid price."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @param test if an ItemPrice is \u003e 0 because ItemPrice cannot be \u003c\u003d 0 and can only contain digit."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static boolean isValidPrice(BigDecimal test) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return test.compareTo(BigDecimal.ZERO) \u003e 0 \u0026\u0026 test.toString().matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        BigDecimal display \u003d itemPrice.setScale(3, RoundingMode.HALF_EVEN);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        NumberFormat usdCostFormat \u003d NumberFormat.getCurrencyInstance(Locale.US);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        usdCostFormat.setMinimumFractionDigits(1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        usdCostFormat.setMaximumFractionDigits(2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        usdCostFormat.setMinimumFractionDigits(2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return usdCostFormat.format(display.doubleValue());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Checks if two Items have the same ItemPrice."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @param other ItemPrice to be checked against."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @return True if two of the Items have the same ItemPrice, False otherwise."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                || (other instanceof ItemPrice // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                \u0026\u0026 itemPrice.equals(((ItemPrice) other).itemPrice)); // state check"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return itemPrice.hashCode();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 18,
      "akhilvuputuri": 2,
      "WillySeahh": 82
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/person/Amount.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.text.NumberFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Represents a Person\u0027s amount in Expense Splitter in EYLAH."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAmount(BigDecimal)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class Amount {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            \"Amount should only contains numerical characters and decimal separator.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // @@author Gary-reused"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Solution below adapted from https://stackoverflow.com/questions/16242449"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Price can either be 9 or 9.0 or 9.00 It can only accept a max of 2 decimal place."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(?\u003d.*?\\\\d)^\\\\$?(([1-9]\\\\d{0,2}(,\\\\d{3})*)|\\\\d+)?(\\\\.\\\\d{1,2})?$\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final BigDecimal amount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Amount}/"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param amount A valid amount"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Amount(BigDecimal amount) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAmount(amount), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Return true if a given amount is a valid amount."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param test given amount"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return True if given amount is valid, False otherwise."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAmount(BigDecimal test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.toString().matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        BigDecimal display \u003d amount.setScale(3, RoundingMode.HALF_EVEN);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        NumberFormat usdCostFormat \u003d NumberFormat.getCurrencyInstance(Locale.US);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        usdCostFormat.setMinimumFractionDigits(1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        usdCostFormat.setMaximumFractionDigits(2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        usdCostFormat.setMinimumFractionDigits(2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return usdCostFormat.format(display.doubleValue());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if two Amount have the same amount."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param other Amount to be checked against."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return True if two of the Amount have the same amount, False otherwise."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Amount // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 amount.compareTo(((Amount) other).amount) \u003d\u003d 0); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return amount.hashCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public BigDecimal getBigDecimal() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.amount;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 16,
      "ailanthustng": 3,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/person/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 2,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/person/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.commons.util.CalculateUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Person(Name name, Amount amount) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return otherPerson.getName().equals(getName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                .append(\" owes: \")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                .append(getAmount());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Adds {@code amount} to the current amount."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void addAmount(Amount amount) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        BigDecimal currAmount \u003d this.amount.getBigDecimal();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        BigDecimal amountToBeAdded \u003d amount.getBigDecimal();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.amount \u003d CalculateUtil.addAmount(currAmount, amountToBeAdded);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Removes {@code amount} from the current amount."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void removeAmount(Amount amount) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        BigDecimal currAmount \u003d this.amount.getBigDecimal();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        BigDecimal amountToBeRemoved \u003d amount.getBigDecimal();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.amount \u003d CalculateUtil.removeAmount(currAmount, amountToBeRemoved);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 73,
      "ailanthustng": 26,
      "WillySeahh": 3
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/person/UniquePersonList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Adds {@code amount} to the current amount of {@code person};"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void addAmount(Person person, Amount amount) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireAllNonNull(person, amount);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        int index \u003d internalList.indexOf(person);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Person currPerson \u003d internalList.get(index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        currPerson.addAmount(amount);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Removes {@code amount} from the current amount."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void removeAmount(Person person, Amount amount) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireAllNonNull(person, amount);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        int index \u003d internalList.indexOf(person);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Person currPerson \u003d internalList.get(index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        currPerson.removeAmount(amount);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Person getPerson(Person person) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        int index \u003d internalList.indexOf(person);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Person getPersonUsingIndex(int indexOfPerson) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Person p \u003d internalList.get(indexOfPerson); // I minused 1 when i parsed so dont minus again"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return p;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 37,
      "WillySeahh": 6,
      "-": 133
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/person/exceptions/DuplicatePersonException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/person/exceptions/PersonNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/receipt/Entry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.model.receipt;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * Represents an Entry class, which is to be added to into a Receipt class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * Guarantees: details are present and not nul."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class Entry {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private Item item;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private ArrayList\u003cPerson\u003e persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Every field must be present."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Item and array of String must not be null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param item,persons Represents the compulsory fields of an Entry object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Entry(Item item, ArrayList\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        requireAllNonNull(item, persons);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.persons \u003d persons;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Returns the item in the Entry."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @return the item."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Item getItem() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return this.item;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Returns the ArrayList of Persons associated with the Item."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @return the ArrayList of Persons associated with the Item."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public ArrayList\u003cPerson\u003e getPersonsList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return this.persons;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (!(other instanceof Entry)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Entry otherItem \u003d (Entry) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return otherItem.getItem().equals(getItem())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                \u0026\u0026 otherItem.getPersonsList().equals(getPersonsList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return Objects.hash(item, persons);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        final StringBuilder personsFormatted \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size(); i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            if (i !\u003d persons.size() - 1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                personsFormatted.append(persons.get(i))"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                        .append(\", \");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            } else { //last person in list"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                personsFormatted.append(persons.get(i));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return \"Item: \" + item + \" | \" + personsFormatted.toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 1,
      "ailanthustng": 82,
      "WillySeahh": 1
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/receipt/Receipt.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.model.receipt;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * Represents a Receipt class in the ExpenseSplitter of EYLAH."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class Receipt {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private ArrayList\u003cEntry\u003e receipt;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Initialises a Receipt object with an ArrayList to contain Entries."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Initialised as undone."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Receipt() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.receipt \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Every field must be present."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Array of Entry and isDone must not be null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Receipt(ArrayList\u003cEntry\u003e receipt, boolean isDone) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.receipt \u003d receipt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Adds an Entry to the receipt."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param entry Entry to be added."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.receipt.add(entry);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Deletes an Entry from the receipt via its index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @param index Index of Entry to be deleted."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void deleteEntry(int index) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        receipt.remove(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Entry getEntry(int index) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return this.receipt.get(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void makeDone() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void makeUndone() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Clears the receipt by making a new ArrayList of Entry."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void clearReceipt() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.receipt \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Returns the ArrayList of Entries."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * @return the ArrayList of Entries."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public ArrayList\u003cEntry\u003e getReceipt() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return this.receipt;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public boolean isSameReceipt(Receipt otherReceipt) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (otherReceipt \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return otherReceipt !\u003d null"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                \u0026\u0026 otherReceipt.getReceipt().equals(getReceipt());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        if (!(other instanceof Receipt)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Receipt otherItem \u003d (Receipt) other;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //return otherItem.getReceipt().equals(getReceipt());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        The above .equals() method do not work because you are using the inherent AL .equals() method."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        A Receipt should be equal if the Entries all are equals, but if you are using the inherent .equals()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        method then it won\u0027t work."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        for (int i \u003d 0; i \u003c getReceipt().size(); i++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            if (getReceipt().get(i).equals(otherItem.receipt.get(i))) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return Objects.hash(receipt);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        int indexToBeDisplayed \u003d 1;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        builder.append(\"Receipt:\\n\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        for (Entry entry : receipt) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            builder.append(\"    \")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                    .append(indexToBeDisplayed)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                    .append(\". \")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                    .append(entry.toString())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                    .append(\"\\n\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            indexToBeDisplayed++;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    //for testing purposes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public boolean hasEntry(Entry entry) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return receipt.contains(entry);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 26,
      "ailanthustng": 108,
      "WillySeahh": 18
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/receipt/UniqueReceiptList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.model.receipt;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.exceptions.DuplicateReceiptException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.exceptions.ReceiptNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * @see Receipt#isSameReceipt(Receipt)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class UniqueReceiptList implements Iterable\u003cReceipt\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final ObservableList\u003cReceipt\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final ObservableList\u003cReceipt\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public boolean contains(Receipt toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameReceipt);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void add(Receipt toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new DuplicateReceiptException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void remove(Receipt toRemove) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new ReceiptNotFoundException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void setReceipts(UniqueReceiptList replacement) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void setReceipts(List\u003cReceipt\u003e receipts) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireAllNonNull(receipts);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (!receiptsAreUnique(receipts)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new DuplicateReceiptException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        internalList.setAll(receipts);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns true if {@code persons} contains only unique receipts."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private boolean receiptsAreUnique(List\u003cReceipt\u003e receipts) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        for (int i \u003d 0; i \u003c receipts.size() - 1; i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            for (int j \u003d i + 1; j \u003c receipts.size(); j++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                if (receipts.get(i).isSameReceipt(receipts.get(j))) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public ObservableList\u003cReceipt\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Check if the list contain at least a receipt."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @return true if contain at least a receipt, otherwise false."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public boolean isContainSingleReceipt() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return internalList.size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Get the receipt in the internal list based on the given receipt."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param receipt the given receipt."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @return the receipt in the internal list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Receipt getReceipt(Receipt receipt) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        int index \u003d internalList.indexOf(receipt);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Iterator\u003cReceipt\u003e iterator() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                || (other instanceof UniqueReceiptList // instanceof handles nulls"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueReceiptList) other).internalList));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 140
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/receipt/exceptions/DuplicateReceiptException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.model.receipt.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Signals that the operation will result in duplicate Receipt (Receipt are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class DuplicateReceiptException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public DuplicateReceiptException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        super(\"Operation would result in duplicate receipts\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 12
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/receipt/exceptions/ReceiptNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.model.receipt.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Signals that the operation is unable to find the specified receipt."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class ReceiptNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 7
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/util/SamplePersonAmountDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.PersonAmountBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyPersonAmountBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Contains utility methods for populating {@code PersonAmount} with sample data."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class SamplePersonAmountDataUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            new Person(new Name(\"Willy\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                new Amount(new BigDecimal(\"3.30\"))),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            new Person(new Name(\"Shi\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                new Amount(new BigDecimal(\"34.30\"))),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            new Person(new Name(\"Ailan\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                new Amount(new BigDecimal(\"60.70\"))),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            new Person(new Name(\"Alice\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                new Amount(new BigDecimal(\"100.10\"))),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            new Person(new Name(\"Bob\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                new Amount(new BigDecimal(\"35.20\"))),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            new Person(new Name(\"Carl\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                new Amount(new BigDecimal(\"12.12\"))),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        };"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static ReadOnlyPersonAmountBook getSamplePersonAmountBook() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        PersonAmountBook sampleAb \u003d new PersonAmountBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        for (seedu.eylah.expensesplitter.model.person.Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 41
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/model/util/SampleReceiptDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyReceiptBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReceiptBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.ItemName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.ItemPrice;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Entry;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Receipt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Contains utility methods for populating {@code Receipt} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class SampleReceiptDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static Receipt[] getSampleReceipt() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        ArrayList\u003cEntry\u003e entries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        ArrayList\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        personList.add(new Person(new Name(\"Willy\"), new Amount(new BigDecimal(\"3\"))));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        personList.add(new Person(new Name(\"Shi\"), new Amount(new BigDecimal(\"3\"))));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        personList.add(new Person(new Name(\"Ailan\"), new Amount(new BigDecimal(\"3\"))));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        entries.add(new Entry(new Item(new ItemName(\"pasta\"), new ItemPrice(new BigDecimal(\"9.0\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                new Amount(new BigDecimal(\"3\"))), personList));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        entries.add(new Entry(new Item(new ItemName(\"cheese fries\"), new ItemPrice(new BigDecimal(\"9.0\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                new Amount(new BigDecimal(\"3\"))), personList));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return new Receipt[] { new Receipt(entries, false) };"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static ReadOnlyReceiptBook getSampleReceiptBook() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        ReceiptBook sampleRb \u003d new ReceiptBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        for (Receipt sampleReceipt : getSampleReceipt()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            sampleRb.addReceipt(sampleReceipt);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return sampleRb;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 43
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/storage/JsonAdaptedEntry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Entry;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Jackson-friendly version of {@link Entry}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class JsonAdaptedEntry {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final JsonAdaptedItem item;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Constructs a {@code JsonAdaptedEntry} with the given entry details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public JsonAdaptedEntry(@JsonProperty(\"item\") JsonAdaptedItem item,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            @JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (persons !\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Converts a given {@code Entry} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public JsonAdaptedEntry(Entry source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        item \u003d new JsonAdaptedItem(source.getItem());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        persons.addAll(source.getPersonsList().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Converts this Jackson-friendly adapted entry object into the model\u0027s {@code Entry} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Entry toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        final ArrayList\u003cPerson\u003e modelPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        for (JsonAdaptedPerson person : persons) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            modelPersons.add(person.toModelType());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        Item modelItem \u003d item.toModelType();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return new Entry(modelItem, modelPersons);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 60
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/storage/JsonAdaptedItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.Item;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.ItemName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.ItemPrice;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Jackson-friendly version of {@link Item}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class JsonAdaptedItem {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Item\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final String itemName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final BigDecimal itemPrice;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final BigDecimal amountPerPerson;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Constructs a {@code JsonAdaptedItem} with the given item details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public JsonAdaptedItem(@JsonProperty(\"itemName\") String itemName, @JsonProperty(\"itemPrice\") BigDecimal itemPrice,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            @JsonProperty(\"amountPerPerson\") BigDecimal amountPerPerson) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.itemName \u003d itemName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.itemPrice \u003d itemPrice;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.amountPerPerson \u003d amountPerPerson;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Converts a given {@code Item} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public JsonAdaptedItem(Item source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        itemName \u003d source.getItemName().getItemName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        itemPrice \u003d source.getItemPrice().getItemPrice();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        amountPerPerson \u003d source.getAmountPerPerson().amount;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Converts this Jackson-friendly adapted item object into the model\u0027s {@code Item} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted item."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Item toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (itemName \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    ItemName.class.getSimpleName()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (!ItemName.isValidName(itemName)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new IllegalValueException(ItemName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        final ItemName modelItemName \u003d new ItemName(itemName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (itemPrice \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                    ItemPrice.class.getSimpleName()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (!ItemPrice.isValidPrice(itemPrice)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new IllegalValueException(ItemPrice.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        final ItemPrice modelItemPrice \u003d new ItemPrice(itemPrice);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (amountPerPerson \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (!Amount.isValidAmount(amountPerPerson)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        final Amount modelAmountPerPerson \u003d new Amount(amountPerPerson);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return new Item(modelItemName, modelItemPrice, modelAmountPerPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 78,
      "WillySeahh": 2
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/storage/JsonAdaptedPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final BigDecimal amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"amount\") BigDecimal amount) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        amount \u003d source.getAmount().amount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (amount \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (!Amount.isValidAmount(amount)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        final Amount modelAmount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return new Person(modelName, modelAmount);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 16,
      "WillySeahh": 53
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/storage/JsonAdaptedReceipt.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Entry;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Receipt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Jackson-friendly version of {@link Receipt}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class JsonAdaptedReceipt {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final List\u003cJsonAdaptedEntry\u003e entries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final boolean isDone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Constructs a {@code JsonAdaptedReceipt} with the given entries details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public JsonAdaptedReceipt(@JsonProperty(\"entries\") List\u003cJsonAdaptedEntry\u003e entries,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            @JsonProperty(\"isDone\") boolean isDone) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (entries !\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            this.entries.addAll(entries);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Converts a given {@code Receipt} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public JsonAdaptedReceipt(Receipt source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        entries.addAll(source.getReceipt().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                .map(JsonAdaptedEntry::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.isDone \u003d source.isDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Converts this Jackson-friendly adapted receipt object into the model\u0027s {@code Receipt} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Receipt toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        final ArrayList\u003cEntry\u003e modelEntries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        for (JsonAdaptedEntry entry : entries) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            modelEntries.add(entry.toModelType());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        final boolean modelIsDone \u003d isDone;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return new Receipt(modelEntries, modelIsDone);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 59
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/storage/JsonPersonAmountBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyPersonAmountBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * A class to access PersonAmountBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class JsonPersonAmountBookStorage implements PersonAmountStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPersonAmountBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public JsonPersonAmountBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Path getPersonAmountBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Optional\u003cReadOnlyPersonAmountBook\u003e readPersonAmountBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return readPersonAmountBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Similar to {@link #readPersonAmountBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Optional\u003cReadOnlyPersonAmountBook\u003e readPersonAmountBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Optional\u003cJsonSerializablePersonAmountBook\u003e jsonPersonAmountBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                filePath, JsonSerializablePersonAmountBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        if (!jsonPersonAmountBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            return Optional.of(jsonPersonAmountBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void savePersonAmountBook(ReadOnlyPersonAmountBook personAmountBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        savePersonAmountBook(personAmountBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Saves a person amount book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @param personAmountBook"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @param filePath location of data cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void savePersonAmountBook(ReadOnlyPersonAmountBook personAmountBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireNonNull(personAmountBook);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializablePersonAmountBook(personAmountBook), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 87
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/storage/JsonReceiptBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyReceiptBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * A class to access ReceiptBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class JsonReceiptBookStorage implements ReceiptStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonReceiptBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public JsonReceiptBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Path getReceiptBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Optional\u003cReadOnlyReceiptBook\u003e readReceiptBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return readReceiptBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Similar to {@link #readReceiptBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Optional\u003cReadOnlyReceiptBook\u003e readReceiptBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        Optional\u003cJsonSerializableReceiptBook\u003e jsonReceiptBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                filePath, JsonSerializableReceiptBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        if (!jsonReceiptBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            return Optional.of(jsonReceiptBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void saveReceiptBook(ReadOnlyReceiptBook receiptBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        saveReceiptBook(receiptBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Saves a receipt book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param receiptBook ReadOnlyReceiptBook"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param filePath location of data cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void saveReceiptBook(ReadOnlyReceiptBook receiptBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(receiptBook);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableReceiptBook(receiptBook), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 81
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/storage/JsonSerializablePersonAmountBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.PersonAmountBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyPersonAmountBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * An Immutable PersonAmountBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "@JsonRootName(value \u003d \"personamountbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class JsonSerializablePersonAmountBook {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Constructs a {@code JsonSerializablePersonAmountBook} with the given persons."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public JsonSerializablePersonAmountBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Converts a given {@code ReadOnlyPersonAmountBook} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializablePersonAmountBook}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public JsonSerializablePersonAmountBook(ReadOnlyPersonAmountBook source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Converts this person amount book into the model\u0027s {@code PersonAmountBook} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public PersonAmountBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        PersonAmountBook personAmountBook \u003d new PersonAmountBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            if (personAmountBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            personAmountBook.addPerson(person);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return personAmountBook;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 63
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/storage/JsonSerializableReceiptBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyReceiptBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReceiptBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Receipt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * An Immutable ReceiptBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "@JsonRootName(value \u003d \"receiptbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class JsonSerializableReceiptBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECEIPT \u003d \"Receipt list contains duplicate receipt(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private final List\u003cJsonAdaptedReceipt\u003e receipts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Constructs a {@code JsonSerializableReceiptBook} with the given receipt."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public JsonSerializableReceiptBook(@JsonProperty(\"receipts\") List\u003cJsonAdaptedReceipt\u003e receipts) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.receipts.addAll(receipts);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Converts a given {@code ReadOnlyReceiptBook} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public JsonSerializableReceiptBook(ReadOnlyReceiptBook source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        receipts.addAll(source.getReceiptList().stream().map(JsonAdaptedReceipt::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Converts this receipt book into the model\u0027s {@code Receipt} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public ReceiptBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        ReceiptBook receiptBook \u003d new ReceiptBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        for (JsonAdaptedReceipt jsonAdaptedReceipt : receipts) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            Receipt receipt \u003d jsonAdaptedReceipt.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            if (receiptBook.hasReceipt(receipt)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_RECEIPT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            receiptBook.addReceipt(receipt);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return receiptBook;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 62
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/storage/PersonAmountStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyPersonAmountBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Represents a storage for {here should put link to receipt!!!}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public interface PersonAmountStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    Path getPersonAmountBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Returns PersonAmountBook data as a {@link ReadOnlyPersonAmountBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    Optional\u003cReadOnlyPersonAmountBook\u003e readPersonAmountBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @see @getPersonAmountBookPath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    Optional\u003cReadOnlyPersonAmountBook\u003e readPersonAmountBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Saves the given {@link ReadOnlyPersonAmountBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @param personAmountBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    void savePersonAmountBook(ReadOnlyPersonAmountBook personAmountBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @see @savePersonAmountBook(ReadOnlyPersonAmountBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    void savePersonAmountBook(ReadOnlyPersonAmountBook personAmountBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 28,
      "WillySeahh": 17
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/storage/ReceiptStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyReceiptBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Represents a storage for {here should put link to receipt!!!}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public interface ReceiptStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    Path getReceiptBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Returns ReceiptBook data as a {@link ReadOnlyReceiptBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    Optional\u003cReadOnlyReceiptBook\u003e readReceiptBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @see @getReceiptBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    Optional\u003cReadOnlyReceiptBook\u003e readReceiptBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Saves the given {@link ReadOnlyReceiptBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param receiptBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    void saveReceiptBook(ReadOnlyReceiptBook receiptBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @see @saveReceiptBook(ReadOnlyReceiptBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    void saveReceiptBook(ReadOnlyReceiptBook receiptBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 45
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/storage/SplitterStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyPersonAmountBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyReceiptBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * API of the Storage component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public interface SplitterStorage extends PersonAmountStorage, ReceiptStorage, Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    Path getPersonAmountBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    Optional\u003cReadOnlyPersonAmountBook\u003e readPersonAmountBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    void savePersonAmountBook(ReadOnlyPersonAmountBook personAmountBook) throws IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    Path getReceiptBookFilePath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    Optional\u003cReadOnlyReceiptBook\u003e readReceiptBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    void saveReceiptBook(ReadOnlyReceiptBook receiptBook) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 11,
      "WillySeahh": 23
    }
  },
  {
    "path": "src/main/java/seedu/eylah/expensesplitter/storage/SplitterStorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyPersonAmountBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyReceiptBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * Manages storage of PersonAmountBook and Receipt data in local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class SplitterStorageManager implements SplitterStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(SplitterStorageManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private PersonAmountStorage personAmountStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private ReceiptStorage receiptStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public SplitterStorageManager(PersonAmountStorage personAmountStorage, ReceiptStorage receiptStorage,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.personAmountStorage \u003d personAmountStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.receiptStorage \u003d receiptStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PersonAmount Storage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Path getPersonAmountBookFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return personAmountStorage.getPersonAmountBookFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Optional\u003cReadOnlyPersonAmountBook\u003e readPersonAmountBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return readPersonAmountBook(personAmountStorage.getPersonAmountBookFilePath());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Optional\u003cReadOnlyPersonAmountBook\u003e readPersonAmountBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return personAmountStorage.readPersonAmountBook(filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void savePersonAmountBook(ReadOnlyPersonAmountBook personAmountBook) throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        savePersonAmountBook(personAmountBook, personAmountStorage.getPersonAmountBookFilePath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void savePersonAmountBook(ReadOnlyPersonAmountBook personAmountBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        personAmountStorage.savePersonAmountBook(personAmountBook, filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Receipt Storage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Path getReceiptBookFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return receiptStorage.getReceiptBookFilePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Optional\u003cReadOnlyReceiptBook\u003e readReceiptBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return readReceiptBook(receiptStorage.getReceiptBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Optional\u003cReadOnlyReceiptBook\u003e readReceiptBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return receiptStorage.readReceiptBook(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void saveReceiptBook(ReadOnlyReceiptBook receiptBook) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        saveReceiptBook(receiptBook, receiptStorage.getReceiptBookFilePath());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void saveReceiptBook(ReadOnlyReceiptBook receiptBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        receiptStorage.saveReceiptBook(receiptBook, filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 58,
      "WillySeahh": 53
    }
  },
  {
    "path": "src/main/java/seedu/eylah/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.model.Mode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * API of UI component."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Shows the welcome message, logo, and the main command to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    void showWelcome();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Reads the userInput from the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @return the given user input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    String readCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Shows the result of the command to user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    void showResult(CommandResult commandResult);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Shows the logo of EYLAH to user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    void showLogo();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Shows current mode of the EYLAH to user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    void showMode(Mode mode);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Shows the exit message to user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    void showExit();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Shows the error message to user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    void showError(String error);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Shows the main menu help message to user."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    void showMainHelp();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 53
    }
  },
  {
    "path": "src/main/java/seedu/eylah/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.model.Mode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final String WELCOME_MESSAGE \u003d \"Welcome to EYLAH\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final String LOGO \u003d \"          _____                    _____            \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"         |       \\\\     /  |       |     |  |     | \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"         |        \\\\   /   |       |     |  |     | \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"         |_____    \\\\ /    |       |_____|  |_____| \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"         |          |     |       |     |  |     |  \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"         |_____     |     |_____  |     |  |     |  \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final String SEPARATOR \u003d \"_____________________________________________________________\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final String USAGE \u003d \"Enter command to choose the mode.\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final String NAV_LIST \u003d \"Content Page: \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"----------------\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"Enter Diet Tracker: diet or 1\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"Enter Expense Splitter: split or 2\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"Getting Help: help\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"Exit EYLAH: exit\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"----------------\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final String READ_COMMAND \u003d \"Enter command: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final String EXIT_MESSAGE \u003d \"Bye! See you next time :)\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final String MODE_MESSAGE \u003d \"Currently at %s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final String MAIN_HELP_SEPARATOR \u003d \"--------------------------------\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final String MAIN_HELP \u003d \"Welcome to EYLAH! The following commands are available:\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + MAIN_HELP_SEPARATOR"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"1. diet or 1 - Use this to enter Diet Tracker mode.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"   USAGE: diet/1\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"   EXAMPLE: diet\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"   EXAMPLE: 1\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + MAIN_HELP_SEPARATOR"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"2. split or 2 - Use this to enter Expense Splitter mode.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"   USAGE: split/2\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"   EXAMPLE: split\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"   EXAMPLE: 2\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + MAIN_HELP_SEPARATOR"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"3. exit - Use this to exit the EYLAH.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"   USAGE: exit\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"   EXAMPLE: exit\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            + \"We hope you enjoy your usage of EYLAH!\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /** A platform independent line separator. */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final String LS \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public UiManager() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Converts the given strings to the desired format."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @param messages the given string to format"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private void showToUser(String... messages) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        for (String m : messages) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            System.out.println(m.replace(\"\\n\", LS));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        showToUser(SEPARATOR, USAGE, NAV_LIST);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void showLogo() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        showToUser(SEPARATOR, LOGO, SEPARATOR, WELCOME_MESSAGE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void showMode(Mode mode) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        showToUser(SEPARATOR, String.format(MODE_MESSAGE, mode.toString()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        showToUser(READ_COMMAND);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void showError(String error) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        showToUser(error);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void showResult(CommandResult commandResult) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        showToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void showExit() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        showToUser(EXIT_MESSAGE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void showMainHelp() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        showToUser(SEPARATOR, MAIN_HELP);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 109
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "         title\u003d\"EYLAH\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "      \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/eylah/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/eylah/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/eylah/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/eylah/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/eylah/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/eylah/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/eylah/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/eylah/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 1,
      "akhilvuputuri": 2,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/eylah/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.CALORIES_DESC_PASTA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.NAME_DESC_PASTA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.testutil.TypicalFood.PASTA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.DietModel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.DietModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyFoodBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.storage.DietStorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.storage.JsonFoodBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.storage.JsonMyselfStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private DietModel model \u003d new DietModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private DietLogic logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        JsonFoodBookStorage foodBookStorage \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                new JsonFoodBookStorage(temporaryFolder.resolve(\"foodBook.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        JsonMyselfStorage myselfStorage \u003d new JsonMyselfStorage(temporaryFolder.resolve(\"myself.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        DietStorageManager storage \u003d new DietStorageManager(foodBookStorage, userPrefsStorage, myselfStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        logic \u003d new DietLogicManager(model, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        assertCommandSuccess(listCommand,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                \"List is empty for today! Add a -a flag to access your entire diet history.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \"Total Calorie Intake : 0\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \"You have 2500 calories left for the day!\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \"All foods over period based on input tag has been listed.\\n\", model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // Setup LogicManager with JsonFoodBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        JsonFoodBookStorage foodBookStorage \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                new JsonFoodBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionFoodBook.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        JsonMyselfStorage myselfStorage \u003d new JsonMyselfStorage(temporaryFolder.resolve(\"ioExceptionMyself.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        DietStorageManager storage \u003d new DietStorageManager(foodBookStorage, userPrefsStorage, myselfStorage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        logic \u003d new DietLogicManager(model, storage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_PASTA + CALORIES_DESC_PASTA;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Food expectedFood \u003d new FoodBuilder(PASTA).withTags().build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        DietModel expectedModel \u003d model;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        expectedModel.addFood(expectedFood);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        String expectedMessage \u003d DietLogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void getFilteredFoodList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredFoodList().remove(0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, DietModel)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                                      DietModel expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, DietModel)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, DietModel)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, DietModel)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        DietModel expectedModel \u003d new DietModelManager(model.getFoodBook(), new UserPrefs(), model.getMyself());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * @see #assertCommandSuccess(String, String, DietModel)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                                      String expectedMessage, DietModel expectedModel) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static class JsonFoodBookIoExceptionThrowingStub extends JsonFoodBookStorage {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        private JsonFoodBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        public void saveFoodBook(ReadOnlyFoodBook foodBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 140,
      "sheexiong": 28
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.DietModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.FoodBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.Mode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyFoodBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyMyself;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.self.Height;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.self.Weight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void constructor_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void execute_foodAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        ModelStubAcceptingFoodAdded modelStub \u003d new ModelStubAcceptingFoodAdded();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Food validFood \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validFood).execute(modelStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validFood), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertEquals(Arrays.asList(validFood), modelStub.foodsAdded);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void execute_duplicateFood_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Food validFood \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validFood);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithFood(validFood);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_FOOD, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Food alice \u003d new FoodBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Food bob \u003d new FoodBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // different food -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private class ModelStub implements DietModel {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        public Path getMyselfFilePath() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        public void setMyselfFilePath(Path myselfFilePath) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        public void setMyself(ReadOnlyMyself myself) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        public ReadOnlyMyself getMyself() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        public Path getFoodBookFilePath() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        public void setFoodBookFilePath(Path foodBookFilePath) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        public void addFood(Food food) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        public void setFoodBook(ReadOnlyFoodBook newData) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        public ReadOnlyFoodBook getFoodBook() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        public void deleteFood(Food target) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        public void setFood(Food target, Food editedFood) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        public String listFoods(String mode) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        public ObservableList\u003cFood\u003e getFilteredFoodList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        public void updateFilteredFoodList(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        public void setHeight(Height height) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        public void setWeight(Weight weight) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        public Height getHeight() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        public Weight getWeight() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        public void setMode(Mode mode) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        public String printMetrics() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        public Mode getMode() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * A Model stub that contains a single food."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private class ModelStubWithFood extends ModelStub {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        private final Food food;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        ModelStubWithFood(Food food) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            this.food \u003d food;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return this.food.isSameFood(food);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * A Model stub that always accept the food being added."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private class ModelStubAcceptingFoodAdded extends ModelStub {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        final ArrayList\u003cFood\u003e foodsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return foodsAdded.stream().anyMatch(food::isSameFood);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        public void addFood(Food food) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            foodsAdded.add(food);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        public ReadOnlyFoodBook getFoodBook() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return new FoodBook();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 27,
      "sheexiong": 2,
      "akhilvuputuri": 221
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/logic/commands/BackCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.BackCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.DietModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.DietModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class BackCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private DietModel splitterModel \u003d new DietModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private DietModel expectedSplitterModel \u003d new DietModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void execute_back_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_SUCCESS, false, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        assertCommandSuccess(new BackCommand(), splitterModel, expectedCommandResult, expectedSplitterModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sheexiong": 24
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/logic/commands/BmiCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.BMI_OBJ;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.VALID_HEIGHT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.VALID_WEIGHT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.ModelStub;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.Myself;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.self.Bmi;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Height;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Weight;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class BmiCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void constructor_nullBmi_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new BmiCommand(null, null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new BmiCommand(new Height(VALID_HEIGHT), null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new BmiCommand(null, new Weight(VALID_WEIGHT)));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void constructor_noArgsBmi_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void execute_bmiAcceptedByModel_setBmiSuccessful() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        ModelStubBmi modelStub \u003d new ModelStubBmi();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Height validHeight \u003d new Height(VALID_HEIGHT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Weight validWeight \u003d new Weight(VALID_WEIGHT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Bmi validBmi \u003d new Bmi(validHeight, validWeight);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        System.out.println(new BmiCommand(validHeight, validWeight));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        CommandResult commandResult \u003d new BmiCommand(validHeight, validWeight).execute(modelStub);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertEquals(String.format(BmiCommand.MESSAGE_CALCULATE_BMI_SUCCESS, validBmi, validBmi.getCategory()),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(BMI_OBJ.equals(new BmiCommand(new Height(VALID_HEIGHT), new Weight(VALID_WEIGHT))));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(BMI_OBJ.equals(BMI_OBJ));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(BMI_OBJ.equals(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(BMI_OBJ.equals(5));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(BMI_OBJ.equals(new BmiCommand(new Height(\"164\"), new Weight(\"36\"))));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * A Model stub that always accept the food being added."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private class ModelStubBmi extends ModelStub {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        private final Myself myself \u003d new Myself();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        public Height getHeight() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return myself.getHeight();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        public Weight getWeight() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            return myself.getWeight();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 48,
      "akhilvuputuri": 37
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        // different back value -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        // different back value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 3,
      "sheexiong": 4,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.DietCliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.DietCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.DietCliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.DietModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.FoodBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.Mode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Height;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Weight;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.testutil.EditFoodDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String VALID_NAME_PASTA \u003d \"Pasta Aglio Olio\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String VALID_NAME_PIZZA \u003d \"Pizza Pepperoni\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String VALID_CALORIES_PASTA \u003d \"1200\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String VALID_CALORIES_PIZZA \u003d \"560\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String VALID_DATE_PIZZA \u003d \"2020-03-25T16:49:40.210011\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String VALID_TAG_FASTFOOD \u003d \"fastfood\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String VALID_TAG_FAVORITE \u003d \"favorite\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String VALID_HEIGHT \u003d \"170.2\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String VALID_WEIGHT \u003d \"65.7\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String NAME_DESC_PASTA \u003d \" \" + PREFIX_NAME + \" \" + VALID_NAME_PASTA;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String NAME_DESC_PIZZA \u003d \" \" + PREFIX_NAME + \" \" + VALID_NAME_PIZZA;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String CALORIES_DESC_PASTA \u003d \" \" + PREFIX_CALORIES + \" \" + VALID_CALORIES_PASTA;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String CALORIES_DESC_PIZZA \u003d \" \" + PREFIX_CALORIES + \" \" + VALID_CALORIES_PIZZA;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String TAG_DESC_FASTFOOD \u003d \" \" + PREFIX_TAG + \" \" + VALID_TAG_FASTFOOD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String TAG_DESC_FAVORITE \u003d \" \" + PREFIX_TAG + \" \" + VALID_TAG_FAVORITE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \" \" + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \" \" + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String INVALID_HEIGHT \u003d \"15o\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String INVALID_WEIGHT \u003d \"6s\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final EditCommand.EditFoodDescriptor DESC_PASTA;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final EditCommand.EditFoodDescriptor DESC_PIZZA;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final HeightCommand HEIGHT_OBJ;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final WeightCommand WEIGHT_OBJ;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final BmiCommand BMI_OBJ;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final ModeCommand MODE_LOSS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final ModeCommand MODE_MAINTAIN;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final ModeCommand MODE_GAIN;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        DESC_PASTA \u003d new EditFoodDescriptorBuilder().withName(VALID_NAME_PASTA).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        DESC_PIZZA \u003d new EditFoodDescriptorBuilder().withName(VALID_NAME_PIZZA)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                .withTags(VALID_TAG_FASTFOOD, VALID_TAG_FAVORITE).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        HEIGHT_OBJ \u003d new HeightCommand(new Height(VALID_HEIGHT));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        WEIGHT_OBJ \u003d new WeightCommand(new Weight(VALID_WEIGHT));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        BMI_OBJ \u003d new BmiCommand(new Height(VALID_HEIGHT), new Weight(VALID_WEIGHT));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        MODE_LOSS \u003d new ModeCommand(Mode.LOSS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        MODE_MAINTAIN \u003d new ModeCommand(Mode.MAINTAIN);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        MODE_GAIN \u003d new ModeCommand(Mode.GAIN);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static void assertCommandSuccess(Command command, DietModel actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                                            DietModel expectedModel) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, DietModel, CommandResult, DietModel)}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static void assertCommandSuccess(Command command, DietModel actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                                            DietModel expectedModel) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * - the food book, filtered food list and selected food in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static void assertCommandFailure(Command\u003cDietModel\u003e command, DietModel actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        FoodBook expectedFoodBook \u003d new FoodBook(actualModel.getFoodBook());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        List\u003cFood\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredFoodList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(expectedFoodBook, actualModel.getFoodBook());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredFoodList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the food at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * {@code model}\u0027s food book."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static void showFoodAtIndex(DietModel model, Index targetIndex) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredFoodList().size());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Food food \u003d model.getFilteredFoodList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        final String[] splitName \u003d food.getName().name.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        model.updateFilteredFoodList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(1, model.getFilteredFoodList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 129,
      "sheexiong": 15
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.showFoodAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.diettracker.testutil.TypicalFood.getTypicalFoodBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.testutil.TypicalMyself.getTypicalMyself;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.TypicalIndexes.INDEX_SECOND_FOOD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.DietModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.DietModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private DietModel model \u003d new DietModelManager(getTypicalFoodBook(), new UserPrefs(), getTypicalMyself());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Food foodToDelete \u003d model.getFilteredFoodList().get(INDEX_FIRST_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_FOOD_SUCCESS, foodToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        DietModelManager expectedModel \u003d new DietModelManager(model.getFoodBook(), new UserPrefs(), model.getMyself());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        expectedModel.deleteFood(foodToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFoodList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        showFoodAtIndex(model, INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Food foodToDelete \u003d model.getFilteredFoodList().get(INDEX_FIRST_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_FOOD_SUCCESS, foodToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        DietModel expectedModel \u003d new DietModelManager(model.getFoodBook(), new UserPrefs(), model.getMyself());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        expectedModel.deleteFood(foodToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        showNoFood(expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        showFoodAtIndex(model, INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_FOOD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of food book list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFoodBook().getFoodList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_FOOD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // different food -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private void showNoFood(DietModel model) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        model.updateFilteredFoodList(p -\u003e false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertTrue(model.getFilteredFoodList().isEmpty());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 4,
      "akhilvuputuri": 107
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.DESC_PASTA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.DESC_PIZZA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.VALID_NAME_PASTA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.VALID_TAG_FAVORITE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.showFoodAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.testutil.TypicalFood.getTypicalFoodBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.testutil.TypicalMyself.getTypicalMyself;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.EditCommand.EditFoodDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//import seedu.eylah.diettracker.model.FoodBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.DietModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.DietModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.testutil.EditFoodDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//import seedu.eylah.diettracker.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private DietModel model \u003d new DietModelManager(getTypicalFoodBook(), new UserPrefs(), getTypicalMyself());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     Food editedFood \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     EditFoodDescriptor descriptor \u003d new EditFoodDescriptorBuilder(editedFood).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     String expectedMessage \u003d String.format(EditCommand.MESSAGE_SUCCESS, editedFood);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     Model expectedModel \u003d new ModelManager(new FoodBook(model.getFoodBook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     expectedModel.setFood(model.getFilteredFoodList().get(0), editedFood);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     Index indexLastFood \u003d Index.fromOneBased(model.getFilteredFoodList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     Food lastFood \u003d model.getFilteredFoodList().get(indexLastFood.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     FoodBuilder foodInList \u003d new FoodBuilder(lastFood);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     Food editedFood \u003d foodInList.withName(VALID_NAME_PASTA).withTags(VALID_TAG_FAVORITE).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     EditFoodDescriptor descriptor \u003d new EditFoodDescriptorBuilder().withName(VALID_NAME_PASTA)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //             .withTags(VALID_TAG_FAVORITE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     EditCommand editCommand \u003d new EditCommand(indexLastFood, descriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     String expectedMessage \u003d String.format(EditCommand.MESSAGE_SUCCESS, editedFood);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     Model expectedModel \u003d new ModelManager(new FoodBook(model.getFoodBook()), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     expectedModel.setFood(lastFood, editedFood);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditFoodDescriptor());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     Food editedFood \u003d model.getFilteredFoodList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     String expectedMessage \u003d String.format(EditCommand.MESSAGE_SUCCESS, editedFood);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     Model expectedModel \u003d new ModelManager(new FoodBook(model.getFoodBook()), new UserPrefs());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     showFoodAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     Food foodInFilteredList \u003d model.getFilteredFoodList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     Food editedFood \u003d new FoodBuilder(foodInFilteredList).withName(VALID_NAME_PASTA).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //             new EditFoodDescriptorBuilder().withName(VALID_NAME_PASTA).build());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     String expectedMessage \u003d String.format(EditCommand.MESSAGE_SUCCESS, editedFood);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     Model expectedModel \u003d new ModelManager(new FoodBook(model.getFoodBook()), new UserPrefs());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     expectedModel.setFood(model.getFilteredFoodList().get(0), editedFood);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void execute_invalidFoodIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFoodList().size() + 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        EditFoodDescriptor descriptor \u003d new EditFoodDescriptorBuilder().withName(VALID_NAME_PASTA).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void execute_invalidFoodIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        showFoodAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFoodBook().getFoodList().size());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                new EditFoodDescriptorBuilder().withName(VALID_NAME_PASTA).build());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_PASTA);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        EditFoodDescriptor copyDescriptor \u003d new EditFoodDescriptor(DESC_PASTA);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // // different types -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_PASTA)));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_PIZZA)));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 148,
      "sheexiong": 3
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/logic/commands/EditFoodDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.DESC_PASTA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.DESC_PIZZA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.VALID_CALORIES_PIZZA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.VALID_DATE_PIZZA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.VALID_NAME_PIZZA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.VALID_TAG_FASTFOOD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.EditCommand.EditFoodDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.testutil.EditFoodDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class EditFoodDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        EditFoodDescriptor descriptorWithSameValues \u003d new EditFoodDescriptor(DESC_PASTA);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(DESC_PASTA.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(DESC_PASTA.equals(DESC_PASTA));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(DESC_PASTA.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(DESC_PASTA.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(DESC_PASTA.equals(DESC_PIZZA));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        EditFoodDescriptor editedPasta \u003d new EditFoodDescriptorBuilder(DESC_PASTA).withName(VALID_NAME_PIZZA).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(DESC_PASTA.equals(editedPasta));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different calories -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        editedPasta \u003d new EditFoodDescriptorBuilder(DESC_PASTA).withCalories(VALID_CALORIES_PIZZA).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(DESC_PASTA.equals(editedPasta));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // editedPasta \u003d new EditFoodDescriptorBuilder(DESC_PASTA).withDate(VALID_DATE_PIZZA).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // assertFalse(DESC_PASTA.equals(editedPasta));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        editedPasta \u003d new EditFoodDescriptorBuilder(DESC_PASTA).withTags(VALID_TAG_FASTFOOD).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(DESC_PASTA.equals(editedPasta));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 53
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.DietModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.DietModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private DietModel splitterModel \u003d new DietModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private DietModel expectedSplitterModel \u003d new DietModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), splitterModel, expectedCommandResult, expectedSplitterModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 23
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/logic/commands/HeightCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.HEIGHT_OBJ;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.ModelStub;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.Myself;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Height;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class HeightCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void constructor_nullHeight_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new HeightCommand(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void execute_heightAcceptedByModel_setHeightSuccessful() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        HeightCommandTest.ModelStubAcceptingHeightAdded modelStub \u003d new ModelStubAcceptingHeightAdded();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Height validHeight \u003d new Height(\"160\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        CommandResult commandResult \u003d new HeightCommand(validHeight).execute(modelStub);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertEquals(String.format(HeightCommand.MESSAGE_ADD_HEIGHT_SUCCESS, validHeight),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(HEIGHT_OBJ.equals(new HeightCommand(new Height(\"170.2\"))));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(HEIGHT_OBJ.equals(HEIGHT_OBJ));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(HEIGHT_OBJ.equals(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(HEIGHT_OBJ.equals(5));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(HEIGHT_OBJ.equals(new HeightCommand(new Height(\"165.5\"))));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * A Model stub that always accept the food being added."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private class ModelStubAcceptingHeightAdded extends ModelStub {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        private final Myself myself \u003d new Myself();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        public void setHeight(Height height) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            myself.setHeight(height);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 48,
      "akhilvuputuri": 19
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.showFoodAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.diettracker.testutil.TypicalFood.getTypicalFoodBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.testutil.TypicalMyself.getTypicalMyself;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.DietModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.DietModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private DietModel model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private DietModel expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        model \u003d new DietModelManager(getTypicalFoodBook(), new UserPrefs(), getTypicalMyself());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        expectedModel \u003d new DietModelManager(model.getFoodBook(), new UserPrefs(), model.getMyself());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        assertCommandSuccess(new ListCommand(\"-a\"), model,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                \"These are all food you have ever consumed!\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \"1. Mushroom Pasta Calories: 1200 At: 2020-03-25 Tags: [italian]\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \"2. Chicken Burger Calories: 300 At: 2020-03-25 Tags: [western][fastfood]\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \"3. French Fries Calories: 450 At: 2020-03-25\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \"4. Vanilla Latte Calories: 300 At: 2020-03-25 Tags: [drinks]\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \"5. Coke Calories: 1200 At: 2020-03-25\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \"6. BBQ Pizza Calories: 50 At: 2020-03-25\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \"7. Hotdog Calories: 320 At: 2020-03-25\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \"Total Calorie Intake : 3820\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \"All foods over period based on input tag has been listed.\\n\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        showFoodAtIndex(model, INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        assertCommandSuccess(new ListCommand(\"-a\"), model,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                \"These are all food you have ever consumed!\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \"1. Mushroom Pasta Calories: 1200 At: 2020-03-25 Tags: [italian]\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \"2. Chicken Burger Calories: 300 At: 2020-03-25 Tags: [western][fastfood]\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \"3. French Fries Calories: 450 At: 2020-03-25\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \"4. Vanilla Latte Calories: 300 At: 2020-03-25 Tags: [drinks]\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \"5. Coke Calories: 1200 At: 2020-03-25\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \"6. BBQ Pizza Calories: 50 At: 2020-03-25\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \"7. Hotdog Calories: 320 At: 2020-03-25\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \"Total Calorie Intake : 3820\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \"All foods over period based on input tag has been listed.\\n\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 3,
      "sheexiong": 28,
      "akhilvuputuri": 35
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/logic/commands/MetricsCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.testutil.TypicalFood.getTypicalFoodBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.testutil.TypicalMyself.getTypicalMyself;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.DietModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.DietModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class MetricsCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private DietModel model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private DietModel expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        model \u003d new DietModelManager(getTypicalFoodBook(), new UserPrefs(), getTypicalMyself());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        expectedModel \u003d new DietModelManager(model.getFoodBook(), new UserPrefs(), model.getMyself());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void execute_metricsShown() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        assertCommandSuccess(new MetricsCommand(), model,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                \"Your metrics are as follows:\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \"    Height: You have not stored your own height yet! Type \u0027height \u003c\u003cinsert height here\u003e\u003e\u0027\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \" to store your height!\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \"    Weight: You have not stored your own weight yet! Type \u0027weight \u003c\u003cinsert weight here\u003e\u003e\u0027\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \" to store your weight!\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \"    Dieting Mode: MAINTAIN\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                + \"Your metrics are shown.\\n\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        MetricsCommand metricsFirstCommand \u003d new MetricsCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(metricsFirstCommand.equals(metricsFirstCommand));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(metricsFirstCommand.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(metricsFirstCommand.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 47,
      "sheexiong": 10
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/logic/commands/ModeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.MODE_GAIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.MODE_LOSS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.Mode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.ModelStub;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.Myself;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class ModeCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void constructor_nullMode_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ModeCommand(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void execute_modeAcceptedByModel_setModeSuccessful() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        ModeCommandTest.ModelStubAcceptingModeAdded modelStub \u003d new ModelStubAcceptingModeAdded();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Mode validMode \u003d Mode.LOSS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        CommandResult commandResult \u003d new ModeCommand(validMode).execute(modelStub);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertEquals(String.format(ModeCommand.MESSAGE_SUCCESS, validMode),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(MODE_GAIN.equals(new ModeCommand(Mode.GAIN)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(MODE_GAIN.equals(MODE_GAIN));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(MODE_GAIN.equals(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(MODE_GAIN.equals(5));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different modes -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(MODE_GAIN.equals(MODE_LOSS));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * A Model stub that always accept the food being added."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private class ModelStubAcceptingModeAdded extends ModelStub {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        private final Myself myself \u003d new Myself();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        public void setMode(Mode mode) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            myself.setMode(mode);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 47,
      "akhilvuputuri": 19
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/logic/commands/WeightCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.WEIGHT_OBJ;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.ModelStub;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.Myself;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Weight;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class WeightCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void constructor_nullWeight_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new WeightCommand(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void execute_weightAcceptedByModel_setWeightSuccessful() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        WeightCommandTest.ModelStubAcceptingWeightAdded modelStub \u003d new ModelStubAcceptingWeightAdded();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Weight validWeight \u003d new Weight(\"50\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        CommandResult commandResult \u003d new WeightCommand(validWeight).execute(modelStub);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertEquals(String.format(WeightCommand.MESSAGE_ADD_WEIGHT_SUCCESS, validWeight),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(WEIGHT_OBJ.equals(new WeightCommand(new Weight(\"65.7\"))));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(WEIGHT_OBJ.equals(WEIGHT_OBJ));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(WEIGHT_OBJ.equals(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(WEIGHT_OBJ.equals(5));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(WEIGHT_OBJ.equals(new WeightCommand(new Weight(\"72.3\"))));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * A Model stub that always accept the food being added."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private class ModelStubAcceptingWeightAdded extends ModelStub {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        private final Myself myself \u003d new Myself();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        public void setWeight(Weight weight) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            myself.setWeight(weight);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 47,
      "akhilvuputuri": 19
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.Prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final Prefix dashN \u003d new Prefix(\"-n\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, dashN);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertArgumentAbsent(argMultimap, dashN);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String argsString \u003d \"  some random string -n tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String argsString \u003d \"  Some preamble string -n Argument value \";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, dashN);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertArgumentPresent(argMultimap, dashN, \"Argument value\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        argsString \u003d \" -n   Argument value \";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, dashN);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertArgumentPresent(argMultimap, dashN, \"Argument value\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String argsString \u003d \"SomePreambleString -n dashN-Value p/pSlash value\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashN, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertArgumentPresent(argMultimap, dashN, \"dashN-Value\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -n dashN-Value p/pSlash value\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashN, hatQ);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertArgumentPresent(argMultimap, dashN, \"dashN-Value\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashN, hatQ);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertArgumentAbsent(argMultimap, dashN);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashN, hatQ);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String argsString \u003d \"SomePreambleString -n dashN-Value ^Q ^Q -n another dashN value p/ pSlash value -n\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashN, hatQ);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertArgumentPresent(argMultimap, dashN, \"dashN-Value\", \"another dashN value\", \"\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-njoined -n not joined^Qjoined\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashN, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-njoined\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertArgumentPresent(argMultimap, dashN, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 150,
      "sheexiong": 4
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.DietModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command\u003cDietModel\u003e expectedCommand) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            Command\u003cDietModel\u003e command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 2,
      "sheexiong": 5,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/logic/parser/FoodBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.BmiCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.EditCommand.EditFoodDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.HeightCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.MetricsCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.ModeCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.WeightCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.DietModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.Mode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Height;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Weight;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.testutil.EditFoodDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.testutil.FoodUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class FoodBookParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final FoodBookParser parser \u003d new FoodBookParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Food food \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(FoodUtil.getAddCommand(food));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(new AddCommand(food).execute(new DietModelManager()), command.execute(new DietModelManager()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void parseCommand_bmi() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        BmiCommand command \u003d (BmiCommand) parser.parseCommand("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                BmiCommand.COMMAND_WORD + \" \" + DietCliSyntax.PREFIX_HEIGHT + \" 170.2 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                        + DietCliSyntax.PREFIX_WEIGHT + \" 67\" + \".5\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(new BmiCommand(new Height(\"170.2\"), new Weight(\"67.5\")), command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // TO MAKE THIS PASS"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // EditCommand.java equal for getDates has been commented out."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Food food \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        EditFoodDescriptor descriptor \u003d new EditFoodDescriptorBuilder(food).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                + \"-i 1 \" + FoodUtil.getEditFoodDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals((new EditCommand(Index.fromOneBased(1), descriptor)), command);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void parseCommand_height() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        HeightCommand command \u003d (HeightCommand) parser.parseCommand("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                HeightCommand.COMMAND_WORD + \" 170.2\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(new HeightCommand(new Height(\"170.2\")), command);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" -a\") instanceof ListCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" -d 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" -t healthy\") instanceof ListCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void parseCommand_mode() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        ModeCommand command \u003d (ModeCommand) parser.parseCommand("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                ModeCommand.COMMAND_WORD + \" -g\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(new ModeCommand(Mode.GAIN), command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void parseCommand_weight() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        WeightCommand command \u003d (WeightCommand) parser.parseCommand("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                WeightCommand.COMMAND_WORD + \" 60.2\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(new WeightCommand(new Weight(\"60.2\")), command);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void parseCommand_metrics() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        MetricsCommand command \u003d (MetricsCommand) parser.parseCommand("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                MetricsCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(new MetricsCommand(), command);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 117,
      "sheexiong": 2,
      "akhilvuputuri": 3
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Calories;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final String INVALID_NAME \u003d \"P@sta\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#fastfood\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final String INVALID_CALORIES \u003d \"-10\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final String VALID_NAME \u003d \"Mushroom Pasta\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final String VALID_CALORIES \u003d \"10\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"fastfood\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"favorite\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void parseCalories_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCalories((String) null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void parseCalories_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCalories(INVALID_CALORIES));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void parseCalories_validValueWithoutWhitespace_returnsCalories() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Calories expectedCalories \u003d new Calories(Long.parseLong(VALID_CALORIES));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(expectedCalories, ParserUtil.parseCalories(VALID_CALORIES));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void parseCalories_validValueWithWhitespace_returnsTrimmedCalories() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String caloriesWithWhitespace \u003d WHITESPACE + VALID_CALORIES + WHITESPACE;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Calories expectedCalories \u003d new Calories(Long.parseLong(VALID_CALORIES));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(expectedCalories, ParserUtil.parseCalories(caloriesWithWhitespace));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 27,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/model/FoodBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//import static seedu.eylah.diettracker.logic.commands.CommandTestUtil.VALID_TAG_FASTFOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.testutil.TypicalFood.PASTA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.testutil.TypicalFood.getTypicalFoodBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//import seedu.eylah.diettracker.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "//import seedu.eylah.diettracker.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class FoodBookTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private final FoodBook foodBook \u003d new FoodBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(Collections.emptyList(), foodBook.getFoodList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e foodBook.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void resetData_withValidReadOnlyFoodBook_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        FoodBook newData \u003d getTypicalFoodBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        foodBook.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(newData, foodBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // public void resetData_withDuplicateFoods_throwsDuplicateFoodException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     // Two foods with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     Food editedAlice \u003d new FoodBuilder(PASTA).withTags(VALID_TAG_FASTFOOD)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //             .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     List\u003cFood\u003e newFoods \u003d Arrays.asList(PASTA, editedAlice);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     FoodBookStub newData \u003d new FoodBookStub(newFoods);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     assertThrows(DuplicateFoodException.class, () -\u003e foodBook.resetData(newData));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void hasFood_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e foodBook.hasFood(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void hasFood_foodNotInFoodBook_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(foodBook.hasFood(PASTA));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void hasFood_foodInFoodBook_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        foodBook.addFood(PASTA);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(foodBook.hasFood(PASTA));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // public void hasFood_foodWithSameIdentityFieldsInFoodBook_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     foodBook.addFood(PASTA);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     Food editedAlice \u003d new FoodBuilder(PASTA).withTags(VALID_TAG_FASTFOOD)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //             .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     assertTrue(foodBook.hasFood(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void getFoodList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e foodBook.getFoodList().remove(0));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * A stub ReadOnlyFoodBook whose foods list can violate interface constraints."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static class FoodBookStub implements ReadOnlyFoodBook {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        private final ObservableList\u003cFood\u003e foods \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        FoodBookStub(Collection\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            this.foods.setAll(foods);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        public ObservableList\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            return foods;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 101
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.model.DietModel.PREDICATE_SHOW_ALL_FOODS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.testutil.TypicalFood.PASTA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.testutil.TypicalFood.PIZZA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.testutil.FoodBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private DietModelManager modelManager \u003d new DietModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(new FoodBook(), new FoodBook(modelManager.getFoodBook()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        userPrefs.setFoodBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        userPrefs.setFoodBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setFoodBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setFoodBookFilePath(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setFoodBookFilePath_validPath_setsFoodBookFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        modelManager.setFoodBookFilePath(path);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(path, modelManager.getFoodBookFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void hasFood_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasFood(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void hasFood_foodNotInFoodBook_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(modelManager.hasFood(PASTA));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void hasFood_foodInFoodBook_returnsTrue() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        modelManager.addFood(PASTA);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(modelManager.hasFood(PASTA));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void getFilteredFoodList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredFoodList().remove(0));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        FoodBook foodBook \u003d new FoodBookBuilder().withFood(PASTA).withFood(PIZZA).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        FoodBook differentFoodBook \u003d new FoodBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Myself myself \u003d new Myself();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        modelManager \u003d new DietModelManager(foodBook, userPrefs, myself);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        DietModelManager modelManagerCopy \u003d new DietModelManager(foodBook, userPrefs, myself);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different foodBook -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(modelManager.equals(new DietModelManager(differentFoodBook, userPrefs, myself)));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String[] keywords \u003d PASTA.getName().name.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        modelManager.updateFilteredFoodList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(modelManager.equals(new DietModelManager(foodBook, userPrefs, myself)));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        modelManager.updateFilteredFoodList(PREDICATE_SHOW_ALL_FOODS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        // the below testcase is fail."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        /*// different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        differentUserPrefs.setFoodBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        assertFalse(modelManager.equals(new DietModelManager(foodBook, differentUserPrefs)));*/"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 114,
      "sheexiong": 7
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/model/ModelStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Height;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.self.Weight;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class ModelStub implements DietModel {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Path getMyselfFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setMyselfFilePath(Path myselfFilePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setMyself(ReadOnlyMyself myself) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public ReadOnlyMyself getMyself() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Path getFoodBookFilePath() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setFoodBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void addFood(Food food) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setFoodBook(ReadOnlyFoodBook newData) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public ReadOnlyFoodBook getFoodBook() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void deleteFood(Food target) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setFood(Food target, Food editedFood) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilteredFoodList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public String listFoods(String mode) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void updateFilteredFoodList(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setHeight(Height height) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setWeight(Weight weight) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Height getHeight() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Weight getWeight() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setMode(Mode mode) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public String printMetrics() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Mode getMode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 119,
      "sheexiong": 2,
      "akhilvuputuri": 14
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setFoodBookFilePath(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 15,
      "sheexiong": 2
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/model/food/CaloriesTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class CaloriesTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Calories((Long) null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        long invalidCalories \u003d -10;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Calories((Long) invalidCalories));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void isValidCalories() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Calories.isValidCalories((Long) null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // invalid calories"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(Calories.isValidCalories(-10)); // negative value"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(Calories.isValidCalories(0)); // zero allowed"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertTrue(Calories.isValidCalories(12345)); // numbers only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 34
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/model/food/FoodTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.diettracker.testutil.TypicalFood.BURGER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.diettracker.testutil.TypicalFood.PASTA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class FoodTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Food food \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e food.getTags().remove(0));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void isSameFood() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertTrue(PASTA.isSameFood(PASTA));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertFalse(PASTA.isSameFood(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // ADD AFTER COMMANDS INCORPORATED"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //// different name -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //Food editedPasta \u003d new FoodBuilder(PASTA).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //assertFalse(PASTA.isSameFood(editedPasta));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //// same name, same calories, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //editedPasta \u003d new FoodBuilder(PASTA)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //        .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //assertTrue(PASTA.isSameFood(editedPasta));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //// same name, same calories, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //editedPasta \u003d new FoodBuilder(PASTA).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //assertTrue(PASTA.isSameFood(editedPasta));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Food pastaCopy \u003d new FoodBuilder(PASTA).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertTrue(PASTA.equals(pastaCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertTrue(PASTA.equals(PASTA));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertFalse(PASTA.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertFalse(PASTA.equals(5));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // different food -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertFalse(PASTA.equals(BURGER));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // IMPLEMENT AFTER ADDING COMMANDS"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //// different name -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //Food editedAlice \u003d new FoodBuilder(PASTA).withName(VALID_NAME_BURGER).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //assertFalse(PASTA.equals(editedAlice));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //// different tags -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //editedAlice \u003d new FoodBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        //assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 72
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/model/food/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertFalse(Name.isValidName(\"burger*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertTrue(Name.isValidName(\"french fries\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertTrue(Name.isValidName(\"4fingers\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertTrue(Name.isValidName(\"Aglio Olio\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertTrue(Name.isValidName(\"McSpicy Meal with Fries and Coke\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 40
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/storage/DietStorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.diettracker.storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class DietStorageManagerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 12,
      "akhilvuputuri": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/storage/JsonAdaptedFoodTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.storage.JsonAdaptedFood.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.diettracker.testutil.TypicalFood.PASTA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Calories;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class JsonAdaptedFoodTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final String INVALID_NAME \u003d \"P@sta\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final long INVALID_CALORIES \u003d -10;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#favorite\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final String VALID_NAME \u003d PASTA.getName().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final long VALID_CALORIES \u003d PASTA.getCalories().getValue();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final String VALID_DATE \u003d PASTA.getDate().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d PASTA.getTags().stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void toModelType_validFoodDetails_returnsFood() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(PASTA);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        // check if all fields the same"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(PASTA.getName(), food.toModelType().getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(PASTA.getCalories(), food.toModelType().getCalories());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(PASTA.getDate().toString(), food.toModelType().getDate().toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertEquals(PASTA.getTags(), food.toModelType().getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        JsonAdaptedFood food \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                new JsonAdaptedFood(INVALID_NAME, VALID_CALORIES, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        JsonAdaptedFood food \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                new JsonAdaptedFood(null, VALID_CALORIES, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void toModelType_invalidCalories_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        JsonAdaptedFood food \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                new JsonAdaptedFood(VALID_NAME, INVALID_CALORIES, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        String expectedMessage \u003d Calories.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(IllegalArgumentException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        JsonAdaptedFood food \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                new JsonAdaptedFood(VALID_NAME, VALID_CALORIES, VALID_DATE, invalidTags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(IllegalValueException.class, food::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 74
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/storage/JsonFoodBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.diettracker.testutil.TypicalFood.BAGUETTE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.diettracker.testutil.TypicalFood.MILKSHAKE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.diettracker.testutil.TypicalFood.PASTA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.diettracker.testutil.TypicalFood.getTypicalFoodBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.FoodBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.ReadOnlyFoodBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class JsonFoodBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonFoodBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void readFoodBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readFoodBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private java.util.Optional\u003cReadOnlyFoodBook\u003e readFoodBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return new JsonFoodBookStorage(Paths.get(filePath)).readFoodBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertFalse(readFoodBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFoodBook(\"notJsonFormatFoodBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void readFoodBook_invalidFoodFoodBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFoodBook(\"invalidFoodFoodBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void readFoodBook_invalidAndValidFoodFoodBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFoodBook(\"invalidAndValidFoodFoodBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public void readAndSaveFoodBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempFoodBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        FoodBook original \u003d getTypicalFoodBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        JsonFoodBookStorage jsonFoodBookStorage \u003d new JsonFoodBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        jsonFoodBookStorage.saveFoodBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        ReadOnlyFoodBook readBack \u003d jsonFoodBookStorage.readFoodBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertEquals(original, new FoodBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        original.addFood(MILKSHAKE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        original.removeFood(PASTA);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        jsonFoodBookStorage.saveFoodBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        readBack \u003d jsonFoodBookStorage.readFoodBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertEquals(original, new FoodBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        original.addFood(BAGUETTE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        jsonFoodBookStorage.saveFoodBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        readBack \u003d jsonFoodBookStorage.readFoodBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        assertEquals(original, new FoodBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void saveFoodBook_nullFoodBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveFoodBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private void saveFoodBook(ReadOnlyFoodBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            new JsonFoodBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                .saveFoodBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void saveFoodBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveFoodBook(new FoodBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 75,
      "akhilvuputuri": 35
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/storage/JsonSerializableFoodBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "// import seedu.eylah.diettracker.model.FoodBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "// import seedu.eylah.diettracker.testutil.TypicalFood;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class JsonSerializableFoodBookTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableFoodBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // private static final Path TYPICAL_FOODS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalFoodFoodBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private static final Path INVALID_FOOD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidFoodFoodBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // private static final Path DUPLICATE_FOOD_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateFoodFoodBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // public void toModelType_typicalFoodFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     JsonSerializableFoodBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_FOODS_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //             JsonSerializableFoodBook.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     FoodBook foodBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     FoodBook typicalFoodFoodBook \u003d TypicalFood.getTypicalFoodBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     assertEquals(foodBookFromFile, typicalFoodFoodBook);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public void toModelType_invalidFoodFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        JsonSerializableFoodBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_FOOD_FILE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                JsonSerializableFoodBook.class).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // public void toModelType_duplicateFood_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     JsonSerializableFoodBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_FOOD_FILE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //             JsonSerializableFoodBook.class).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //     assertThrows(IllegalValueException.class, JsonSerializableFoodBook.MESSAGE_DUPLICATE_FOOD,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    //             dataFromFile::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 48
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        //original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        //original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 3,
      "sheexiong": 8,
      "-": 116
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/testutil/EditFoodDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.EditCommand.EditFoodDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Calories;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * A utility class to help with building EditFoodDescriptor objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class EditFoodDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private EditFoodDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public EditFoodDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        descriptor \u003d new EditFoodDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public EditFoodDescriptorBuilder(EditFoodDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.descriptor \u003d new EditFoodDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns an {@code EditFoodDescriptor} with fields containing {@code food}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public EditFoodDescriptorBuilder(Food food) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        descriptor \u003d new EditFoodDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        descriptor.setName(food.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        descriptor.setCalories(food.getCalories());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        descriptor.setDate(food.getDate());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        descriptor.setTags(food.getTags());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Sets the {@code Name} of the {@code EditFoodDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public EditFoodDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Sets the {@code Name} of the {@code EditFoodDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public EditFoodDescriptorBuilder withCalories(String calories) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        descriptor.setCalories(new Calories(Long.parseLong(calories)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Sets the {@code Name} of the {@code EditFoodDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public EditFoodDescriptorBuilder withDate(String date) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        descriptor.setDate(new Date(date));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditFoodDescriptor}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public EditFoodDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public EditFoodDescriptor build() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 77
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/testutil/FoodBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.FoodBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * A utility class to help with building Foodbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " *     {@code FoodBook ab \u003d new FoodBookBuilder().withFood(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class FoodBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private FoodBook foodBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public FoodBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        foodBook \u003d new FoodBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public FoodBookBuilder(FoodBook foodBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.foodBook \u003d foodBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Adds a new {@code Food} to the {@code FoodBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public FoodBookBuilder withFood(Food food) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        foodBook.addFood(food);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public FoodBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return foodBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 34
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/testutil/FoodBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Calories;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * A utility class to help with building Food objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class FoodBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"French Fries\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final long DEFAULT_CALORIES \u003d 300;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Date DEFAULT_DATE \u003d new Date(\"2020-03-25T16:49:40.210009\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private Calories calories;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public FoodBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        calories \u003d new Calories(DEFAULT_CALORIES);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        date \u003d new Date();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Initializes the FoodBuilder with the data of {@code foodToCopy}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public FoodBuilder(Food foodToCopy) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        name \u003d foodToCopy.getName();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        calories \u003d foodToCopy.getCalories();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        date \u003d foodToCopy.getDate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(foodToCopy.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Sets the {@code Name} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public FoodBuilder withName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Sets the {@code Calories} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public FoodBuilder withCalories(long calories) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.calories \u003d new Calories(calories);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Sets the {@code Calories} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public FoodBuilder withDate(Date date) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     *  * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Food} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public FoodBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Builds a food."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * @return a food."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public Food build() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return new Food(name, calories, date, tags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 18,
      "sheexiong": 1,
      "akhilvuputuri": 66
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/testutil/FoodUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.DietCliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.DietCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.DietCliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.logic.commands.EditCommand.EditFoodDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * A utility class for Food."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class FoodUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns an add command string for adding the {@code food}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static String getAddCommand(Food food) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getFoodDetails(food);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns the part of command string for the given {@code food}\u0027s details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static String getFoodDetails(Food food) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        sb.append(PREFIX_NAME + food.getName().name + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        sb.append(PREFIX_CALORIES + food.getCalories().toString() + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        food.getTags().stream().forEach("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns the part of command string for the given {@code EditFoodDescriptor}\u0027s details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static String getEditFoodDescriptorDetails(EditFoodDescriptor descriptor) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.name).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        descriptor.getCalories().ifPresent("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            calories -\u003e sb.append(PREFIX_CALORIES).append(calories.toString()).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 54,
      "sheexiong": 3
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.diettracker.model.DietModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns the middle index of the food in the {@code model}\u0027s food list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static Index getMidIndex(DietModel model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFoodList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns the last index of the food in the {@code model}\u0027s food list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static Index getLastIndex(DietModel model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFoodList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns the food in the {@code model}\u0027s food list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static Food getFood(DietModel model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return model.getFilteredFoodList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 9,
      "sheexiong": 4,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/testutil/TypicalFood.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.diettracker.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.FoodBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " * A utility class containing a list of {@code Food} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class TypicalFood {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Food PASTA \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            new FoodBuilder().withName(\"Mushroom Pasta\").withCalories(1200).withDate(new Date("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                    \"2020-03-25T16:49:40.210009\")).withTags(\"italian\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Food BURGER \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            new FoodBuilder().withName(\"Chicken Burger\").withCalories(300).withDate(new Date("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                    \"2020-03-25T16:49:40.210009\")).withTags(\"fastfood\", \"western\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Food FRIES \u003d new FoodBuilder().withName(\"French Fries\").withDate(new Date("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \"2020-03-25T16:49:40.210009\")).withCalories(450).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Food LATTE \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            new FoodBuilder().withName(\"Vanilla Latte\").withCalories(300).withDate(new Date("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                    \"2020-03-25T16:49:40.210009\")).withTags(\"drinks\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Food COKE \u003d new FoodBuilder().withName(\"Coke\").withDate(new Date("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \"2020-03-25T16:49:40.210009\")).withCalories(1200).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Food PIZZA \u003d new FoodBuilder().withName(\"BBQ Pizza\").withDate(new Date("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \"2020-03-25T16:49:40.210009\")).withCalories(50).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Food HOTDOG \u003d new FoodBuilder().withName(\"Hotdog\").withDate(new Date("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \"2020-03-25T16:49:40.210009\")).withCalories(320).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Food MILKSHAKE \u003d new FoodBuilder().withName(\"Chocolate Milkshake\").withDate(new Date("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \"2020-03-25T16:49:40.210009\")).withCalories(1200).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Food BAGUETTE \u003d new FoodBuilder().withName(\"Baguette\").withDate(new Date("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \"2020-03-25T16:49:40.210009\")).withCalories(420).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    // ADD AFTER INCORPORATING COMMANDS"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    //// Manually added - Food\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    //public static final Food AMY \u003d new FoodBuilder().withName(VALID_NAME_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    //public static final Food BOB \u003d new FoodBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    //        .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final String KEYWORD_MATCHING_PIZZA \u003d \"pizza\"; // A keyword that matches PIZZA"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    private TypicalFood() {} // prevents instantiation"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     * Returns an {@code FoodBook} with all the typical food."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static FoodBook getTypicalFoodBook() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        FoodBook ab \u003d new FoodBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        for (Food food : getTypicalFood()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "            ab.addFood(food);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static List\u003cFood\u003e getTypicalFood() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(PASTA, BURGER, FRIES, LATTE, COKE, PIZZA, HOTDOG));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 22,
      "akhilvuputuri": 42
    }
  },
  {
    "path": "src/test/java/seedu/eylah/diettracker/testutil/TypicalMyself.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "package seedu.eylah.diettracker.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.Myself;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "import seedu.eylah.diettracker.model.food.Food;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " * A utility class containing a list of {@code Food} objects to be used in tests."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "public class TypicalMyself {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Food PASTA \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            new FoodBuilder().withName(\"Mushroom Pasta\").withCalories(1200).withDate(new Date("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "                    \"2020-03-25T16:49:40.210009\")).withTags(\"italian\").build();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Food MILKSHAKE \u003d new FoodBuilder().withName(\"Chocolate Milkshake\").withDate(new Date("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \"2020-03-25T16:49:40.210009\")).withCalories(1200).build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final Food BAGUETTE \u003d new FoodBuilder().withName(\"Baguette\").withDate(new Date("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "            \"2020-03-25T16:49:40.210009\")).withCalories(420).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static final String KEYWORD_MATCHING_PIZZA \u003d \"pizza\"; // A keyword that matches PIZZA"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    private TypicalMyself() {} // prevents instantiation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     * Returns a {@code Myself} with all the typical user metrics."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    public static Myself getTypicalMyself() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        Myself ms \u003d new Myself();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "        return ms;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jarrod-Bob"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jarrod-Bob": 33
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/logic/ExpenseSplitterLogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.EntryBuilder.DEFAULT_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.AddItemCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyPersonAmountBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyReceiptBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.SplitterModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.SplitterModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Entry;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.storage.JsonPersonAmountBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.storage.JsonReceiptBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.storage.SplitterStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.storage.SplitterStorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class ExpenseSplitterLogicManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private SplitterModel model \u003d new SplitterModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private SplitterLogic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //Create for Person Amount Book."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        JsonPersonAmountBookStorage personAmountBookStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            new JsonPersonAmountBookStorage(temporaryFolder.resolve(\"personamount.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // Next need to create for Receipt."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        JsonReceiptBookStorage receiptBookStorage \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            new JsonReceiptBookStorage(temporaryFolder.resolve(\"receiptbook.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //Creating the storage for expense splitter."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        SplitterStorage storage \u003d new SplitterStorageManager(personAmountBookStorage,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            receiptBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        logic \u003d new SplitterLogicManager(model, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        JsonPersonAmountBookStorage personAmountBookStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            new JsonPersonAmountBookIoExceptionThrowingStub(temporaryFolder"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                .resolve(\"ioExceptionPersonAmountBook.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        JsonReceiptBookStorage receiptBookStorage \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            new JsonReceiptBookIoExceptionThrowingStub(temporaryFolder"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                .resolve(\"ioExceptionReceiptBook.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        SplitterStorageManager storage \u003d new SplitterStorageManager(personAmountBookStorage, receiptBookStorage,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            userPrefsStorage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        logic \u003d new SplitterLogicManager(model, storage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //Execute addItemCommand"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        String addItemCommand \u003d AddItemCommand.COMMAND_WORD + \" -i \" + DEFAULT_ITEM.getItemName().toString()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            + \" -p \" + DEFAULT_ITEM.getItemPrice().toString().substring(1) + \" -n \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            + TypicalPersons.DARREN.getName().toString()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            + \" -n \" + TypicalPersons.ELYSHA.getName().toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Entry expectedEntry \u003d new EntryBuilder().entryBuilderVersionTwo().build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        SplitterModelManager expectedModel \u003d new SplitterModelManager();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        expectedModel.addEntry(expectedEntry);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        String expectedMessage \u003d SplitterLogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertCommandFailure(addItemCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @see#assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @see#assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        SplitterModel expectedModel \u003d new SplitterModelManager(model.getReceiptBook(),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            model.getPersonAmountBook(), new UserPrefs());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @see#assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                                      String expectedMessage, SplitterModel expectedModel) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @see#assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static class JsonPersonAmountBookIoExceptionThrowingStub extends JsonPersonAmountBookStorage {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        private JsonPersonAmountBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        public void savePersonAmountBook(ReadOnlyPersonAmountBook personAmountBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static class JsonReceiptBookIoExceptionThrowingStub extends JsonReceiptBookStorage {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        private JsonReceiptBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        public void saveReceiptBook(ReadOnlyReceiptBook receiptBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 191
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/logic/commands/AddItemCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.commons.util.CalculateUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.ModelStub;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.PersonAmountBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyPersonAmountBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.Item;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Entry;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Receipt;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.testutil.TypicalItem;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class AddItemCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private final Item item \u003d TypicalItem.STEAMBOAT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private final ArrayList\u003cPerson\u003e persons \u003d TypicalPersons.getTypicalPersonsArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private final Amount amount \u003d CalculateUtil.calculatePricePerPerson(item.getItemPrice().getItemPrice(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            new BigDecimal(persons.size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private final Entry entry \u003d new Entry(item, persons);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void constructor_allNull_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddItemCommand(null, null, null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void constructor_nullItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddItemCommand(null, persons, amount));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void constructor_nullPersons_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddItemCommand(item, null, amount));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void constructor_nullAmount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddItemCommand(item, persons, null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void constructor_nullItemNullPersons_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddItemCommand(null, null, amount));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void constructor_nullItemNullAmount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddItemCommand(null, persons, null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void constructor_nullPersonsNullAmount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddItemCommand(item, null, null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void execute_receiptIsDone_addUnsuccessful() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ModelStubReceiptDone modelStub \u003d new ModelStubReceiptDone();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        modelStub.getReceipt().makeDone();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        CommandResult commandResult \u003d new AddItemCommand(item, persons, amount).execute(modelStub);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(AddItemCommand.MESSAGE_RECEIPT_DONE, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void execute_receiptAddEntry_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ModelStubAcceptingEntry modelStub \u003d new ModelStubAcceptingEntry();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        modelStub.addEntry(entry);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        CommandResult commandResult \u003d new AddItemCommand(item, persons, amount).execute(modelStub);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(String.format(AddItemCommand.MESSAGE_SUCCESS, entry), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void execute_receiptAddEntryDoesNotHavePersonsAddPersons_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ModelStubAcceptingEntry modelStub \u003d new ModelStubAcceptingEntry();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        modelStub.addEntry(entry);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        for (Person person : persons) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            modelStub.addPerson(person);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(persons, modelStub.getPersonAmountBook().getPersonList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        CommandResult commandResult \u003d new AddItemCommand(item, persons, amount).execute(modelStub);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(String.format(AddItemCommand.MESSAGE_SUCCESS, entry), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void execute_receiptAddEntryHavePersonsAddAmount_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ModelStubAcceptingEntry modelStub \u003d new ModelStubAcceptingEntry();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        modelStub.addEntry(entry);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        for (Person person : persons) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            modelStub.addPerson(person);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        for (Person person : persons) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            modelStub.addAmount(person, amount);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(persons, modelStub.getPersonAmountBook().getPersonList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        CommandResult commandResult \u003d new AddItemCommand(item, persons, amount).execute(modelStub);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(String.format(AddItemCommand.MESSAGE_SUCCESS, entry), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        AddItemCommand addItemCommand \u003d new AddItemCommand(item, persons, amount);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertTrue(addItemCommand.equals(addItemCommand));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        //different types -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertFalse(addItemCommand.equals(1));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        //null -\u003e returns false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertFalse(addItemCommand.equals(null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private class ModelStubReceiptDone extends ModelStub {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        final Receipt receipt \u003d new Receipt();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public boolean isReceiptDone() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return receipt.isDone();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public Receipt getReceipt() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return this.receipt;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * This model stub accepts adding of entries."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private class ModelStubAcceptingEntry extends ModelStub {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        final Receipt receipt \u003d new Receipt();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        final PersonAmountBook personAmountBook \u003d new PersonAmountBook();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public boolean isReceiptDone() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return receipt.isDone();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public Receipt getReceipt() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return this.receipt;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return personAmountBook.hasPerson(person);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            personAmountBook.addPerson(person);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public Person getPerson(Person person) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return personAmountBook.getPerson(person);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public void addAmount(Person person, Amount amount) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            requireAllNonNull(person, amount);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            personAmountBook.addAmount(person, amount);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public ReadOnlyPersonAmountBook getPersonAmountBook() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return personAmountBook;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            requireNonNull(entry);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            this.receipt.addEntry(entry);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 203,
      "WillySeahh": 2
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/logic/commands/BackCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.commands.BackCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.SplitterModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.SplitterModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class BackCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private SplitterModel splitterModel \u003d new SplitterModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private SplitterModel expectedSplitterModel \u003d new SplitterModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void execute_back_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_SUCCESS, false, true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        assertCommandSuccess(new BackCommand(), splitterModel, expectedCommandResult, expectedSplitterModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        BackCommand backCommand \u003d new BackCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(backCommand.equals(backCommand));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(backCommand.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(backCommand.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 23,
      "WillySeahh": 16
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/logic/commands/ClearReceiptCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.ModelStub;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Entry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Receipt;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.testutil.TypicalEntries;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class ClearReceiptCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static final Entry ENTRY_ONE \u003d TypicalEntries.ENTRY_ONE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static final Entry ENTRY_TWO \u003d TypicalEntries.ENTRY_TWO;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static final Entry ENTRY_THREE \u003d TypicalEntries.ENTRY_THREE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void execute_clearReceipt_successful() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ModelStubPopulatedReceipt modelStub \u003d new ModelStubPopulatedReceipt();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        modelStub.addEntry(ENTRY_ONE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        modelStub.addEntry(ENTRY_TWO);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        modelStub.addEntry(ENTRY_THREE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        modelStub.getReceipt().makeDone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        CommandResult commandResult \u003d new ClearReceiptCommand().execute(modelStub);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        // confirm that the Receipt is empty."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertTrue(modelStub.getReceipt().getReceipt().isEmpty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(ClearReceiptCommand.MESSAGE_SUCCESS, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void execute_makeReceiptUndone_successful() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ModelStubPopulatedReceipt modelStub \u003d new ModelStubPopulatedReceipt();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        modelStub.addEntry(ENTRY_ONE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        modelStub.addEntry(ENTRY_TWO);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        modelStub.addEntry(ENTRY_THREE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        modelStub.getReceipt().makeDone();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        CommandResult commandResult \u003d new ClearReceiptCommand().execute(modelStub);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        // confirm that the Receipt is made undone."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertFalse(modelStub.getReceipt().isDone());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(ClearReceiptCommand.MESSAGE_SUCCESS, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * This model stub accepts adding of entries and deleting of entries, so as to populate the"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * receipt with entries."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private class ModelStubPopulatedReceipt extends ModelStub {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        final Receipt receipt \u003d new Receipt();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public boolean isReceiptDone() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return receipt.isDone();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public Receipt getReceipt() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return this.receipt;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public void clearReceipt() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            receipt.clearReceipt();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            requireNonNull(entry);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            this.receipt.addEntry(entry);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 84
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        // different back value -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        // different back value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 11,
      "WillySeahh": 47
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.parser.SplitterCliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.parser.SplitterCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.parser.SplitterCliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.PersonAmountBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.SplitterModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String VALID_NAME_ANNA \u003d \"anna\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String VALID_NAME_BRANDON \u003d \"brandon\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String VALID_NAME_CHARLIE \u003d \"charlie\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String VALID_ITEMNAME_CHICKENRICE \u003d \"Chicken Rice\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String VALID_ITEMNAME_PIZZA \u003d \"pizza\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String VALID_ITEMPRICE_CHICKENRICE \u003d \"3.50\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String VALID_ITEMPRICE_PIZZA \u003d \"25\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String ITEMNAME_DESC_CHICKENRICE \u003d \" \" + PREFIX_ITEM + \" \" + VALID_ITEMNAME_CHICKENRICE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String ITEMNAME_DESC_PIZZA \u003d \" \" + PREFIX_ITEM + \" \" + VALID_ITEMNAME_PIZZA;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String ITEMPRICE_DESC_CHICKENRICE \u003d \" \" + PREFIX_PRICE + \" \" + VALID_ITEMPRICE_CHICKENRICE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String ITEMPRICE_DESC_PIZZA \u003d \" \" + PREFIX_PRICE + \" \" + VALID_ITEMPRICE_PIZZA;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String NAME_DESC_ANNA \u003d \" \" + PREFIX_NAME + \" \" + VALID_NAME_ANNA;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String NAME_DESC_BRANDON \u003d \" \" + PREFIX_NAME + \" \" + VALID_NAME_BRANDON;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String NAME_DESC_CHARLIE \u003d \" \" + PREFIX_NAME + \" \" + VALID_NAME_CHARLIE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String INVALID_ITEMNAME_DESC \u003d \" \" + PREFIX_ITEM"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \" \" + \"Chicken\u0026Rice\"; // \u0027\u0026\u0027 not allowed in item names"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String INVALID_ITEMPRICE_DESC \u003d \" \" + PREFIX_PRICE"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \" \" + \"3.P0\"; // only numbers are allowed"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \" \" + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static void assertCommandSuccess(Command\u003cSplitterModel\u003e command, SplitterModel actualSplitterModel,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                                            CommandResult expectedCommandResult, SplitterModel expectedSplitterModel) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            CommandResult result \u003d command.execute(actualSplitterModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            assertEquals(expectedSplitterModel, actualSplitterModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, SplitterModel, CommandResult, SplitterModel)}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static void assertCommandSuccess(Command command, SplitterModel actualSplitterModel, String expectedMessage,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                                            SplitterModel expectedSplitterModel) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        assertCommandSuccess(command, actualSplitterModel, expectedCommandResult, expectedSplitterModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * - the person amount book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static void assertCommandFailure(Command\u003cSplitterModel\u003e command, SplitterModel actualSplitterModel,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        PersonAmountBook expectedPersonAmountBook \u003d new PersonAmountBook(actualSplitterModel.getPersonAmountBook());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualSplitterModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualSplitterModel));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        assertEquals(expectedPersonAmountBook, actualSplitterModel.getPersonAmountBook());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        assertEquals(expectedFilteredList, actualSplitterModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * {@code model}\u0027s person amount book."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static void showPersonAtIndex(SplitterModel splitterModel, Index targetIndex) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c splitterModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        Person person \u003d splitterModel.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        splitterModel.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        assertEquals(1, splitterModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sheexiong": 28,
      "ailanthustng": 22,
      "WillySeahh": 74
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/logic/commands/DeleteItemCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.commons.util.CalculateUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.ModelStub;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.PersonAmountBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyPersonAmountBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.Item;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Entry;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Receipt;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.testutil.TypicalItem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class DeleteItemCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private final Item item \u003d TypicalItem.STEAMBOAT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private final ArrayList\u003cPerson\u003e persons \u003d TypicalPersons.getTypicalPersonsArrayList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private final Amount amount \u003d CalculateUtil.calculatePricePerPerson(item.getItemPrice().getItemPrice(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            new BigDecimal(persons.size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private final Entry entry \u003d new Entry(item, persons);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteItemCommand(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void execute_receiptIsDone_deleteUnsuccessful() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ModelStubReceiptDone modelStub \u003d new ModelStubReceiptDone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        modelStub.getReceipt().makeDone();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(\"1\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        CommandResult commandResult \u003d new DeleteItemCommand(index).execute(modelStub);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(DeleteItemCommand.MESSAGE_RECEIPT_DONE, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void execute_receiptDeleteEntry_deleteSuccessful() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ModelStubAcceptingEntryDeletingEntry modelStub \u003d new ModelStubAcceptingEntryDeletingEntry();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        modelStub.addEntry(entry);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        for (Person person : persons) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            modelStub.addPerson(person);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(\"1\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        CommandResult commandResult \u003d new DeleteItemCommand(index).execute(modelStub);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(String.format(DeleteItemCommand.MESSAGE_DELETE_PERSON_SUCCESS, index.getOneBased()),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void execute_receiptDeleteEntryRemoveAmount_addSuccessfulremoveSuccessful() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ModelStubAcceptingEntryDeletingEntry modelStub \u003d new ModelStubAcceptingEntryDeletingEntry();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        modelStub.addEntry(entry);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        for (Person person : persons) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            modelStub.addPerson(person);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        for (Person person : persons) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            modelStub.addAmount(person, amount);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(\"1\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        CommandResult commandResult \u003d new DeleteItemCommand(index).execute(modelStub);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(persons, modelStub.getPersonAmountBook().getPersonList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(String.format(DeleteItemCommand.MESSAGE_DELETE_PERSON_SUCCESS, index.getOneBased()),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void equals() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(\"1\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        DeleteItemCommand deleteItemCommand \u003d new DeleteItemCommand(index);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertTrue(deleteItemCommand.equals(deleteItemCommand));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        //different types -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertFalse(deleteItemCommand.equals(1));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        //null -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertFalse(deleteItemCommand.equals(null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * This model stub is meant for a receipt that is to be made done for testing purposes."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private class ModelStubReceiptDone extends ModelStub {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        final Receipt receipt \u003d new Receipt();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public boolean isReceiptDone() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return receipt.isDone();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public Receipt getReceipt() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return this.receipt;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * This model stub accepts adding of entries and deleting of entries."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private class ModelStubAcceptingEntryDeletingEntry extends ModelStub {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        final Receipt receipt \u003d new Receipt();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        final PersonAmountBook personAmountBook \u003d new PersonAmountBook();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public boolean isReceiptDone() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return receipt.isDone();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public Receipt getReceipt() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return this.receipt;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return personAmountBook.hasPerson(person);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            personAmountBook.addPerson(person);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public Person getPerson(Person person) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return personAmountBook.getPerson(person);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public void addAmount(Person person, Amount amount) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            requireAllNonNull(person, amount);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            personAmountBook.addAmount(person, amount);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public void removeAmount(Person person, Amount amount) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            requireAllNonNull(person, amount);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            personAmountBook.removeAmount(person, amount);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public ReadOnlyPersonAmountBook getPersonAmountBook() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return personAmountBook;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            requireNonNull(entry);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            this.receipt.addEntry(entry);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public void deleteEntry(int index) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            receipt.deleteEntry(index);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public Entry getEntry(int index) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return receipt.getEntry(index);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 191
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/logic/commands/DoneReceiptCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.ModelStub;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Entry;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Receipt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.testutil.TypicalEntries;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class DoneReceiptCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static final Entry ENTRY_ONE \u003d TypicalEntries.ENTRY_ONE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void execute_receiptIsAlreadyDone_markAsDoneUnsuccessful() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ModelStubReceiptToBeMadeDone modelStub \u003d new ModelStubReceiptToBeMadeDone();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        //add an Entry to simulate user adding an item"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        modelStub.addEntry(ENTRY_ONE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        modelStub.getReceipt().makeDone();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        CommandResult commandResult \u003d new DoneReceiptCommand().execute(modelStub);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        // confirm that receipt is marked as done"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertTrue(modelStub.getReceipt().isDone());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(DoneReceiptCommand.MESSAGE_RECEIPT_DONE, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void execute_receiptMadeDone_markAsDoneSuccessful() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ModelStubReceiptToBeMadeDone modelStub \u003d new ModelStubReceiptToBeMadeDone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        //add an Entry to simulate user adding an item"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        modelStub.addEntry(ENTRY_ONE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        CommandResult commandResult \u003d new DoneReceiptCommand().execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        // confirm that receipt is marked as done"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertTrue(modelStub.getReceipt().isDone());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(DoneReceiptCommand.MESSAGE_SUCCESS, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * This model stub accepts adding of entries and deleting of entries, so as the mark Receipt"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * as done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private class ModelStubReceiptToBeMadeDone extends ModelStub {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        final Receipt receipt \u003d new Receipt();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public boolean isReceiptDone() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return receipt.isDone();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public Receipt getReceipt() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return this.receipt;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public void addEntry(Entry entry) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            requireNonNull(entry);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            this.receipt.addEntry(entry);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        public String listReceipt() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            return receipt.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 75,
      "WillySeahh": 2
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.SplitterModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.SplitterModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private SplitterModel splitterModel \u003d new SplitterModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private SplitterModel expectedSplitterModel \u003d new SplitterModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, true, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), splitterModel, expectedCommandResult, expectedSplitterModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        ExitCommand exitCommand \u003d new ExitCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(exitCommand.equals(exitCommand));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(exitCommand.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(exitCommand.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 23,
      "WillySeahh": 18
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/logic/commands/ListAmountCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalEntries.getTypicalReceiptBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalPersons.getTypicalPersonAmountBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalPersons.getTypicalPersonAmountBookToString;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.SplitterModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.SplitterModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListAmountCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class ListAmountCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private SplitterModel splitterModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private SplitterModel expectedSplitterModel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        splitterModel \u003d new SplitterModelManager(getTypicalReceiptBook(), getTypicalPersonAmountBook(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        expectedSplitterModel \u003d new SplitterModelManager(splitterModel.getReceiptBook(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            splitterModel.getPersonAmountBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertCommandSuccess(new ListAmountCommand(), splitterModel, getTypicalPersonAmountBookToString()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            + ListAmountCommand.MESSAGE_SUCCESS, expectedSplitterModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        showPersonAtIndex(splitterModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertCommandSuccess(new ListAmountCommand(), splitterModel, getTypicalPersonAmountBookToString()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            + ListAmountCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                expectedSplitterModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        ListAmountCommand listAmountCommand \u003d new ListAmountCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(listAmountCommand.equals(listAmountCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(listAmountCommand.equals(1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(listAmountCommand.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 8,
      "WillySeahh": 60
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/logic/commands/ListReceiptCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalEntries.getTypicalReceiptBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalEntries.getTypicalReceiptBookToString;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalPersons.getTypicalPersonAmountBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.SplitterModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.SplitterModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListReceiptCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class ListReceiptCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private SplitterModel splitterModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private SplitterModel expectedSplitterModel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        splitterModel \u003d new SplitterModelManager(getTypicalReceiptBook(), getTypicalPersonAmountBook(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        expectedSplitterModel \u003d new SplitterModelManager(splitterModel.getReceiptBook(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            splitterModel.getPersonAmountBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertCommandSuccess(new ListReceiptCommand(), splitterModel,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            getTypicalReceiptBookToString() + ListReceiptCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            expectedSplitterModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        showPersonAtIndex(splitterModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertCommandSuccess(new ListReceiptCommand(), splitterModel, getTypicalReceiptBookToString()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                + ListReceiptCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            expectedSplitterModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        ListReceiptCommand listReceiptCommand \u003d new ListReceiptCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(listReceiptCommand.equals(listReceiptCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(listReceiptCommand.equals(1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(listReceiptCommand.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 67
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/logic/commands/NewReceiptCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalEntries.getTypicalReceiptBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalPersons.getTypicalPersonAmountBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.SplitterModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.SplitterModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class NewReceiptCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private SplitterModel splitterModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private SplitterModel expectedSplitterModel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        splitterModel \u003d new SplitterModelManager(getTypicalReceiptBook(), getTypicalPersonAmountBook(),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        expectedSplitterModel \u003d new SplitterModelManager(splitterModel.getReceiptBook(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                splitterModel.getPersonAmountBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 27
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/logic/commands/PaidCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalPersons.getTypicalPersonAmountBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.logic.command.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.logic.command.exception.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ModelStub;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.PersonAmountBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyPersonAmountBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReceiptStub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Receipt;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class PaidCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void constructor_nullPaidCommand_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new PaidCommand(null, null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * For this test case I am testing if the PaidCommand is working as expected with a"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * pre creatied personamount book, with TYPICALPERSON.ALICE as index 1 and deducting $1 from ALICE."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * The expected output should be ALICE\u0027s Amount dropping from $3.50"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * to $2.50."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void execute_paidCommandAcceptedByModel_paidSuccessful() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        ModelStubPaidCommand modelStub \u003d new ModelStubPaidCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // Ensuring that the receipt is done before I can use PaidCommand."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        modelStub.receipt.makeDone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        CommandResult commandResult \u003d new PaidCommand(ParserUtil.parseIndex(\"1\"), \"1\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            .execute(modelStub);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(String.format(PaidCommand.MESSAGE_SUCCESS + TypicalPersons.ALICE.getName()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            + \". Amount owed decreased from \" + \"$3.50 to $2.50.\"), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * For this test case I am testing if the PaidCommand is working as expected by throwing an exception when"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * the current receipt is still in process."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * `donereceipt` command must be execute before PaidCommand can be executed"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void execute_paidCommandAcceptedByModel_paidUnsuccessful() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        ModelStubPaidCommand modelStub \u003d new ModelStubPaidCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // Ensuring that the receipt is NOT done so I cannot use PaidCommand."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        CommandResult commandResult \u003d new PaidCommand(ParserUtil.parseIndex(\"1\"), \"1\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            .execute(modelStub);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(String.format(PaidCommand.MESSAGE_RECEIPT_UNDONE), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * For this test case I am testing if the PaidCommand is working as expected by"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * inputting a wrong amount value. Such as -1."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void execute_paidCommandFailureDueToIncorrectAmount() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        ModelStubPaidCommand modelStub \u003d new ModelStubPaidCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // Ensuring that the receipt is done so I can use PaidCommand."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        modelStub.receipt.makeDone();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        String test;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            CommandResult commandResult \u003d new PaidCommand(ParserUtil.parseIndex(\"1\"), \"-1\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                .execute(modelStub);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            test \u003d \"pass\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            // working as expected. Because amount paid cannot be negative"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            test \u003d \"fail\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(test.equals(\"fail\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * For this test case I am testing if the PaidCommand is working as expected with a"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * pre creatied personamount book, with TYPICALPERSON.ALICE as index 1 and deducting fully from ALICE."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * The expected output should be ALICE\u0027s Amount dropping from $3.50"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * to $0.00."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void execute_paidCommandAcceptedByModel_paidFullySuccessful() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        ModelStubPaidCommand modelStub \u003d new ModelStubPaidCommand();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // Ensuring that the receipt is done before I can use PaidCommand."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        modelStub.receipt.makeDone();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        CommandResult commandResult \u003d new PaidCommand(ParserUtil.parseIndex(\"1\"), \"3.50\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            .execute(modelStub);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //System.out.println(modelStub.personAmountBook.getPersonList().size());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(String.format(PaidCommand.MESSAGE_SUCCESS + TypicalPersons.ALICE.getName()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            + \". Amount owed decreased from \" + \"$3.50 to $0.00.\"), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * For this test case I am testing if the PaidCommand is working as expected with a"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * pre creatied personamount book, with TYPICALPERSON.ALICE as index 1 and deducting fully from ALICE."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * ALICE should be deleted from the list since she owes $0.00."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Ensuring that the person at INDEX 0 is different."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Previously it was ALICE, after command its BOB."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void execute_paidCommandAcceptedByModel_deleteOfPersonSuccessful() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        ModelStubPaidCommand modelStub \u003d new ModelStubPaidCommand();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // Ensuring that the receipt is done before I can use PaidCommand."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        int initialNumberOfPersons \u003d modelStub.personAmountBook.getPersonList().size();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Name initialPersonAtIndexZero \u003d modelStub.personAmountBook.getPersonByIndex(0).getName();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        modelStub.receipt.makeDone();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        CommandResult commandResult \u003d new PaidCommand(ParserUtil.parseIndex(\"1\"), \"3.50\")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            .execute(modelStub);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        int finalNumberOfPersons \u003d modelStub.personAmountBook.getPersonList().size();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Name finalPersonAtIndexZero \u003d modelStub.personAmountBook.getPersonByIndex(0).getName();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //Since I am comparing both int primitives I can use \u003d\u003d"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(initialNumberOfPersons - 1 \u003d\u003d finalNumberOfPersons);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(initialPersonAtIndexZero.equals(finalPersonAtIndexZero));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * For this test case I am testing if the PaidCommand is working as expected by"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * inputting a wrong amount value. Such as passing in an amount that"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * is more than what the ALICE owes."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void execute_paidCommandFailureDueToTooMuchAmount() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        ModelStubPaidCommand modelStub \u003d new ModelStubPaidCommand();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // Ensuring that the receipt is done so I can use PaidCommand."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        modelStub.receipt.makeDone();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        String test;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            CommandResult commandResult \u003d new PaidCommand(ParserUtil.parseIndex(\"1\"), \"5.00\")"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                .execute(modelStub);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            test \u003d \"pass\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        } catch (CommandException ex) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            // working as expected. Because amount paid cannot be more than what the person owes."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            test \u003d \"fail\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(test.equals(\"fail\"));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        PaidCommand paidCommand \u003d new PaidCommand(Index.fromOneBased(1), \"1.00\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(paidCommand.equals(paidCommand));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(paidCommand.equals(1));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //null -\u003e returns false"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(paidCommand.equals(null));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * This tests ensures that if all fields are null then it is not a valid command."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * And that a NullPointerException.class is thrown"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void constructor_allNull_throwsNullPointerException() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new PaidCommand(null, null));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * This tests ensures that if Index field is negative then it is not a valid command."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * And that a NullPointerException.class is thrown"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void constructor_invalidIndex_throwsParseException() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new PaidCommand(ParserUtil.parseIndex(\"-1\"),"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            \"1\"));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * This tests ensures that if all fields are invalid then it is not a valid command."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * And that a NullPointerException.class is thrown"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void constructor_nullIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new PaidCommand(null, \"1\"));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private class ModelStubPaidCommand extends ModelStub {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        private final PersonAmountBook personAmountBook;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        private final Receipt receipt;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        ModelStubPaidCommand() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            personAmountBook \u003d getTypicalPersonAmountBook();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            receipt \u003d new ReceiptStub();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "         * In order to use PaidCommand, I need to ensure the receipt is done."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "         * Hence for this simple stub, I checking if receipt is done."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "         * @return"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        public boolean isReceiptDone() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            return receipt.isDone();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        public ReadOnlyPersonAmountBook getPersonAmountBook() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            return this.personAmountBook;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "         * For this particular test case I am deducting ALICE\u0027s Amount by $1"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "         * @param person TypicalPerson.ALice"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "         * @param amountPaid"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        public void paidPerson(Person person, String amountPaid) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            Amount amount \u003d new Amount(new BigDecimal(amountPaid));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            personAmountBook.removeAmount(person, amount);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 2,
      "ailanthustng": 1,
      "WillySeahh": 281
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/logic/parser/AddItemCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.commands.CommandTestUtil.INVALID_ITEMNAME_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.commands.CommandTestUtil.ITEMNAME_DESC_CHICKENRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.commands.CommandTestUtil.ITEMNAME_DESC_PIZZA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.commands.CommandTestUtil.ITEMPRICE_DESC_CHICKENRICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.commands.CommandTestUtil.ITEMPRICE_DESC_PIZZA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.commands.CommandTestUtil.NAME_DESC_ANNA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.commands.CommandTestUtil.NAME_DESC_BRANDON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.commands.CommandTestUtil.NAME_DESC_CHARLIE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.commands.CommandTestUtil.VALID_ITEMNAME_CHICKENRICE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.commands.CommandTestUtil.VALID_ITEMPRICE_CHICKENRICE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.commands.CommandTestUtil.VALID_NAME_ANNA;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.AddItemCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.Item;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.ItemName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Entry;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.testutil.EntryBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.testutil.TypicalEntries;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class AddItemCommandParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private AddItemCommandParser parser \u003d new AddItemCommandParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void parse_allFieldsPresentSinglePerson_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Entry expectedEntry \u003d TypicalEntries.ENTRY_FIVE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Item expectedItem \u003d expectedEntry.getItem();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ArrayList\u003cPerson\u003e expectedPersons \u003d expectedEntry.getPersonsList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Amount expectedAmount \u003d expectedItem.getAmountPerPerson();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        //whitespace only preamble"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + ITEMNAME_DESC_CHICKENRICE"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                + ITEMPRICE_DESC_CHICKENRICE + NAME_DESC_ANNA,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                new AddItemCommand(expectedItem, expectedPersons, expectedAmount));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void parse_allFieldsPresentMultiplePersons_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Entry expectedEntry \u003d new EntryBuilder(TypicalEntries.ENTRY_SIX).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Item expectedItem \u003d expectedEntry.getItem();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ArrayList\u003cPerson\u003e expectedPersons \u003d expectedEntry.getPersonsList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Amount expectedAmount \u003d expectedItem.getAmountPerPerson();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertParseSuccess(parser, ITEMNAME_DESC_PIZZA + ITEMPRICE_DESC_PIZZA"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                        + NAME_DESC_ANNA + NAME_DESC_BRANDON + NAME_DESC_CHARLIE,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                new AddItemCommand(expectedItem, expectedPersons, expectedAmount));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddItemCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        //missing item name prefix"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertParseFailure(parser, VALID_ITEMNAME_CHICKENRICE + ITEMPRICE_DESC_CHICKENRICE + NAME_DESC_ANNA,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        //missing item price prefix"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertParseFailure(parser, VALID_ITEMPRICE_CHICKENRICE + ITEMNAME_DESC_CHICKENRICE + NAME_DESC_ANNA,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        //missing name prefix"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_ANNA + ITEMNAME_DESC_CHICKENRICE + ITEMPRICE_DESC_CHICKENRICE,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        //missing all prefixes"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertParseFailure(parser, VALID_ITEMNAME_CHICKENRICE + VALID_ITEMPRICE_CHICKENRICE + VALID_NAME_ANNA,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        //invalid item name"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertParseFailure(parser, INVALID_ITEMNAME_DESC + ITEMPRICE_DESC_CHICKENRICE + NAME_DESC_ANNA,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                ItemName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        //invalid item price"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        //        assertParseFailure(parser, INVALID_ITEMPRICE_DESC + ITEMNAME_DESC_CHICKENRICE + NAME_DESC_ANNA,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        //                ItemPrice.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        //invalid name"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + ITEMNAME_DESC_CHICKENRICE + ITEMPRICE_DESC_CHICKENRICE,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 97
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.Prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 4,
      "WillySeahh": 3,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.SplitterModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command\u003cSplitterModel\u003e expectedCommand) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            Command\u003cSplitterModel\u003e command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 5,
      "WillySeahh": 36
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/logic/parser/DeleteItemCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.DeleteItemCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class DeleteItemCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private DeleteItemCommandParser parser \u003d new DeleteItemCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void parse_validArgs_returnsDeleteItemCommand() throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(\"1\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteItemCommand(index));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteItemCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 28
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/logic/parser/PaidCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.logic.commands.PaidCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class PaidCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private PaidCommandParser parser \u003d new PaidCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void parse_validArgsFullAmount_returnsPaidCommand() throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(\"1\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertParseSuccess(parser, \"1\" , new PaidCommand(index , \"all\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void parse_validArgsNotFullAmount_returnsPaidCommand() throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(\"1\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertParseSuccess(parser, \"1 12.50\" , new PaidCommand(index , \"12.50\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertParseFailure(parser , \"a\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT , PaidCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void parse_compulsoryMissing_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, PaidCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertParseFailure(parser, null + \"1\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 45
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.diettracker.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.ItemName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.testutil.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static final String INVALID_NAME \u003d \"P3rm@s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static final String INVALID_ITEM_NAME \u003d \"B33r T()W3R\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static final String VALID_NAME \u003d \"permas\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static final String VALID_ITEM_NAME \u003d \"Beer Tower\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Assert.assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void parseItemName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseItemName((String) null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void parseItemName_invalidItemName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseItemName(INVALID_ITEM_NAME));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void parseItemName_validItemNameWithoutWhiteSpace_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        ItemName itemName \u003d new ItemName(VALID_ITEM_NAME);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(itemName, ParserUtil.parseItemName(VALID_ITEM_NAME));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 1,
      "WillySeahh": 91
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private SplitterModelManager modelManager \u003d new SplitterModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(new PersonAmountBook(), new PersonAmountBook(modelManager.getPersonAmountBook()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //Cannot do 1 for ReceiptBook because Receiptbook automatically"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //starts a receipt when intialized thus causing it not to be equals"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        userPrefs.setPersonAmountBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        userPrefs.setPersonAmountBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void setPersonAmountBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setPersonAmountBookFilePath(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void setPersonAmountBookFilePath_validPath_setsFoodBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        modelManager.setPersonAmountBookFilePath(path);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(path, modelManager.getPersonAmountBookFilePath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 70
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/model/ModelStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Entry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Receipt;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class ModelStub implements SplitterModel {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void setPersonAmountBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Path getPersonAmountBookFilePath() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void addEntry (Entry entry) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void deleteEntry (int index) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Entry getEntry (int index) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void deleteAllEntries() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ReadOnlyPersonAmountBook getPersonAmountBook() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ReadOnlyReceiptBook getReceiptBook() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void paidPerson(Person person, String amountPaid) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public String listAmount() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public String listReceipt() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public boolean isReceiptDone() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Receipt getReceipt() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void clearReceipt() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Person getPerson(Person person) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void addAmount(Person person, Amount amount) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void removeAmount(Person person, Amount amount) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 5,
      "WillySeahh": 129
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/model/PersonAmountBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalPersons.getTypicalPersonAmountBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class PersonAmountBookTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private final PersonAmountBook personAmountBook \u003d new PersonAmountBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(Collections.emptyList(), personAmountBook.getPersonList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e personAmountBook.resetData(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        PersonAmountBook newData \u003d getTypicalPersonAmountBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        personAmountBook.resetData(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(newData, personAmountBook);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        PersonAmountBookStub newData \u003d new PersonAmountBookStub(newPersons);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e personAmountBook.resetData(newData));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e personAmountBook.hasPerson(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void hasPerson_personNotInPersonAmountBook_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertFalse(personAmountBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void hasPerson_personInPersonAmountBook_returnsTrue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        personAmountBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertTrue(personAmountBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        personAmountBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertTrue(personAmountBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e personAmountBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void addAmount_addAmountCorrect_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Person alice \u003d ALICE;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Amount amount \u003d new Amount(new BigDecimal(\"10.00\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        personAmountBook.addPerson(alice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        personAmountBook.addAmount(alice, amount);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder().withName(\"alice seah\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                .withAmount(new BigDecimal(\"13.50\")).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(alice, editedAlice);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void removeAmount_removeAmountCorrect_returnsTrue() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Person alice \u003d ALICE;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Amount amount \u003d new Amount(new BigDecimal(\"1.00\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        personAmountBook.addPerson(alice);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        personAmountBook.removeAmount(alice, amount);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder().withName(\"alice seah\")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "                .withAmount(new BigDecimal(\"2.50\")).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(alice, editedAlice);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static class PersonAmountBookStub implements ReadOnlyPersonAmountBook {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        private final ObservableList\u003cPerson\u003e personsList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        private final UniquePersonList persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        PersonAmountBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            this.personsList.setAll(persons);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return personsList;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        public Person getPersonByIndex(int indexOfPerson) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            requireNonNull(indexOfPerson);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            return persons.getPersonUsingIndex(indexOfPerson);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 135
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/model/ReceiptBookStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Receipt;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.UniqueReceiptList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * A stub class for ReceiptBook."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class ReceiptBookStub implements ReadOnlyReceiptBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private final UniqueReceiptList receipts;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        receipts \u003d new UniqueReceiptList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ReceiptBookStub() {}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ReceiptBookStub(ReadOnlyReceiptBook toBeCopied) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ObservableList\u003cReceipt\u003e getReceiptList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return receipts.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public boolean isContainSingleReceipt() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return receipts.isContainSingleReceipt();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 35
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/model/ReceiptStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Receipt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * This simple ReceiptStub resembles Receipt in Expense Splitter but has limited functionality to ensure that"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * that there is no error."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * Used in :"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * PaidCommandTest"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class ReceiptStub extends Receipt {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void makeDone() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        super.makeDone();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return super.isDone();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 24
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void setPersonAmountBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setPersonAmountBookFilePath(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 16
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/model/item/ItemNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.expensesplitter.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class ItemNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ItemName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ItemName.isValidName(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(ItemName.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(ItemName.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(ItemName.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(ItemName.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(ItemName.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(ItemName.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(ItemName.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(ItemName.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(ItemName.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 4,
      "WillySeahh": 32
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/model/item/ItemPriceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.expensesplitter.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "public class ItemPriceTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ItemPrice(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void constructor_invalidPrice_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        String invalidPrice \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ItemPrice(new BigDecimal(invalidPrice)));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void isValidItemPrice() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // null ItemPrice"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ItemPrice.isValidPrice(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // invalid ItemPrice"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ItemPrice(new BigDecimal(\" \"))); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(ItemPrice.isValidPrice(new BigDecimal(0))); // price must be greater than 0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ItemPrice(new BigDecimal(\"phone\"))); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ItemPrice(new BigDecimal(\"9011p041\")));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // alphabets within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ItemPrice(new BigDecimal(\"9011 4192\")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // spaces within digits"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(ItemPrice.isValidPrice(new BigDecimal(\"123.133\"))); // cannot have more than 3 decimal digits"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // valid ItemPrice"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(ItemPrice.isValidPrice(BigDecimal.valueOf(9))); // exactly 1 number"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(ItemPrice.isValidPrice(BigDecimal.valueOf(9.84)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(ItemPrice.isValidPrice(BigDecimal.valueOf(9999999.12))); // long item price"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 4,
      "WillySeahh": 45
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/model/item/ItemTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.expensesplitter.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalItem.BEERTOWER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalItem.POPCORN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalItem.STEAMBOAT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.expensesplitter.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class ItemTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void isSameItem() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // same item -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(BEERTOWER.isSameItem(BEERTOWER));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(BEERTOWER.isSameItem(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // ADD AFTER COMMANDS INCORPORATED"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //// different name -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //Food editedPasta \u003d new FoodBuilder(PASTA).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //assertFalse(PASTA.isSameFood(editedPasta));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //// same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //editedPasta \u003d new FoodBuilder(PASTA).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //assertTrue(PASTA.isSameFood(editedPasta));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // same Item values -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Item steamboatCopy \u003d new ItemBuilder(STEAMBOAT).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(STEAMBOAT.equals(steamboatCopy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(STEAMBOAT.equals(STEAMBOAT));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(STEAMBOAT.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(STEAMBOAT.equals(BEERTOWER));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // different item -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(STEAMBOAT.equals(POPCORN));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // IMPLEMENT AFTER ADDING COMMANDS"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //// different name -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //Food editedAlice \u003d new FoodBuilder(PASTA).withName(VALID_NAME_BURGER).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //assertFalse(PASTA.equals(editedAlice));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //// different tags -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //editedAlice \u003d new FoodBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        //assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 3,
      "WillySeahh": 60
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/model/person/AmountTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class AmountTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Amount(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void constructor_invalidPrice_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        String invalidAmount \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Amount(new BigDecimal(invalidAmount)));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void isValidAmount() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // null Amount"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Amount.isValidAmount(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // invalid Amount"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Amount(new BigDecimal(\" \"))); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Amount(new BigDecimal(\"phone\"))); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Amount(new BigDecimal(\"9011p041\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Amount(new BigDecimal(\"9011 4192\")));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // spaces within digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(Amount.isValidAmount(new BigDecimal(\"123.133\"))); // cannot have more than 3 decimal digits"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // valid Amount"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(Amount.isValidAmount(BigDecimal.valueOf(9))); // exactly 1 number"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(Amount.isValidAmount(BigDecimal.valueOf(9.84)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(Amount.isValidAmount(BigDecimal.valueOf(9999999.12))); // long amount"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 43
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // Keywords match amount, but does not match name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"3.50\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            .withAmount(new BigDecimal(\"3.50\")).build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 7,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/model/person/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(Name.isValidName(\" peter\")); // spaces followed by a proper name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(Name.isValidName(\"谢谢\")); // chinese names"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(Name.isValidName(\"நன்றி\")); // tamil names"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(Name.isValidName(\"CHARLOTTE\")); // name with all capital letters"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertTrue(Name.isValidName(\"C\")); // name with 1 alphabet"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 8,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/model/person/UniquePersonListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 4
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/model/receipt/EntryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.model.receipt;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalEntries.ENTRY_ONE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalItem.BEERTOWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class EntryTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private final Entry entry \u003d ENTRY_ONE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private final Item item \u003d BEERTOWER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private final ArrayList\u003cPerson\u003e persons \u003d TypicalPersons.getTypicalPersonsArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void constructor_nullItemNullPersons_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Entry(null, null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void constructor_nullItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Entry(null, persons));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void constructor_nullPersons_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Entry(item, null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void isValidItem() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Entry entryTest \u003d new Entry(item, persons);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(entry, entryTest);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void getValidItem() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Item itemTest \u003d entry.getItem();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(item, itemTest);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void getValidPersonsList() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        ArrayList\u003cPerson\u003e personsTest \u003d entry.getPersonsList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(persons, personsTest);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 53
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/model/receipt/ReceiptTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.model.receipt;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalEntries.ENTRY_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalEntries.ENTRY_TWO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class ReceiptTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private final Receipt receipt \u003d new Receipt();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertEquals(Collections.emptyList(), receipt.getReceipt());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void hasEntry_entryNotInReceipt_returnsFalse() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertFalse(receipt.hasEntry(ENTRY_ONE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void hasEntry_entryInReceipt_returnsTrue() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        receipt.addEntry(ENTRY_ONE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertTrue(receipt.hasEntry(ENTRY_ONE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void hasEntry_receiptHasMultipleEntries_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        receipt.addEntry(ENTRY_ONE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        receipt.addEntry(ENTRY_TWO);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertTrue(receipt.hasEntry(ENTRY_ONE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertTrue(receipt.hasEntry(ENTRY_TWO));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void deleteEntry_noEntry_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e receipt.deleteEntry(0));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void deleteEntry_deleteNonExistentIndex_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        receipt.addEntry(ENTRY_ONE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e receipt.deleteEntry(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void isDone_checkIfReceiptInitialisedAsUndone_returnsFalse() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertFalse(receipt.isDone());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void isDone_checkIfReceiptMarkAsDone_returnsTrue() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        receipt.makeDone();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertTrue(receipt.isDone());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void isDone_checkIfReceiptIsUndoneAfterClear_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        receipt.addEntry(ENTRY_ONE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        receipt.makeDone();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        receipt.clearReceipt();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertFalse(receipt.isDone());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public void clearReceipt_checkIfReceiptContainsEntryAfterClearing_returnsFalse() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        receipt.addEntry(ENTRY_ONE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        receipt.clearReceipt();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        assertFalse(receipt.hasEntry(ENTRY_ONE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 78
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/storage/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static final String INVALID_AMOUNT \u003d \"-3.50\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static final String VALID_NAME \u003d BOB.getName().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static final Amount VALID_AMOUNT \u003d BOB.getAmount();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            new JsonAdaptedPerson(INVALID_NAME, VALID_AMOUNT.getBigDecimal());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_AMOUNT.getBigDecimal());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void toModelType_invalidAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            new JsonAdaptedPerson(VALID_NAME, new BigDecimal(INVALID_AMOUNT));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        String expectedMessage \u003d Amount.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void toModelType_nullAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 55
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/storage/JsonPersonAmountBookSplitterStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalPersons.getTypicalPersonAmountBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.PersonAmountBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyPersonAmountBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class JsonPersonAmountBookSplitterStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Paths.get(\"src\", \"test\", \"data\", \"JsonPersonAmountBookStorageTest\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void readPersonAmountBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readPersonAmountBook(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private java.util.Optional\u003cReadOnlyPersonAmountBook\u003e readPersonAmountBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return new JsonPersonAmountBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            .readPersonAmountBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(readPersonAmountBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            readPersonAmountBook(\"notJsonFormatPersonAmountBook.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void readPersonAmountBook_invalidPersonAmountBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            readPersonAmountBook(\"invalidPersonAmountBook.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void readPersonAmountBook_invalidAndValidPersonAmountBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            readPersonAmountBook(\"invalidAndValidPersonAmountBook.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void readAndSavePersonAmountBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempPersonAmountBook.json\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        PersonAmountBook original \u003d getTypicalPersonAmountBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        JsonPersonAmountBookStorage jsonPersonAmountBookStorage \u003d new JsonPersonAmountBookStorage(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        jsonPersonAmountBookStorage.savePersonAmountBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        ReadOnlyPersonAmountBook readBack \u003d jsonPersonAmountBookStorage.readPersonAmountBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(original, new PersonAmountBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        jsonPersonAmountBookStorage.savePersonAmountBook(original, filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        readBack \u003d jsonPersonAmountBookStorage.readPersonAmountBook(filePath).get();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(original, new PersonAmountBook(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        jsonPersonAmountBookStorage.savePersonAmountBook(original); // file path not specified"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        readBack \u003d jsonPersonAmountBookStorage.readPersonAmountBook().get(); // file path not specified"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(original, new PersonAmountBook(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void savePesonAmountBook_nullPersonAmountBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            savePersonAmountBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private void savePersonAmountBook(ReadOnlyPersonAmountBook personAmountBook, String filePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            new JsonPersonAmountBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                .savePersonAmountBook(personAmountBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void savePersonAmountBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e savePersonAmountBook(new PersonAmountBook(), null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 1,
      "WillySeahh": 120
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/storage/JsonReceiptBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyReceiptBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class JsonReceiptBookStorageTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonReceiptBookStorageTest\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void readReceiptBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readReceiptBook(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private java.util.Optional\u003cReadOnlyReceiptBook\u003e readReceiptBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return new JsonReceiptBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                .readReceiptBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        assertFalse(readReceiptBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                readReceiptBook(\"notJsonFormatReceiptBook.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void readReceiptBook_invalidReceiptBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                readReceiptBook(\"invalidReceiptBook.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void readReceiptBook_invalidAndValidReceiptBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                readReceiptBook(\"invalidAndValidReceiptBook.json\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 65
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/storage/JsonSerializablePersonAmountBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.PersonAmountBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class JsonSerializablePersonAmountBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        .get(\"src\", \"test\", \"data\", \"JsonSerializablePersonAmountBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAmountBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAmountBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAmountBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void toModelType_typicalPersonAmountFile_success() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        JsonSerializablePersonAmountBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            JsonSerializablePersonAmountBook.class).get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        PersonAmountBook personAmountBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        PersonAmountBook typicalPersonAmountBook \u003d TypicalPersons.getTypicalPersonAmountBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(personAmountBookFromFile, typicalPersonAmountBook);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        JsonSerializablePersonAmountBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            JsonSerializablePersonAmountBook.class).get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        JsonSerializablePersonAmountBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            JsonSerializablePersonAmountBook.class).get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializablePersonAmountBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            dataFromFile::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 53
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/storage/JsonSerializableReceiptBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReceiptBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.testutil.TypicalReceipt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class JsonSerializableReceiptBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            .get(\"src\", \"test\", \"data\", \"JsonSerializableReceiptBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final Path TYPICAL_RECEIPT_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalReceiptBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final Path INVALID_RECEIPT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidReceiptBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final Path DUPLICATE_RECEIPT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateReceiptBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void toModelType_typicalReceiptFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        JsonSerializableReceiptBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_RECEIPT_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                JsonSerializableReceiptBook.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        ReceiptBook receiptBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        ReceiptBook typicalReceiptBook \u003d TypicalReceipt.getTypicalReceiptBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        assertEquals(receiptBookFromFile, typicalReceiptBook);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void toModelType_invalidReceiptFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        JsonSerializableReceiptBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_RECEIPT_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                JsonSerializableReceiptBook.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void toModelType_duplicateReceipts_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        JsonSerializableReceiptBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_RECEIPT_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                JsonSerializableReceiptBook.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableReceiptBook.MESSAGE_DUPLICATE_RECEIPT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 47
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/storage/JsonUserPrefsSplitterStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class JsonUserPrefsSplitterStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 3,
      "WillySeahh": 84
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/storage/SplitterStorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalPersons.getTypicalPersonAmountBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import static seedu.eylah.expensesplitter.testutil.TypicalReceipt.getTypicalReceiptBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.commons.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.PersonAmountBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyPersonAmountBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReadOnlyReceiptBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReceiptBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class SplitterStorageManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private SplitterStorageManager storageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        JsonPersonAmountBookStorage personAmountBookStorage \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            new JsonPersonAmountBookStorage(getTempFilePath(\"pABook\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        JsonReceiptBookStorage receiptBookStorage \u003d new JsonReceiptBookStorage(getTempFilePath(\"rBook\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        storageManager \u003d new SplitterStorageManager(personAmountBookStorage, receiptBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void personAmountBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "         * {@link JsonPersonAmountBookStorage} class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonPersonAmountBookStorageTest} class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        PersonAmountBook original \u003d getTypicalPersonAmountBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        storageManager.savePersonAmountBook(original);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        ReadOnlyPersonAmountBook retrieved \u003d storageManager.readPersonAmountBook().get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertEquals(original, new PersonAmountBook(retrieved));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public void getPersonAmountBookFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        assertNotNull(storageManager.getPersonAmountBookFilePath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void receiptBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "         * {@link JsonReceiptBookStorage} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonReceiptBookStorageTest} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        ReceiptBook original \u003d getTypicalReceiptBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        storageManager.saveReceiptBook(original);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        ReadOnlyReceiptBook retrieved \u003d storageManager.readReceiptBook().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        assertEquals(original, new ReceiptBook(retrieved));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public void getReceiptBookFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        assertNotNull(storageManager.getReceiptBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 26,
      "WillySeahh": 51
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/testutil/AmountBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * A utility class to help with building Amount objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class AmountBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Double DEFAULT_DOUBLEAMOUNT_CHICKENRICE \u003d 3.50;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private BigDecimal amount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public AmountBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        amount \u003d new BigDecimal(DEFAULT_DOUBLEAMOUNT_CHICKENRICE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Sets the {@code BigDecimal} of the {@code Amount} that we are building."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public AmountBuilder withDoubleAmount(Double amount) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.amount \u003d new BigDecimal(amount);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Sets the {@code BigDecimal} of the {@code Amount} that we are building."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public AmountBuilder withStringAmount(String amount) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.amount \u003d new BigDecimal(amount);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Amount build() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return new Amount(amount);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 41
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * A set of assertions methods using for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "                                    Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 35
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/testutil/EntryBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Entry;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * A utility class to help with building Entry objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class EntryBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Item DEFAULT_ITEM \u003d TypicalItem.BEERTOWER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final ArrayList\u003cPerson\u003e DEFAULT_PERSONS \u003d TypicalPersons.getTypicalPersonsArrayList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final ArrayList\u003cPerson\u003e DEFAULT_PERSONS2 \u003d TypicalPersons.getTypicalPersonsArrayListV2();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private Item item;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private ArrayList\u003cPerson\u003e persons;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public EntryBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        item \u003d DEFAULT_ITEM;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        persons \u003d DEFAULT_PERSONS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public EntryBuilder(Entry entryToCopy) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        item \u003d entryToCopy.getItem();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        persons \u003d entryToCopy.getPersonsList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * This specific function is to test a new set of Persons."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * @return an Entry Builder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public EntryBuilder entryBuilderVersionTwo() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        EntryBuilder eb \u003d new EntryBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        eb.persons \u003d DEFAULT_PERSONS2;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return eb;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Sets the {@code item} of the {@code Entry} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public EntryBuilder withItem(Item item) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Sets the {@code persons} of the {@code Entry} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public EntryBuilder withPersons(ArrayList\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.persons \u003d persons;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public Entry build() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return new Entry(item, persons);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 49,
      "WillySeahh": 15
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/testutil/ItemBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.expensesplitter.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.ItemName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.ItemPrice;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * A utility class to help with building Item objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class ItemBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Chicken Rice\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final BigDecimal DEFAULT_PRICE \u003d new BigDecimal(\"3.50\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final BigDecimal DEFAULT_AMOUNT_PER_PERSON \u003d new BigDecimal(\"3.50\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private ItemName name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private ItemPrice price;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private Amount amountPerPerson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ItemBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        name \u003d new ItemName(DEFAULT_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        price \u003d new ItemPrice(DEFAULT_PRICE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        amountPerPerson \u003d new Amount(DEFAULT_AMOUNT_PER_PERSON);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Initializes the ItemBuilder with the data of {@code ItemToCopy}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ItemBuilder(Item itemToCopy) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        name \u003d itemToCopy.getItemName();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        price \u003d itemToCopy.getItemPrice();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        amountPerPerson \u003d itemToCopy.getAmountPerPerson();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Sets the {@code ItemName} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ItemBuilder withName(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.name \u003d new ItemName(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Sets the {@code ItemPrice} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public ItemBuilder withPrice(BigDecimal price) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.price \u003d new ItemPrice(price);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Sets the {@code amountPerPerson} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public ItemBuilder withAmountPerPerson(BigDecimal amountPerPerson) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        this.amountPerPerson \u003d new Amount(amountPerPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Item build() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return new Item(name, price, amountPerPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 15,
      "akhilvuputuri": 4,
      "WillySeahh": 48
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/testutil/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Willy Seah\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final BigDecimal DEFAULT_AMOUNT \u003d new BigDecimal(3.50);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        amount \u003d new Amount(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code PersonToCopy}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        amount \u003d personToCopy.getAmount();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Sets the {@code Amount} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public PersonBuilder withAmount(BigDecimal amount) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        this.amount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Builds a Person with name and amount."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return new Person(name, amount);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WillySeahh": 57
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/testutil/ReceiptBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Entry;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Receipt;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * A utility class to help with building Receipt objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class ReceiptBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final ArrayList\u003cEntry\u003e DEFAULT_RECEIPT \u003d TypicalEntries.getTypicalEntries();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final boolean DEFAULT_ISDONE \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private ArrayList\u003cEntry\u003e receipt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public ReceiptBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        receipt \u003d DEFAULT_RECEIPT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        isDone \u003d DEFAULT_ISDONE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public ReceiptBuilder(Receipt receiptToCopy) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        receipt \u003d receiptToCopy.getReceipt();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        isDone \u003d receiptToCopy.isDone();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Sets the {@code receipt} of the {@code Receipt} that we are building."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public ReceiptBuilder withReceipt(ArrayList\u003cEntry\u003e receipt) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.receipt \u003d receipt;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Sets the {@code isDone} of the {@code Receipt} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public ReceiptBuilder withIsDone(boolean isDone) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public Receipt build() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return new Receipt(receipt, isDone);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 49
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/testutil/TypicalAmounts.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Amount;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * A utility class containing a list of {@code Item} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class TypicalAmounts {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Amount CHICKENRICE \u003d new AmountBuilder().build();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Amount PIZZA \u003d new AmountBuilder().withDoubleAmount(25.00).build();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     * Prevents public from instantiating a Typical Item."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private TypicalAmounts () {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 20
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/testutil/TypicalEntries.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "package seedu.eylah.expensesplitter.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReceiptBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Entry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Receipt;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " * A utility class containing a list of {@code Entry} objects to be used in tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "public class TypicalEntries {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    // default entry"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Entry ENTRY_ONE \u003d new EntryBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    // fields below are to make more entries"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static final Item PIZZA \u003d new ItemBuilder().withName(\"pizza\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            .withPrice(new BigDecimal(\"25\"))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            .withAmountPerPerson(new BigDecimal(\"8.33\")).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static final Item PASTA \u003d new ItemBuilder().withName(\"Pasta\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            .withPrice(new BigDecimal(\"5.00\")).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private static final Item NOODLES \u003d new ItemBuilder().withName(\"Noodles\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            .withPrice(new BigDecimal(\"10.00\")).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static final Item CHICKENRICE \u003d new ItemBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static final Person ANNABELLE \u003d new PersonBuilder().withName(\"Annabelle\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static final Person BOBBY \u003d new PersonBuilder().withName(\"Bobby\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static final Person ANNA \u003d new PersonBuilder().withName(\"anna\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            .withAmount(new BigDecimal(\"8.33\")).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static final Person BRANDON \u003d new PersonBuilder().withName(\"brandon\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            .withAmount(new BigDecimal(\"8.33\")).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static final Person CHARLIE \u003d new PersonBuilder().withName(\"charlie\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            .withAmount(new BigDecimal(\"8.33\")).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static final ArrayList\u003cPerson\u003e PERSONS_LIST_TWO \u003d new ArrayList\u003c\u003e(Arrays.asList(ANNABELLE, BOBBY));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static final ArrayList\u003cPerson\u003e PERSONS_LIST_THREE \u003d new ArrayList\u003c\u003e(Arrays.asList(ANNABELLE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static final ArrayList\u003cPerson\u003e PERSONS_LIST_FOUR \u003d new ArrayList\u003c\u003e(Arrays.asList(ANNA));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    private static final ArrayList\u003cPerson\u003e PERSONS_LIST_FIVE \u003d new ArrayList\u003c\u003e(Arrays.asList(ANNA, BRANDON, CHARLIE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    // made entries to simulate receipt"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Entry ENTRY_TWO \u003d new EntryBuilder().withItem(PIZZA)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            .withPersons(PERSONS_LIST_TWO).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Entry ENTRY_THREE \u003d new EntryBuilder().withItem(PASTA)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            .withPersons(PERSONS_LIST_THREE).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final Entry ENTRY_FOUR \u003d new EntryBuilder().withItem(NOODLES)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            .withPersons(PERSONS_LIST_THREE).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Entry ENTRY_FIVE \u003d new EntryBuilder().withItem(CHICKENRICE)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            .withPersons(PERSONS_LIST_FOUR).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Entry ENTRY_SIX \u003d new EntryBuilder().withItem(PIZZA)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            .withPersons(PERSONS_LIST_FIVE).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static ReceiptBook getTypicalReceiptBook() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        ReceiptBook receiptBook \u003d new ReceiptBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        Receipt receipt \u003d new Receipt();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        for (Entry entry : getTypicalEntries()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            receipt.addEntry(entry);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        receiptBook.addReceipt(receipt);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return receiptBook;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static ArrayList\u003cEntry\u003e getTypicalEntries() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ENTRY_ONE, ENTRY_TWO, ENTRY_THREE, ENTRY_FOUR));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static String getTypicalReceiptBookToString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        ReceiptBook receiptBook \u003d new ReceiptBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        Receipt receipt \u003d new Receipt();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        for (Entry entry : getTypicalEntries()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            receipt.addEntry(entry);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        receiptBook.addReceipt(receipt);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return receiptBook.getReceiptList().get(0).toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 59,
      "WillySeahh": 21
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/testutil/TypicalItem.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.expensesplitter.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * A utility class containing a list of {@code Item} objects to be used in tests."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class TypicalItem {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final Item BEERTOWER \u003d new ItemBuilder().withName(\"beertower\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            .withPrice(new BigDecimal(\"19.90\")).build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final Item STEAMBOAT \u003d new ItemBuilder().withName(\"steamboat\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            .withPrice(new BigDecimal(\"39.90\")).build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final Item POPCORN \u003d new ItemBuilder().withName(\"popcorn\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            .withPrice(new BigDecimal(\"9.85\")).build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Item CHICKENRICE \u003d new ItemBuilder().withName(\"Chicken Rice\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            .withPrice(new BigDecimal(\"3.50\")).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Item PIZZA \u003d new ItemBuilder().withName(\"pizza\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            .withPrice(new BigDecimal(\"25\")).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     * Prevents public from instantiating a Typical Item."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private TypicalItem () {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 4,
      "akhilvuputuri": 2,
      "WillySeahh": 24
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "package seedu.eylah.expensesplitter.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.PersonAmountBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    // -------------- PersonAmountBook ------------------------------------------------------"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"alice seah\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            .withAmount(new BigDecimal(\"3.50\")).build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(\"bob tan\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        .withAmount(new BigDecimal(\"4.50\")).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"carl lim\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        .withAmount(new BigDecimal(\"5.50\")).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"daniel lee\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        .withAmount(new BigDecimal(\"6.50\")).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"elle seah\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        .withAmount(new BigDecimal(\"7.50\")).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"fiona kwok\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        .withAmount(new BigDecimal(\"8.50\")).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"george peet\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        .withAmount(new BigDecimal(\"9.50\")).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"hoon seah\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        .withAmount(new BigDecimal(\"10.50\")).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"ida seah\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        .withAmount(new BigDecimal(\"11.60\")).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    // -------------- Receipt ------------------------------------------------------"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Person ANNA \u003d new PersonBuilder().withName(\"anna\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            .withAmount(new BigDecimal(\"8.33\")).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Person BRANDON \u003d new PersonBuilder().withName(\"brandon\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            .withAmount(new BigDecimal(\"8.33\")).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Person CHARLIE \u003d new PersonBuilder().withName(\"charlie\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "            .withAmount(new BigDecimal(\"8.33\")).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Person DARREN \u003d new PersonBuilder().withName(\"darren\").withAmount(new BigDecimal(\"9.95\"))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static final Person ELYSHA \u003d new PersonBuilder().withName(\"elysha\").withAmount(new BigDecimal(\"9.95\"))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static PersonAmountBook getTypicalPersonAmountBook() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        PersonAmountBook pABook \u003d new PersonAmountBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            pABook.addPerson(person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return pABook;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BOB, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    public static ArrayList\u003cPerson\u003e getTypicalPersonsArrayList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ANNA, BRANDON, CHARLIE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ailanthustng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static ArrayList\u003cPerson\u003e getTypicalPersonsArrayListV2() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(DARREN, ELYSHA));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    public static String getTypicalPersonAmountBookToString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        PersonAmountBook pABook \u003d new PersonAmountBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "            pABook.addPerson(person);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "        return pABook.toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ailanthustng": 25,
      "WillySeahh": 69
    }
  },
  {
    "path": "src/test/java/seedu/eylah/expensesplitter/testutil/TypicalReceipt.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.expensesplitter.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.ReceiptBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Entry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import seedu.eylah.expensesplitter.model.receipt.Receipt;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * A utility class containing a list of {@code Receipt} objects to be used in tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class TypicalReceipt {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    // default receipt"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final Receipt RECEIPT_ONE \u003d new ReceiptBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    // fields below are to make more receipt"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final Item PASTA \u003d new ItemBuilder().withName(\"pasta\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            .withPrice(new BigDecimal(\"15\"))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            .withAmountPerPerson(new BigDecimal(\"5\")).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final Item LAZIJI \u003d new ItemBuilder().withName(\"laziji\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            .withPrice(new BigDecimal(\"20\"))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            .withAmountPerPerson(new BigDecimal(\"10\")).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final Item SOUP \u003d new ItemBuilder().withName(\"soup\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            .withPrice(new BigDecimal(\"14\"))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            .withAmountPerPerson(new BigDecimal(\"4.57\")).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final Person WILLY1 \u003d new PersonBuilder().withName(\"willy\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            .withAmount(new BigDecimal(\"5\")).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final Person XIONG1 \u003d new PersonBuilder().withName(\"xiong\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            .withAmount(new BigDecimal(\"5\")).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final Person AILAN1 \u003d new PersonBuilder().withName(\"ailan\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            .withAmount(new BigDecimal(\"5\")).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final Person XIONG2 \u003d new PersonBuilder().withName(\"xiong\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            .withAmount(new BigDecimal(\"10\")).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final Person AILAN2 \u003d new PersonBuilder().withName(\"ailan\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            .withAmount(new BigDecimal(\"10\")).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final Person XIONG3 \u003d new PersonBuilder().withName(\"xiong\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            .withAmount(new BigDecimal(\"4.67\")).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final Person AILAN3 \u003d new PersonBuilder().withName(\"ailan\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            .withAmount(new BigDecimal(\"4.67\")).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final Person WILLY2 \u003d new PersonBuilder().withName(\"willy\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            .withAmount(new BigDecimal(\"4.67\")).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final ArrayList\u003cPerson\u003e PASTA_PERSON_LIST \u003d new ArrayList\u003c\u003e(Arrays.asList(XIONG1, WILLY1, AILAN1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final ArrayList\u003cPerson\u003e LAZIJI_PERSON_LIST \u003d new ArrayList\u003c\u003e(Arrays.asList(XIONG2, AILAN2));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final ArrayList\u003cPerson\u003e SOUP_PERSON_LIST \u003d new ArrayList\u003c\u003e(Arrays.asList(XIONG3, AILAN3, WILLY2));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    // made entries to simulate receipt"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final Entry PASTA_ENTRY \u003d new EntryBuilder().withItem(PASTA)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            .withPersons(PASTA_PERSON_LIST).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final Entry LAZIJI_ENTRY \u003d new EntryBuilder().withItem(LAZIJI)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            .withPersons(LAZIJI_PERSON_LIST).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static final Entry SOUP_ENTRY \u003d new EntryBuilder().withItem(SOUP)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            .withPersons(SOUP_PERSON_LIST).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private TypicalReceipt() {} // prevents instantiation"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static ReceiptBook getTypicalReceiptBook() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        ReceiptBook receiptBook \u003d new ReceiptBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        Receipt receipt \u003d new Receipt();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        for (Entry entry : getTypicalEntries()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            receipt.addEntry(entry);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        receiptBook.addReceipt(receipt);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return receiptBook;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static ArrayList\u003cEntry\u003e getTypicalEntries() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(PASTA_ENTRY, LAZIJI_ENTRY, SOUP_ENTRY));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 77
    }
  },
  {
    "path": "src/test/java/seedu/eylah/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WillySeahh"
        },
        "content": " * A set of assertions methods using for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "WillySeahh": 1,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/eylah/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/eylah/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "package seedu.eylah.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheexiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheexiong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheexiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheexiong": 31
    }
  },
  {
    "path": "src/test/java/seedu/eylah/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "package seedu.eylah.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "import seedu.eylah.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final Index INDEX_FIRST_FOOD \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final Index INDEX_SECOND_FOOD \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "    public static final Index INDEX_THIRD_FOOD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 6,
      "-": 10
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "\u003c?import seedu.eylah.addressbook.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "akhilvuputuri"
        },
        "content": "\u003cfx:root type\u003d\"seedu.eylah.addressbook.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "akhilvuputuri": 1,
      "-": 5
    }
  }
]
