[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d Morpheus"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "https://travis-ci.org/AY1920S2-CS2103T-W13-2/main[image:https://travis-ci.org/AY1920S2-CS2103T-W13-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level3[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/se-edu/addressbook-level3?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level3/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* This is a desktop Address Book application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* It is a Java application intended for hotel receptionists to manage hotel bookings and services."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* Original source code is by https://se-education.org"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 3,
      "dawidjaja": 1,
      "-": 31
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    archiveName \u003d \u0027main.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        \u0027site-name\u0027: \u0027Morpheus\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-W13-2/main\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "dawidjaja": 2,
      "youaremysky99": 1,
      "-": 152
    }
  },
  {
    "path": "checker.sh",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "./config/travis/run-checks.sh \u0026\u0026 ./gradlew clean checkstyleMain checkstyleTest test coverage coveralls asciidoctor"
      }
    ],
    "authorContributionMap": {
      "dawidjaja": 1
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "Morpheus was developed by the https://github.com/AY1920S2-CS2103T-W13-2/main/tree/master/docs/team[AY1920S2-CS2103T-W13-2] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "__ +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "\u003d\u003d\u003d Daniel Alfred"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "image::dawidjaja.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hmtey"
        },
        "content": "{empty}[https://github.com/dawidjaja[github]] [\u003c\u003cdawidjaja#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d Tey Hui Ming"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hmtey"
        },
        "content": "image::hmtey.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hmtey"
        },
        "content": "{empty}[http://github.com/hmtey[github]] [\u003c\u003chmtey#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Responsibilities: Billing System, Documentation"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d Tuan Le"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "image::youaremysky99.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hmtey"
        },
        "content": "{empty}[http://github.com/youaremysky99[github]] [\u003c\u003cyouaremysky99#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Data"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d Sanchari Bandyopadhyay"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "image::sancharib-git.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hmtey"
        },
        "content": "{empty}[http://github.com/sancharib-git[github]] [\u003c\u003csancharib-git#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "Responsibilities: UI, Data"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d Phat Tran"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hmtey"
        },
        "content": "image::tanphatls987.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hmtey"
        },
        "content": "{empty}[http://github.com/tanphatls987[github]] [\u003c\u003ctanphatls987#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 4,
      "dawidjaja": 3,
      "youaremysky99": 1,
      "-": 32,
      "hmtey": 16
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S2-CS2103T-W13-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* *DM us* : You can also reach us at `instagram`"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d Morpheus - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W13-2/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 2,
      "-": 46
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d Morpheus - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W13-2/main/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "By: `AY1920S2-CS2103T-W13-2`      Since: `Feb 2020`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hmtey"
        },
        "content": "//tag::introduction[]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d Product Description (Hui Ming)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Morpheus is a desktop application that aims to facilitate the administrative work of hotel services as a hotel room management system."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hmtey"
        },
        "content": "The system will also provide statistics and reports, constructed from the analysis of the details in the user-provided database."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Most of the user interaction occurs via a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": ".Morpheus UI"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hmtey"
        },
        "content": "image::Ui.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d Purpose (Hui Ming)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hmtey"
        },
        "content": "This *Developer Guide* describes the architecture and software design of Morpheus."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hmtey"
        },
        "content": "The intended audience is the *developers, designers and software testers* who wish to understand, maintain \u0026 upgrade the desktop application."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hmtey"
        },
        "content": "//end::introduction[]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d How to navigate this document"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* _This section shows you how to read and understand this document._"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** Any text in `markup` suggests it is a code snippet."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** A link like link:{repoURL}[this] will take you to the link destination when clicked."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "TIP: This is a useful tip to help optimize your experience using Morpheus."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "NOTE: This is important information to take note of!"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "//tag::Architecture[]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d Architecture (Sanchari)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "image::OverallArchitecture.png[]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Morpheus* closely follows the **Command Pattern ** design of software. +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "This is a quick representation of how the Command Pattern works: +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "_Client -\u003e Invoker -\u003e CommandQueue -\u003e ExecuteCommand_"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "In this case, the Application (Client) which creates and adds a command object to the Logic Manager (Invoker)."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "The Invoker then executes the command objects by calling `Command#execute()`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "//end::Architecture[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "Given below is a quick overview of the components in the architecture of the software."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c\u003cDesign-Main,*`Main`*\u003e\u003e has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* Presents App data in a GUI."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* Receives commands from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* Parses the commands entered by user."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* Adds command objects to command queue."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* Executes actions indicated by commands on the data in-memory."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "The _Sequence Diagram_ below shows an overview how the components interact with each other for the scenario where the user issues the command `deleteroom`."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".Component interactions for `deleteroom` command"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "image::ArchitectureComponentDiagram.png[]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "//tag::UiCompJohnny[]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d UI component (Johnny)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "image::UIDiagram.png[]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `RoomListPanel`, `PersonListPanel`, `WelcomePanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "* Receive command result and change user view accordingly."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "Below is diagram for how UI extract command result for changing view."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ".Command work flow for MainWindow"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "image::commandSwitchUi.png[]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "//end::UiCompJohnny[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ".  `Logic` uses the `MorpheusParser` class to parse the user command."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a room)."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"deleteroom\")` API call."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".Interactions Inside the Logic Component for the `deleteroom` Command"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "image::LogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "image::ModelDiagram.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "* stores the Hotel data."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* stores the BookKeeper data"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` ,  `ObservableList\u003cRoom\u003e` , `ObservableList\u003cBooking\u003e` , `ObservableList\u003cAvailableService\u003e`, `ObservableList\u003cBill\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "* exposes Hotel\u0027s data."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d Storage component (Sanchari)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "image::StorageDiagram.png[]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "The `Storage` component is responsible for serializing `Model` and deserializing Json data to facilitate reading and writing into the database. +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "The `Storage` component can:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* can save Hotel data in json format and read it back."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* can save BookKeeper data in json format and read it back."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "//tag::init[]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d Hotel Initialization (Sanchari)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "The following steps show how to set up a hotel by adding guests, rooms and services:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d\u003d AddGuestCommand"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "This command adds a guest into the hotel using their name, guest ID, phone and email."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "The following steps show how the add guest feature works:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "1. The `addguest` command entered by the user is parsed and the different fields are tokenized."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "2. `AddGuestCommand#execute(Model model)` is invoked which checks for validity of the entered parameter values."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "3. The command is then executed by creating a new Guest object using the parameter values entered and adding the Guest object into the Hotel."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "4.  If successful, a `CommandResult` object is created to show a success message in the feedback box of the ui."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "The diagram below shows the class diagram for AddGuestCommand."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".Class Diagram for AddGuestCommand"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "image::AddGuestClass.png[]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* **Alternative 1 (current choice):** Creates a new Guest object in AddGuestCommandParser."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** Pros: Simpler to test and understand."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** Cons: Command object should not know details about model i.e. Person."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* **Alternative 2:** New Guest object is created and added to hotel in model."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** Pros: Command has no knowledge of Model and its attributes."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** Cons: More prone to error."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "[[Initialization-AddService]]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d\u003d AddService Command"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "The following steps show how the AddService command is implemented:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "1.  The command from user is parsed and undergoes checks for the validity of the `SERVICE_ID`, `COST` and `DESCRIPTION`."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "2.  If the parameters are valid, `AddServiceCommand#execute(Model model)` is invoked, which checks if the service id exists."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "3.  If the service id does not exist, a `AvailableService` object is created and `Model#add(AvailableService service)` is called to add an available service to hotel."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "4.  If successful, a `CommandResult` object is created to show a success message in the feedback box of the ui."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "The diagram below shows the class diagram for AddServiceCommand"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".Class Diagram for AddServiceCommand"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "image::AddServiceClass.png[]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* **Alternative 1 (current choice):** Creates a new Service object in AddServiceCommandParser."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** Pros: Simpler to test and understand."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** Cons: Command object should not know details about model i.e. Service."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* **Alternative 2:** New Service object is created and added to hotel in model."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** Pros: Command has no knowledge of Model and its attributes."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** Cons: More prone to error."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d\u003d AddRoomCommand"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "This command adds a room into the hotel using the room number, tier and the cost of the room."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "The following steps show how the add room feature works:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "1. The `addroom` command entered by the user is parsed and the different fields are tokenized."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "2. `AddRoomCommand#execute(model)` is invoked which checks for validity of the arguments."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "3. If all arguments are valid, a new Room object is created using the tokenized arguments and it is added into the hotel."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "4.  If successful, a `CommandResult` object is created to show a success message in the feedback box of the ui."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "The diagram below shows the class diagram for AddRoomCommand"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".Class Diagram for AddRoomCommand"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "image::AddRoomClassDiagram.png[]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* **Alternative 1 (current choice):** Rooms are stored in an `ObservableList` in Hotel."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** Pros: Better OOP design."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** Cons: Harder to test."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* **Alternative 2:** Rooms are stored in an `ObservableList` in Model."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** Pros: Simpler to test and understand."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** Cons: Model is at a higher abstraction level and should not have knowledge of individual rooms."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "The Diagram below shows the sequence diagram for AddRoomCommand. All Initialization commands above are similar in their interactions with the \u003c\u003cDesign-Logic\u003e\u003e and \u003c\u003cDesign-Model\u003e\u003e."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".Sequence Diagram for AddRoomCommand"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "image::AddRoomSequenceDiagram.png[]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "The Diagram below shows the general activity sequence of the initialization feature."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".Activity Diagram of Hotel Initialization"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "image::AddCommandDiagram.png[]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "//end:init[]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "\u003d\u003d\u003d Hotel Services (Daniel)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "//tag::reserve[]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d\u003d Reserve Command"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "This command makes a reservation under the specified guest\u0027s name for the specified duration."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "The following steps show how the Reserve command is implemented."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "1. The command from the user is tokenized and parsed."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "2. If there are no missing tokens, `ReserveCommand#execute(Model model)` is invoked which checks if guest ID, room ID exists in the database and if there are any clashes with other bookings."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "3. A new Booking object is created and added into the hotel database."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "4. If the above is successfully executed, this will return a `CommandResult` object to show a success message."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "Below describes ideas that were considered when designing the command."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "* **Alternative 1 (current choice):** Reservation is stored in 1 list."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "** Pros: Easy to loop through all reservation to make sure there is no clash between them."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "** Cons: Querying the schedule for a specific room require to iterate through all the reservation."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "* **Alternative 2:** Reservation store for each room."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "** Pros: Each room have their own schedule."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "** Cons: Harder to implement if we want to find an empty room for certain period of time."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ".Class Diagram for ReserveCommand"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "image::ReserveClassDiagram.png[]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".Sequence Diagram for ReserveCommand"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "image::ReserveSequenceDiagram.png[]"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "//end::reserve[]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "//tag::checkin[]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d\u003d Checkin Command"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "This command checks in guest either with a room number, guest\u0027s name, and the end date of the stay."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "Or by providing the booking ID."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "The following steps show how the CheckIn command is implemented."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "1. The command is parsed by `CheckInCommandParser#parse(String args)` into list of pattern there (room number, guest id, end date of the stay or booking id)."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "2. If `BOOKING_ID` exists in the pattern, it will ignore the rest of the pattern and checkin using that booking id instead by creating `CheckInByIdCommand`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "3. The `CheckInByIdCommand` will invoke `model#findBookingById(String BookigId)` which will create a normal `CheckInCommand`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "4. `CheckInCommand` will call `model#checkIn` will be called."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "5. The list in the UI will be updated by calling `model#updateFilteredRoomList(Predicate predicate)`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "6. The room will be charged by calling `model#chargeRoomCost(RoomId roomId, RoomCost roomCost, Stay stay)`."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "7. If all of the above is successfully executed, this will return a `CommandResult` object to show success message."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ".Sequence Diagram for CheckInCommand"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "image::CheckInSequenceDiagram.png[]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "Below describes ideas that were considered when designing the command."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "* **Alternative 1 (current choice):** Create a stay object which differentiate between the current stay and reservation."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "** Pros: Could easily get the list of current stay."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "** Cons: Requires more planning since we have to maintain 2 list now (stay and reservation)."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "* **Alternative 2:** Store all stay in a reservation object."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "** Pros: Simple to implement."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "** Cons: Could not differentiate between stay and reservation unless there is another instance in the reservation object."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "//end::checkin[]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "//tag::checkout[]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d\u003d Checkout Command"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "This command checks out a guest from the hotel by providing a room number."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "The folowing steps show how the CheckOut command is implemented."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "1. The command is parsed by `CheckOutCommandParser#parse(String args)` into list of pattern there (room number)."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "2. The `CheckOutCommandParser` will create `CheckOutCommand`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "3. `CheckOutCommand` will call `model#checkOut` will be called."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "4. The list in the UI will be updated by calling `model#updateFilteredRoomList(Predicate predicate)`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "5. The room will clean up the previous bill by calling `model#deleteBill(RoomId roomId)`."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "6. If all of the above is successfully executed, this will return a `CommandResult` object to show success message."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "//end::checkout[]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "//tag::extend[]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "\u003d\u003d\u003d\u003d Extend Command"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "This command extend the booking of a guest by providing room number and end date of the stay."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "1. The command is parsed by `ExtendCommandParser#parse(String args)` into list of pattern there (room number and end date)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "2. The `ExtendCommandParser` will create `ExtendCommand`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "3. `ExtendCommand` will call `model#extendRoom` to extend the room in the hotel."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "4. `ExtendCommand` will call `model#chargeExtendRoomCost` to charge the room according to the room cost and number of extra nights."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "5. If this is successfully executer, this will return a `CommandResult` object to show success message."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "//end::extend[]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d Search feature (Tuan)"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "//tag::findguest[]"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "\u003d\u003d\u003d\u003d FindGuestCommand"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "Currently this command only support searching for full name or/and id number."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "The following steps show how the search guest feature works:"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "1.  The search command from the user is parsed into a list of pattern contained in the search command."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "2.  The command then executes and filters the guest list based on the patterns."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "The diagram below show how the search command store its pattern."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ".Class diagram for FindGuestCommand"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "image::FindGuestCommand.png[]"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "hmtey"
        },
        "content": "The diagram below shows the execution of the command:"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "hmtey"
        },
        "content": ".Activity Diagram of Search Feature"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "image::SearchWorkflow.png[]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "* **Alternative 1 (current choice):** Store pattern as list of name and id."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "** Pros: Simpler to test and understand."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "** Cons: Difficult to extend the implementation."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "* **Alternative 2:** Store pattern as a combination of Predicate."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "** Pros: Easy to implement and add more complicated pattern."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "** Cons: Harder to test, more prone to error."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "//end::findguest[]"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "//tag::findcommand[]"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d\u003d FindRoomCommand"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "Currently this command only support searching of room full name or/and id number, or room number."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "The following steps show how the search guest feature works:"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "1.  The find room command from the user is parsed into a list of pattern contained in the find room command."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "2.  The find room command then executes and filters the guest list based on the patterns."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "The diagram below show how the findroom command store its pattern."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ".Class diagram for FindGuestCommand"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "image::FindRoomCommand.png[]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "The diagram below shows the execution of the command:"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d\u003d FindBookingCommand"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "Currently this command only support searching of booking full name or/and id number, or room number."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "The following steps show how the search guest feature works:"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "1.  The find booking command from the user is parsed into a list of pattern contained in the find booking command."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "2.  The find booking command then executes and filters the guest list based on the patterns."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "The diagram below show how the findbooking command store its pattern."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ".Class diagram for FindGuestCommand"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "image::FindBookingCommand.png[]"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d\u003d FindEmptyRoomCommand"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "This command support finding empty rooms"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "The following steps show how the search feature works:"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "1.  The find empty room command from the user is parsed into a list of pattern contained in the find booking command."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "2.  The find empty room command then executes and filters the guest list based on the patterns."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "//end::findcommand[]"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "hmtey"
        },
        "content": "//tag::billingsystem[]"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d Billing System (Hui Ming)"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "hmtey"
        },
        "content": "The billing system is designed to aid hotel receptionists in their bookkeeping. It is oversen by the `BookKeeper` class, which keeps track of all bills in the hotel and facillitates in the manipulation of bills."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "hmtey"
        },
        "content": "The bills are kept in a `UniqueBillList`, which ensures that there are no duplicate bills in the `BookKeeper` class."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "hmtey"
        },
        "content": "The structure of the billing system is shown in the class diagram below:"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "hmtey"
        },
        "content": ".Class Diagram of Billing System"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "hmtey"
        },
        "content": "image::BillingClassDiagram.png[]"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "hmtey"
        },
        "content": "To utilize the billing system, users are provided with the following operations:"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* `SetRoomCostCommand` -- Sets the cost of a room."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* `AddServiceCommand` -- Creates a chargeable service."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* `ChargeServiceCommand` -- Charges a guest for a requested service."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* `DeleteChargedServiceCommand` -- Removes a charged service from the bill of a guest."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* `FetchBillCommand` -- Fetches the bill of a guest, including the cost of the room."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "hmtey"
        },
        "content": "The following activity diagram summarizes the typical procedure of billing a guest:"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "hmtey"
        },
        "content": ".Activity Diagram of Billing System"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "hmtey"
        },
        "content": "image::BillingActivityDiagram.png[]"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d\u003d SetRoomCost Command (Hui Ming)"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "hmtey"
        },
        "content": "This section goes through the implementation and design considerations of the `SetRoomCost` command."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "hmtey"
        },
        "content": "The following steps show how the command is implemented:"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "hmtey"
        },
        "content": "1.  The command from the user is parsed and undergoes checks for the validity of the given `ROOMNUMBER` and `COST`."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "hmtey"
        },
        "content": "2.  If the parameters are valid, `SetRoomCostCommand#execute(Model model)` is invoked, which checks if the given room exists."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "hmtey"
        },
        "content": "3.  If the room exists, a `RoomCost` object is created and `Model#setRoomCost(Room room, RoomCost roomCost)` is called."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "hmtey"
        },
        "content": "4.  `Room##setCost(RoomCost roomcost)` is then invoked to set the cost of the room by setting the \u0027roomCost\u0027 attribute of the `Room` object."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "5.  If successful, a `CommandResult` object is created to show a success message in the feedback box of the ui."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "hmtey"
        },
        "content": "The sequence diagram below illustrates how the `SetRoomCost` command works with the input `setrcost rn/001 c/50`:"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "hmtey"
        },
        "content": ".Sequence Diagram of `SetRooomCost` Command"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "hmtey"
        },
        "content": "image::SetRoomCostSequenceDiagram.png[]"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Below describes ideas that were considered when designing the command."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* **Alternative 1 (current choice):** Store the cost of the room as an attribute in the `Room` object."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** Pros: Application of OOP concepts."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** Cons: Requires a deeper understanding of the Logic \u0026 Model components in order to implement."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* **Alternative 2:** Store the costs of rooms in a separate list (e.g. as a HashMap) in the Hotel component."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** Pros: Simple to implement."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** Cons: Might limit the relationship between the rooms and their costs."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d\u003d AddService Command"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "hmtey"
        },
        "content": "The command is also a Hotel Initialization feature and is hence covered above in \u003c\u003cInitialization-AddService\u003e\u003e."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d\u003d ChargeService Command (Hui Ming)"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "hmtey"
        },
        "content": "This section goes through the implementation and design considerations of the `ChargeService` command."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "hmtey"
        },
        "content": "The following steps show how the command is implemented:"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "hmtey"
        },
        "content": "1.  The command from the user is parsed and undergoes checks for the validity of the given `PERSONID`, `ROOMNUMBER` and `SERVICEID`."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "hmtey"
        },
        "content": "2.  If the parameters are valid, `ChargeServiceCommand#execute(Model model)` is invoked, which checks if the given guest, room and service exist."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "hmtey"
        },
        "content": "3.  If they exist, `Model#chargeService(RoomId roomId, AvailableService service)` is called which in following calls `BookKeeper#chargeServiceToBill(RoomId roomId, AvailableService service)`."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "hmtey"
        },
        "content": "4.  The bill for the corresponding room is retrieved and `Bill#addService(AvailableService service)` is then invoked by `BookKeeper`."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "hmtey"
        },
        "content": "5.  The service is added to stored list of chargeable objects in the bill and its cost is added to the stored total in the bill."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "hmtey"
        },
        "content": "6.  If successful, a `CommandResult` object is created to show a success message in the feedback box of the ui."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "hmtey"
        },
        "content": "The sequence diagram below illustrates how the `ChargeService` command works with the input `chargeservice i/A000000 rn/001 si/WC`:"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "hmtey"
        },
        "content": ".Sequence Diagram of `ChargeService` Command"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "hmtey"
        },
        "content": "image::ChargeServiceSequenceDiagram.png[]"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Below describes ideas that were considered when designing the command."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* **Alternative 1 (current choice):** Store the charged services in an ArrayList and the total cost as a double in the bill."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** Pros: Implementing the removal of charges services would be more direct and simple."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** Cons: Have to be careful with the calculation of the total cost."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* **Alternative 2:** Create another class to handle the list of charged services."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** Pros: Calculation of the total cost would be less prone to errors."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** Cons: Might cause the design of the application be unnecessarily complicated with many classes."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "hmtey"
        },
        "content": "//end::billingsystem[]"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d\u003d DeleteChargedService Command (Hui Ming)"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "hmtey"
        },
        "content": "This section goes through the implementation and design considerations of the `DeleteChargedService` command."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "hmtey"
        },
        "content": "The following steps show how the command is implemented:"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "hmtey"
        },
        "content": "1.  The command from the user is parsed and undergoes checks for the validity of the given `PERSONID`, `ROOMNUMBER` and `SERVICEID`."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "hmtey"
        },
        "content": "2.  If the parameters are valid, `DeleteChargedServiceCommand#execute(Model model)` is invoked, which checks if the given guest, room, service and bill exist."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "hmtey"
        },
        "content": "3.  If they exist, `Model#deleteChargedService(RoomId roomId, AvailableService service)` is called which in following calls `BookKeeper#deleteChargedServiceFromBill(RoomId roomId, AvailableService service)`."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "hmtey"
        },
        "content": "4.  The bill for the corresponding room is retrieved and `Bill#deleteService(AvailableService service)` is then invoked by `BookKeeper`."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "hmtey"
        },
        "content": "5.  The service is removed from the stored list of chargeable objects in the bill and its cost is subtracted from the stored total in the bill."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "hmtey"
        },
        "content": "6.  If successful, a `CommandResult` object is created to show a success message in the feedback box of the ui."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "hmtey"
        },
        "content": "The sequence diagram below illustrates how the `DeleteChargedService` command works with the input `deletecservice i/A000000 rn/001 si/WC`:"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "hmtey"
        },
        "content": ".Sequence Diagram of `DeleteChargedService` Command"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "hmtey"
        },
        "content": "image::DeleteChargedServiceSequenceDiagram.png[]"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Below describes ideas that were considered when designing the command."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* **Alternative 1 (current choice):** Remove any one instance of the service in the list of charged services."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** Pros: Simple to implement."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** Cons: Does not make sense logically."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* **Alternative 2:** Remove the last instance of the service that was inserted."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** Pros: Makes sense logically."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** Cons: Need to keep track of the index, which unnecessarily complicates the program as the output would be the same."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d\u003d FetchBill Command (Hui Ming)"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "hmtey"
        },
        "content": "This section goes through the implementation and design considerations of the `FetchBill` command."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "hmtey"
        },
        "content": "The following steps show how the command is implemented:"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "hmtey"
        },
        "content": "1.  The command from the user is parsed and undergoes checks for the validity of the given `PERSONID` and `ROOMNUMBER`, if provided."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "hmtey"
        },
        "content": "2.  If the parameter/s are valid, `FetchBillCommand#execute(Model model)` is invoked, which checks if the given guest, room if `ROOMNUMBER` is provided, and bill/s exist."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "hmtey"
        },
        "content": "3.  If they exist, different methods are called depending on whether `ROOMNUMBER` is provided:"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* If `ROOMNUMBER` is provided:"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "hmtey"
        },
        "content": "a.  `Model#findBill(RoomId roomId)` is called to retrieve the bill for specified room."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "hmtey"
        },
        "content": "b.  `Bill#getBillTotal()` is next called to get the total cost of expenses."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "hmtey"
        },
        "content": "c.  `Model#updateFilteredBillList(Predicate predicate)` is then called to update the bill tab to show the bill details of the room."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "hmtey"
        },
        "content": "d.  If successful, a `CommandResult` object is created to show a success message in the feedback box of the ui."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* If `ROOMNUMBER` is not provided:"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "hmtey"
        },
        "content": "a.  `Model#getGuestBillsTotal(PersonId personId)` is called to get the total of all the bills of the guest."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "hmtey"
        },
        "content": "b.  `Model#updateFilteredBillList(Predicate predicate)` is then called to update the bill tab to show all the bills belonging to the guest."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "hmtey"
        },
        "content": "c.  If successful, a `CommandResult` object is created to show a success message in the feedback box of the ui."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "hmtey"
        },
        "content": "The sequence diagram below illustrates how the `FetchBill` command works with the input `fetchbill i/A000000 rn/001`:"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "hmtey"
        },
        "content": ".Sequence Diagram of FetchBill Command"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "hmtey"
        },
        "content": "image::FetchBillSequenceDiagram.png[]"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Below describes ideas that were considered when designing the command."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* **Alternative 1 (current choice):** Allow the user to fetch the bill of a room of all bills of a person with a single command."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** Pros: Easier on user as they have lesser commands to remember."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** Cons: More considerations for different scenarios are needed, causing the implementation to be more complicated."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* **Alternative 2:** Have two separate commands to fetch the bill of a room and the bills of a person."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** Pros: Easier to parse the parameters for the command."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** Cons: User needs to remember more commands."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* has a need to manage a significant number of hotel guests"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* needs to keep track of all guest information: checkins/services/bills"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* prefers to view all guest information in one window"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Value proposition*: manage guests faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "hmtey"
        },
        "content": "//tag::userstories[]"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d User Stories (Sanchari \u0026 Hui Ming)"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "hmtey"
        },
        "content": "|`* * *` |receptionist|see which rooms are empty |check guests into them"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "hmtey"
        },
        "content": "|`* * *` |receptionist |get the bill details of guests |show the guests what they purchased"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "hmtey"
        },
        "content": "|`* * *` |busy receptionist |type as few things as possible |add in information fast"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "hmtey"
        },
        "content": "|`* * *` |receptionist |see which guests are VIPS |treat these guests with extra care"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "hmtey"
        },
        "content": "|`* * *` |receptionist |add people into the database |track hotel guests during their stay"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "hmtey"
        },
        "content": "|`* *` |receptionist |group people together |see which guests are in the same group/family"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "hmtey"
        },
        "content": "|`* *` |receptionist |change the tag of a room to served | know which rooms\u0027 requests have been fulfilled"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "hmtey"
        },
        "content": "|`* *` |receptionist |keep track of rooms that ordered room service |charge them accordingly"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "hmtey"
        },
        "content": "|`* *` |hotel staff |quickly see which rooms have been checked out |go clean the rooms"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "hmtey"
        },
        "content": "|`* * ` |cleaning staff |quickly see rooms with the \"clean my room tag\" |prioritize cleaning those rooms"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "hmtey"
        },
        "content": "|`* *` |receptionist |sort rooms into different categories |search for rooms more easily"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "hmtey"
        },
        "content": "|`* *` |receptionist |apply discounts to customers\u0027 bills |charge customers according to the hotel\u0027s ongoing promotions"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "hmtey"
        },
        "content": "|`* *` |receptionist |keep track of the guests staying in each room |address them by name"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "hmtey"
        },
        "content": "|`* *` |receptionist |compare two different rooms |see which room is more suitable for the guest"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "hmtey"
        },
        "content": "|`* *` |receptionist |create shortcuts/presets |conveniently carry out routine tasks"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "hmtey"
        },
        "content": "|`* *` |receptionist |see basic statistics |show my boss when they request for them"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "hmtey"
        },
        "content": "|`* *` |receptionist |see as many information as possible |find out certain details quickly"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "hmtey"
        },
        "content": "|`* *` |receptionist |be shown suggested keywords as I type |enter information quickly"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "hmtey"
        },
        "content": "|`* *` |receptionist |execute the same command on different rooms |efficiently carry out my job"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "hmtey"
        },
        "content": "|`*` |receptionist |see the online bookings that guests have made |efficiently check guests in"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "hmtey"
        },
        "content": "//end::userstories[]"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "hmtey"
        },
        "content": "//tag::usecases[]"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d Use Cases (Hui Ming)"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "(For all use cases below, the *System* is the `Morpheus` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "\u003d\u003d\u003d Use cases example:"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d Use Case: UC01 - Add a guest"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "hmtey"
        },
        "content": "1.  User requests to add a guest"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "hmtey"
        },
        "content": "2.  User supplies guest name, id, phone number, email \u0026 tags"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "hmtey"
        },
        "content": "3.  Morpheus adds the guest to the application"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* 2a. The guest already exists in the application."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "hmtey"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** 2a1. Morpheus shows an error message."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d Use Case: UC02 - Add a room"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "hmtey"
        },
        "content": "1.  User requests to add a room"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "hmtey"
        },
        "content": "2.  User supplies room number, tier and cost"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "hmtey"
        },
        "content": "3.  Morpheus adds the room to the application"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* 2a. The room already exists in the application"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "+"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** 2a1. Morpheus shows an error message"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "+"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d Use Case: UC04 - Add a service"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "hmtey"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "hmtey"
        },
        "content": "1.  User requests to add a service"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "hmtey"
        },
        "content": "2.  User supplies service id, description and cost"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "hmtey"
        },
        "content": "3.  Morpheus adds the service to the application"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "+"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "hmtey"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* 2a. The service already exists in the application"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** 2a1. Morpheus shows an error message"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d Use Case: UC05 - Reserve a room"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "hmtey"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "hmtey"
        },
        "content": "1.  User requests to reserve a room"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "hmtey"
        },
        "content": "2.  User supplies guest id, room number, start and end dates of reservation"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "hmtey"
        },
        "content": "3.  Morpheus reserves the room"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "hmtey"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* 2a. The guest does not exist in the application"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** 2a1. Morpheus shows an error message"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* 2b. The room does not exist in the application"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** 2b1. Morpheus shows an error message"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* 2c. The room is already reserved/occupied"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** 2c1. Morpheus shows an error message"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d Use Case: UC06 - Check in a guest"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "hmtey"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "hmtey"
        },
        "content": "1.  User requests to check in a guest"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "hmtey"
        },
        "content": "2.  User supplies guest id, room number end date of check out"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "hmtey"
        },
        "content": "3.  Morpheus marks the room as occupied"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "hmtey"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* 2a. The guest does not exist in the application"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** 2a1. Morpheus shows an error message"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* 2b. The room does not exist in the application"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** 2b1. Morpheus shows an error message"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* 2c. The room is already reserved/occupied"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** 2c1. Morpheus shows an error message"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d Use Case: UC07 - Check out a guest"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "hmtey"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "hmtey"
        },
        "content": "1.  User requests to check out a guest"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "hmtey"
        },
        "content": "2.  User supplies room number"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "hmtey"
        },
        "content": "3.  Morpheus marks the room as unoccupied"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "hmtey"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* 2a. The room does not exist in the application"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** 2a1. Morpheus shows an error message"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* 2b. The room is not occupied"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** 2b1. Morpheus shows an error message"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d Use Case: UC08 - Extend the stay of a guest"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "hmtey"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "hmtey"
        },
        "content": "1.  User requests to extend the stay of a guest"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "hmtey"
        },
        "content": "2.  User supplies room number and new date to check out"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "hmtey"
        },
        "content": "3.  Morpheus updates the period of time where the room is occupied"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "hmtey"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* 2a. The room does not exist in the application"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** 2a1. Morpheus shows an error message"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* 2b. The room is not occupied"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** 2b1. Morpheus shows an error message"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* 2c. The room is reserved by another guest"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** 2c1. Morpheus shows an error message"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "+"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d Use Case: UC09 - Charging a guest for a service"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "hmtey"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "hmtey"
        },
        "content": "1.  User requests to charge a guest for a service"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "hmtey"
        },
        "content": "2.  User supplies guest id, room number and service id"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "hmtey"
        },
        "content": "3.  Morpheus charges the service to the bill of the guest"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "hmtey"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* 2a. The guest does not exist in the application"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** 2a1. Morpheus shows an error message"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* 2b. The room does not exist in the application"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** 2b1. Morpheus shows an error message"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* 2c. The service does not exist in the application"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** 2c1. Morpheus shows an error message"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* 2d. The guest is not checked into the specified room"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** 2d1. Morpheus shows an error message"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d Use Case: UC10 - Fetch the bills of a guest"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "hmtey"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "hmtey"
        },
        "content": "1.  User requests to fetch the bill of a guest"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "hmtey"
        },
        "content": "2.  User supplies guest id"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "hmtey"
        },
        "content": "3.  Morpheus shows the total outstanding payment of the guest and the bill details"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "hmtey"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* 2a. The guest does not exist in the application"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** 2a1. Morpheus shows an error message"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* 2b. The guest does not have outstanding bills"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** 2b1. Morpheus shows an error message"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d Use Case: UC11 - Remove a charged service from a bill"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "hmtey"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "hmtey"
        },
        "content": "1.  User requests to remove a charged service from a bill"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "hmtey"
        },
        "content": "2.  User supplies guest id, room number and service id"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "hmtey"
        },
        "content": "3.  Morpheus removed charged service from the bill of the guest"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "hmtey"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* 2a. The guest does not exist in the application"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** 2a1. Morpheus shows an error message"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* 2b. The room does not exist in the application"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** 2b1. Morpheus shows an error message"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* 2c. The service does not exist in the application"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** 2c1. Morpheus shows an error message"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* 2d. The guest does not have outstanding bills"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** 2d1. Morpheus shows an error message"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* 2e. The bill does not have the charged service"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** 2e1. Morpheus shows an error message"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d Use Case: UC12 - Search for a guest"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "hmtey"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "hmtey"
        },
        "content": "1.  User requests to search for a guest"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "hmtey"
        },
        "content": "2.  User supplies guest id and/or name"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "hmtey"
        },
        "content": "3.  Morpheus shows a list of guests with matching id/names"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d Use Case: UC13 - Search for a room"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "hmtey"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "hmtey"
        },
        "content": "1.  User requests to search for a room"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "hmtey"
        },
        "content": "2.  User supplies guest id and/or name and/or room number"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "hmtey"
        },
        "content": "3.  Morpheus shows a list of rooms with matching id/names/room bumbers"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d Use Case: UC14 - Search for a booking"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "hmtey"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "hmtey"
        },
        "content": "1.  User requests to search for a guest"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "hmtey"
        },
        "content": "2.  User supplies guest id and/or name and/or room number"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "hmtey"
        },
        "content": "3.  Morpheus shows a list of bookings with matching id/names/room numbers"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d Use Case: UC15 - Delete a guest"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "hmtey"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "hmtey"
        },
        "content": "1.  User requests to delete a guest"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "hmtey"
        },
        "content": "2.  User supplies index of guest or guest id"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "hmtey"
        },
        "content": "3.  Morpheus deletes the guest from the application"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "hmtey"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* 2a. The guest does not exist in the application"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** 2a1. Morpheus shows an error message"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "hmtey"
        },
        "content": "+"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "hmtey"
        },
        "content": "//end::usecases[]"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "//tag::nonfunctional[]"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".  Should be able to hold up to 1000 rooms without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ".  Should be able to handle up to 10000 requests per day."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ".  Should not consume more than 200 megabytes of storage (should optimize encoded data)."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ".  Should be able to restart without loss of data."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ".  Should be able to store back-ups data in case of breaking down."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "//end::nonfunctional[]"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "//tag::Testing[]"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d Instructions for Manual Testing (Sanchari)"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "   Expected: Shows the GUI with a set of sample data. The window size may not be optimum."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d Adding a guest"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ". Adding a guest when all guests are listed."
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Prerequisites: List all persons using the `switch guest` command. Multiple guests in the list."
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Test case: `addguest n/Joey i/J000000 p/12345679 e/joey@email.com t/VIP` +"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "   Expected: Guest Joey is added to the list. Details of the added Guest shown in the status message."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Test case: `addguest n/Jolene i/J000000 p/12345679 e/jolene@email.com t/VIP` +"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "   Expected: Guest Id clashes with an existing guest. No Guest is added. Error details shown in the status message."
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Other incorrect addguest commands to try: `addguest`, `addguest i/P000000 p/12345679 e/joey@email.com` +"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d Adding a room"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ". Adding a room when all rooms are listed."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Prerequisites: List all rooms using the `switch room` command. Multiple rooms in the list."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Test case: `addroom rn/300 ti/GOLD c/300.00` +"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "   Expected: Room 300 is added to the list. Details of the added Room shown in the status message."
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Test case: `addroom rn/300 ti/GOLD c/300.00` +"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "   Expected: Room Id clashes with an existing room. No Room is added. Error details shown in the status message."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Test case: `addroom rn/400 ti/Gold c/300.00` +"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "   Expected: Invalid Tier value. No Room is added. Error details shown in the status message."
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Other incorrect addroom commands to try: `addroom`, `addroom rn/500 ti/BRONZE` +"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d Adding a service"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ". Adding a service when all services are listed."
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Prerequisites: List all service using the `switch service` command. Multiple services in the list."
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Test case: `addservice si/WC d/Wash clothes c/100.00` +"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "   Expected: Service WC is added to the list. Details of the added Service shown in the status message."
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Test case: `addservice si/WC d/Other service c/100.00` +"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "   Expected: Service Id clashes with an existing service. No service is added. Error details shown in the status message."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Test case: `addservice si/WC c/100.00` +"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "   Expected: Invalid description value. No service is added. Error details shown in the status message."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Other incorrect addservice commands to try: `addservice`, `addservice c/190.00` +"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d Reserving a room"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ". Adding a booking when all bookings are listed"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Prerequisites: List all the bookings by using the `switch booking` command. Multiple bookings shown."
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Test case: `reserve i/i000000 rn/001 fd/2020-12-12 td/2020-12-24` +"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    Expected: Room number `001` is reserved by person `I000000` from `2020-12-12` to `2020-12-24`"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Test case: `reserve i/B000000 rn/001 fd/2020-12-13 td/2020-12-23` +"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    Expected: There is a clash in booking dates for the same room. Error details shown in the result display box."
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Test case: `reserve i/Bzagda rn/001 fd/2020-12-13 td/2020-12-23`"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    Expected: No such person found. No booking made. Error details shown in the status message."
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Other incorrect reserve commands to try: `reserve`, `reserve i/A000000` , `reserve i/i000000 rn/004 fd/2012-12-12 td/2012-12-24`"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d Checking in and out guests"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ". Dealing with check-ins and check-outs"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Prerequisites: List all bookings by using the command `switch booking`"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Test case: `checkin i/i000000 rn/001 td/2020-12-24` +"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    Expected: Guest `i000000` is checked into room `001`"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Test case: `checkin i/B000000 rn/5602 td/2020-12-23` +"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    Expected: There is no such room. Error message shown in result display box."
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Test case: `checkout rn/001` +"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    Expected: Guest is checked out of room `001`"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Test case: `checkout rn/009` +"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    Expected: Room `009` has no guests. Error message is shown in the result display box."
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Other incorrect checkin/checkout commands to try: `checkin`, `checkin i/A000000` , `checkin i/i000000 rn/004 fd/2012-12-12 td/2012-12-24`, `checkout` , `checkout rn/000`"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d Extending the stay of a guest"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ". Dealing with extension of a stay."
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Prerequisites: List all the stays by using the `switch room` command. Stays are shown in the rooms."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Test case: `extend rn/101 td/2020-04-20` +"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    Expected: Room number `101` \u0027s stay is extended until `2020-04-20`"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Test case: `extend rn/006 td/2020-04-20` +"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    Expected: There is no guest checked into room `006`. Stay cannot be extended. Error details shown in the result display box."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Test case: `extend rn/001 fd/2012-12-12` +"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    Expected: Invalid date. Date has passed. Stay cannot be extended. Error details shown in the result display box."
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Other incorrect extend commands to try: `extend`, `reserve rn/000` , `extend td/2012-12-12`"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d Charging a service"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".Charging a service to the guest\u0027s tab."
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Prerequisites: List all the stays by using the `switch room` command. Stays are shown in the rooms."
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Test case: `chargeservice i/A000000 rn/004 si/WC` +"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    Expected: Charges service with the ID `WC` for room `100` to the guest with ID `A000000` \u0027s bill."
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Test case: `chargeservice i/R000000 rn/004 si/WC` +"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    Expected: Guest `R000000` is not checked in. No service can be added to his bill. Error details shown in the result display box."
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Other incorrect chargeservice commands to try: `chargeservice`, `chargeservice i/R000000 rn/000 si/WC` , `chargeservice i/R000000 rn/100 si/DD"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d Fetching the bill of a guest"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".Retrieving the bill of a guest"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Prerequisites: List all the stays by using the `switch room` command. Stays are shown in the rooms."
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Test case: `fetchbill i/A000000` +"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    Expected: Shows the entire bill, consisting of all costs incurred, for guest with ID `G1231231X` \u0027s stay up till present moment."
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Test case: `fetchbill i/R000000` +"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    Expected: Guest `R000000` is not checked in. His bill cannot be shown. Error details shown in the result display box."
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Other incorrect fetchbill commands to try: `fetchbill`"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d Deleting service from a bill"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".Deleting a service from a bill"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Prerequisites: List all bills by using the `switch bill` command"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Test case: `deletecservice i/G1231231X rn/100 si/WC`"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    Expected: Removes service with ID `WC` from guest with ID `G1231231X` \u0027s bill for room `100`"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Test case: `deletecservice i/B000000 rn/100 si/WC`"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    Expected: Guest `B000000` does not have the service `WC` in their bill. Error message shown in the result display box."
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Other incorrect deletecservice commands to try: `deletecservice` , `deletecservice i/A000000 rn/000`"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d Finding a guest"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".Finding a guest from the list"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Prerequisites: List all guests by using the `switch guest` command. Guests are listed."
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Test case: `findguest i/A0000000 n/Alice`"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    Expected: Shows persons with name: `Alice` or ID: `A1000000`"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Test case: `findguest`"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    Expected: Invalid command format. Error message is shown in the result display box."
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Other incorrect findguest commands to try: `findguest i/` , `findguest n/`"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d Finding a room"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".Finding a room related to a guest\u0027s reservation/stay"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Prerequisites: List all rooms by using the `switch room` command. Rooms are listed."
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Test case: `findroom i/A000000 rn/001 n/Tuan Le`"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    Expected: Shows rooms booked by Guest with name: `Tuan Le` and/or ID: `A000000`"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Test case: `findroom`"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    Expected: Invalid command format. Error message is shown in the result display box."
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Other incorrect findroom commands to try: `findroom i/` , `findroom n/`"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d Finding a booking"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".Finding a booking made by a guest"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Prerequisites: List all bookings by using the `switch room` command. Rooms are listed."
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Test case: `findbooking n/Alice rn/001`"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    Expected: Shows booking of `Alice` or of room `001`."
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Test case: `findbooking`"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    Expected: Invalid command format. Error message is shown in the result display box."
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Other incorrect findbooking commands to try: `findbooking rn/` , `findbooking n/`"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ". Deleting a Guest while all Guests are listed"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Prerequisites: List all guests using the `switch guest` command. Multiple guests in the list."
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "   Expected: First Guest is deleted from the list. Details of the deleted Guest shown in the status message."
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "   Expected: Index is out of bounds. No Guest is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size)"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Prerequisites: Get access to the data files."
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Test case: Delete hotel.json +"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "   Expected: Morpheus will load addressbook and hotel with sample data."
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".. Other tests to try: Delete some \u0027{}\u0027 in hotel.json +"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    Expected: Morpheus will restart with an empty addressbook and hotel."
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "//end::Testing[]"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "//tag::effort[]"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d Effort (Sanchari)"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "Morpheus is an extension from AB3 and is considerably more complex than AB3. We have incorporated several new features which required extending the"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "UI, Storage and Model components of Morpheus. We extended current AB3 features (which only had 1 entity type: AddressBook) to include more entity types such as Hotel and BookKeeper which in turn"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "contained more entities such as Rooms and Bills. We did this so as to be able to create an application that allows seamless management of a hotel\u0027s daily"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "activities. As there were many new things to add on to AB3, the entire team put in their collaborative effort to create the end product."
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d Challenges"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* Planning out the structure and architecture of the application"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** A hotel is a complex system of activities, thus we had to hold several meetings to discuss what would be the structure of our application so as to allow"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "management of all the activities in one app."
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* New storage components for the `Hotel` and `BookKeeper`"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** As the AddressBook only stored persons, we has to extend the storage system to keep track of the hotel\u0027s data and the finance data in the `Hotel` and `BookKeeper`"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "classes respectively. This required thorough understanding of AB3\u0027s storage system."
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* New Commands to aid the job of a hotel receptionist."
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** We had to extend AB3\u0027s current implementation of `Logic` as a hotel receptionist has to manage many more things than a person list. Hence, through"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "thorough understanding of the `Model` and `Logic` component, we implemented a variety of new commands that works with the model to digitize the management of a hotel."
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* User Interface"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** We wanted to show all of the hotel\u0027s activity and data in 1 window. As such, it was necessary to upgrade AB3\u0027s UI to incorporate the hotel\u0027s data."
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "The Ui was improved and edited using JavaFx and CSS. All bugs and errors that were reflected in the Ui were tested and fixed by the team."
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "We believe that this was a difficult project to execute as a hotel has many interlinked components working together. However, through the combined effort"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "of the entire team, we believe that we have created an end-product that is able to manage the hotel\u0027s important activities altogether in one application."
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "//end:effort[]"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 351,
      "tanphatls987": 37,
      "dawidjaja": 92,
      "youaremysky99": 49,
      "-": 291,
      "hmtey": 486
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d Morpheus - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W13-2/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 2,
      "-": 116
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d Morpheus - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W13-2/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level3` repo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level3`), you should do the following:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, AddressBook\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 2,
      "-": 82
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d Morpheus - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W13-2/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 2,
      "-": 50
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d Morpheus - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W13-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "By: `AY1920S2-CS2103T-W13-2`      Since: `Jan 2020`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d Introduction (Hui Ming)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Hello there!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "**Morpheus** is for **hotel receptionists** like you who prefer to use a **desktop app** for hotel room management."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Tired of searching through rows and columns in books or excel spreadsheets? Morpheus has got you covered with our intuitive user interface!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Frustrated with slow and tedious bookkeeping? Morpheus can settle it within a few seconds!"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hmtey"
        },
        "content": "More importantly, Morpheus is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Morpheus can get your hotel room management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d About this document (Hui Ming)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hmtey"
        },
        "content": "This user guide gives you an overview of the features of Morpheus. With the help of given examples, you will be able to learn how to use the application to help manage the rooms and services in the hotel."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "//tag::nav[]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d How to navigate this document (Sanchari)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* _This section shows you how to read and understand this document._"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** Any text in `markup` suggests that you may enter it as a command in the app."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** A link like link:{repoURL}[this] will take you to the link destination when clicked."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** kbd:[Keyboard] shows that this is a key that can be pressed on the keyboard."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "TIP: This is a useful tip to help optimize your experience using Morpheus."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hmtey"
        },
        "content": "NOTE: This is important information you need to take note of!"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "//end::nav[]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* _This section will show you how to get started with using Morpheus!_"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hmtey"
        },
        "content": ".  Download the latest `main.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for Morpheus."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ".Image of the GUI of the app."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window. +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** *`addguest n/Harry i/H123456 p/91919191 e/harry@email.com t/VIP`* : Adds a guest, `Harry` to the hotel database."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** *`reserve i/H123456 rn/001 fd/2020-12-12 td/2020-12-13`* : Reserves the room `001` for `Harry` from `2020-12-12` to `2020-12-13`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** *`checkin i/H123456 rn/001 td/2020-12-13`* : Checks in Harry into the hotel."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** *`checkout rn/001`* : Checks Harry out of the hotel."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** *`switch guest`* : lists all guests"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** *`exit`* : exits the app"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* _This section highlights the features of Morpheus._"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "//tag::overview[]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*[.underline]#Overview Of Features#*"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "Features can be divided into 5 groups of commands"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "* Initialization commands"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "** `addguest` command adds a guest."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** `addroom` command adds a room into hotel."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** `addservice` command adds an available service to the hotel."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** `setrcost` command sets the cost of a room."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "* Service commands"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** `reserve` command makes a reservation."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "** `checkin` and `checkout` command receives and returns customers."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** `chargeservice` command charges customers for getting services."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** `deletecservice` command removes a charged service from the bill of customers."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** `fetchbill` command fetches the bill of a guest."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* Deletion commands"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** `delete` command deletes a guest from the hotel database."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "** `deleteroom` command deletes a room from the hotel database."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** `deleteservice` and `deletebooking` commands removes available services and bookings from the hotel database."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "* Find commands"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "** `findroom` command finds room with specific person, or room ids."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "** `findguest` command finds a guest in the hotel."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "** `findemptyroom` command finds list of empty rooms in the hotel."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "** `findbooking` command finds booking ids from names and room ids."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* General purpose commands"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "** `help` command shows instructions."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "** `exit` command quits the app."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** `clear` command clears all entries."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "** `switch` command navigate between tabs."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "//end::overview[]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*[.underline]#Command Format:#*"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `checkin i/ID rn/ROOM_NUMBER td/TO_DATE`, `ID` is a parameter which can be used as `checkin i/G1231231X`."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TIER]` can be used as `n/Smith t/Member` or as `n/Smith`."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME rn/ROOM_NUMBER`, `rn/ROOM_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "//tag::commonparameters[]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "**[.underline]#Some Common Parameters#** +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "(Sanchari)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Guest:* +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* `i/` : Guest ID"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* `n/` : Guest name"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* `p/` : Guest phone"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* `e/` : Guest email"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* `t/` : Guest tag"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Rooms and Bookings and Services* +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* `rn/` : Room number"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* `ti/` : Room tier"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* `bi/` : Booking ID"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* `fd/` : Date from"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* `td/` : Date to"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* `c/`  : Cost"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* `si/` : Service ID"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* `d/`  : Description of the service"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "//end::commonparameters[]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d Getting help: `help`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "If you need to view help, use the command `help` ."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Format:*: `help`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "//tag::switch[]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "\u003d\u003d\u003d Switching between tabs : `switch`(Johnny)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "If you want to switch to a new tab and view all the data on the specified tab, use the command `switch` ."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Format:*: `switch TAB_NAME`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hmtey"
        },
        "content": "NOTE: *`TAB_NAME`* must be one of `welcome`, `guest`, `room`, `booking`, `service`, `bill`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* `switch guest` +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "**Result:** Switches to and shows all entries on guest tab."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "//end::switch[]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "//tag::addguest[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d Adding a guest : `addguest`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "If you want to add a guest to the hotel database, use the command `addguest` +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Format:* `addguest n/NAME i/ID p/PHONE_NUMBER e/EMAIL [t/TAG]...`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hmtey"
        },
        "content": "NOTE: - You may use `t/TAG` to specify the status of the guest in the hotel! E.g. `t/VIP` +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "- The only valid values for `TAG` are `VIP` and `Member`. +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "- Any other values will result in an empty tag for the person displayed in the list."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* `addguest n/Sallly Smith i/G1231232X p/512685123 e/sallysmith@gmail.com t/VIP` +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Result:* Adds Sally Smith with her information into the hotel database."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "//end::addguest[]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d Adding a room : `addroom`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "If you want to add a room to the hotel database, use the command `addroom` +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Format:* `addroom rn/ROOM_NUMBER ti/TIER c/COST`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* `addroom rn/101 ti/GOLD c/150.00` +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Result:* Add room `101` into the database."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d Adding an available service: `addservice`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "If you want to add an available service to the database, use the command `addservice` +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Format:* `addservice si/SERVICE_ID d/DESCRIPTION c/COST`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* `addservice si/WC d/Wash clothes c/100.00` +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Result:* Adds a service with id `WC`, description `Wash clothes` and cost `100.00`."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hmtey"
        },
        "content": "//tag::setrcost[]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d Setting the cost for a room : `setrcost` (Hui Ming)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "If you want to set the cost for a room (per night), use the command `setrcost` +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Format:* `setrcost rn/ROOM_NUMBER c/COST`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* `setrcost  rn/101 c/50.00` +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Result:* Sets the cost for `101` as `50.00` per night."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hmtey"
        },
        "content": "//end::setrcost[]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "//tag::reserve[]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d Making a reservation : `reserve`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "If you want to make a reservation for a guest in the hotel, use the command `reserve` +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Format:* `reserve i/ID rn/ROOM_NUMBER fd/FROM_DATE td/TO_DATE`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* `reserve i/G1231231X rn/102 fd/ 2020-12-12 td/ 2020-12-30` +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Result:* Reserves room `102` for guest with the ID `G1231231X` from `2020-12-12` to `2020-12-30`. New reservation will be reflected in the bookings tab."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "//end::reserve[]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "//tag::checkin[]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "\u003d\u003d\u003d Checking in a guest: `checkin` (Daniel)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "If you want to check in a guest to the hotel from the current date until the end-date, use the command `checkin` +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "*Format:* `checkin i/ID rn/ROOM_NUMBER td/TO_DATE` +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "or `checkin bi/BOOKING_ID`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "NOTE: `BOOKING_ID` could be shorten by taking only its first 8 characters."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* `checkin i/G1231231X rn/101 td/2020-12-14` +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* `checkin bi/a1b2c3d4`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Result:* Checks in guest with ID `A000000` to room `001` until `2020-05-05`. Room `001` will be marked as occupied."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "//end::checkin[]"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "//tag::checkout[]"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "\u003d\u003d\u003d Checking out a guest: `checkout` (Daniel)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "If you want to check out a guest from the hotel, use the command `checkout` +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Format:* `checkout rn/ROOM_NUMBER`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* `checkout rn/003`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "Result: Checks out the guest from room `003`. Room `003` will be marked as free."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "//end::checkout[]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "//tag::extend[]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "\u003d\u003d\u003d Extend a stay for a guest: `extend` (Daniel)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "If you want to extend your stay, use the command `extend` +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Format:* `extend rn/ROOM_NUMBER td/TO_DATE`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Example:*"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "* `extend rn/101 td/2020-04-20`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Result:* Extend the stay of room 101 until 20th April 2020. Room `101` \u0027s stay will reflect the updated date."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hmtey"
        },
        "content": "NOTE: - Room must be checked in before it can be extended. +"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "- The extend period must not clash with other future reservation."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "//end::extend[]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hmtey"
        },
        "content": "//tag::chargeservice[]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d Charging a service : `chargeservice` (Hui Ming)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "If you want to charges a service to the guest\u0027s tab, use the command `chargeservice` +"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Format:* `chargeservice i/PERSON_ID rn/ROOM_NUMBER si/SERVICE_ID`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* `chargeservice i/G1231231X rn/100 si/WC` +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Result:* Charges service with the ID `WC` for room `100` to the guest with ID `G1231231X` \u0027s bill."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hmtey"
        },
        "content": "//end::chargeservice[]"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hmtey"
        },
        "content": "//tag::deletecservice[]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d Deleting a service from a bill : `deletecservice` (Hui Ming)"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "If you want to remove a charged service from the guest\u0027s bill. +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Format:* `deletecservice i/PERSON_ID rn/ROOM_NUMBER si/SERVICE_ID`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* `deletecservice i/G1231231X rn/100 si/WC` +"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Result:* Removes service with ID `WC` from guest with ID `G1231231X` \u0027s bill for room `100`."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hmtey"
        },
        "content": "//end::deletecservice[]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hmtey"
        },
        "content": "//tag::fetchbill[]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d Fetching bill of a guest : `fetchbill` (Hui Ming)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "If you want to retrieve the bill of a guest, use the command `fetchbill` +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Format:* `fetchbill i/ID [rn/ROOM_NUMBER]`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* `fetchbill  i/G1231231X` +"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Result:* Shows the entire bill, consisting of all costs incurred, for guest with ID `G1231231X` \u0027s stay up till present moment."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hmtey"
        },
        "content": "//end::fetchbill[]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "//tag::findguest[]"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "\u003d\u003d\u003d Finding guests: `findguest` (Johnny)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "If you want to find guests using their names or id, use the commmand `findguest`. +"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Format:* `findguest [n/NAME] ... [n/NAME] [i/ID] ... [i/ID]`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "hmtey"
        },
        "content": "NOTE: - Name must be an exact match. +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "- The order of the keywords does not matter. e.g. `n/Alice i/A10` is same as `i/A10 n/Alice`. +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "- Persons matching at least one keyword will be returned."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* `findguest i/A0000000 n/Alice` +"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Result:* Shows persons with name: `Alice` or ID: `A1000000`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "//end::findguest[]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d Finding bookings: `findbooking`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "If you want to find bookings made by a guest using the guest\u0027s name, guest\u0027s ID or by room number, use the command `findbooking`. +"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "hmtey"
        },
        "content": "*Format:* `findbooking [n/NAME] ... [n/NAME] [i/ID] ... [i/ID] [rn/ROOM_NUMBER] ... [rn/ROOM_NUMBER]`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "hmtey"
        },
        "content": "NOTE: - The order of the keywords does not matter. e.g. `n/Alice i/A10` is same as `i/A10 n/Alice` +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "- Booking matching at least one keyword will be returned"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* `findbooking n/Alice rn/001` +"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Result:* Shows booking of `Alice` or of room `001`."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d\u003d Locating a guest\u0027s room : `findroom`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "hmtey"
        },
        "content": "If you want to retrieve the room related to a guest\u0027s reservation, use the command `findroom`. +"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "*Format:* `findroom [rn/ROOM_NUMBER] ... [rn/ROOM_NUMBER] [n/NAME] ... [n/NAME] [i/ID] ... [i/ID]`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* `findroom i/A000000 rn/001 n/Tuan Le` +"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Result:* Shows the room booked by the guest with ID `A000000`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "//tag::findemptyroom[]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "\u003d\u003d\u003d Finding empty room: `findemptyroom`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "If you want to find empty rooms, use the command `findemptyroom` +"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "*Format:* `findemptyroom`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "* `findemptyroom`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "*Result:* Shows the empty rooms."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "//end::findemptyroom[]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d Deleting a guest : `delete`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "If you want to delete a guest\u0027s details from the hotel database, use the command `delete`. +"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Result:* Deletes the first guest on the list."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "//tag::deleteroom[]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "\u003d\u003d\u003d Deleting a room by room number : `deleteroom`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "If you want to delete a room from the hotel, use the command `deleteroom`. +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Format:* `deleteroom rn/ROOM_NUMBER`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* `deleteroom rn/101` +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Result:* Deletes room `101` into the database."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "\u003d\u003d\u003d Deleting a room by the position it appears in current room tab: `deleteroom`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "If you want to delete a room from the hotel by the index it appears in current room tab. +"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "*Format:* `deleteroom INDEX`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "* `deleteroom 1` +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "*Result:* Deletes the first room in the list."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "//end::deleteroom[]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "//tag::deleteservice[]"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d\u003d Deleting an available service: `deleteservice`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "If you want to delete an available service from the hotel database using the service\u0027s ID, use the command `deleteservice` +"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Format:* `deleteservice si/SERVICE_ID`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* `deleteservice si/WC` +"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Result:* Deletes a service with service ID `WC`."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "\u003d\u003d\u003d Deletting an available service by the position it appears in current service tab: `deleteservice`"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "*Format:* `deleteservice INDEX`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "* `deleteservice 1`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "*Result:* Deletes the first room the the list."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "//end::deleteservice[]"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "If you want to clear all data from Morpheus, use the command `clear` +"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Format:* `clear`"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Result:* If you want to exit the program, use the command `exit` +"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*Format:* `exit`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "hmtey"
        },
        "content": "The data of Morpheus is saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Morpheus folder."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d Glossary (Sanchari)"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* GUI - Graphical User Interface: System that conveys information through visual components."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* CLI - Command Line Interface: System that accepts text information from the user to execute actions."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* Hard Disk - Memory on your computer."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "* *Switch tab*: `switch TAB_NAME`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* *Add Guest* : `addguest n/NAME i/ID p/PHONE_NUMBER e/EMAIL` +"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "hmtey"
        },
        "content": "e.g. `addguest n/John Doe i/G1231231X p/1928310 e/johndoe@gmail.com`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* *Add Room* : `addroom rn/ROOM_NUMBER ti/TIER c/cost` +"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "e.g. `addroom rn/101 ti/GOLD c/140.00`"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* *Add Service* : `addservice si/SERVICE_ID d/DESCRIPTION c/COST` +"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "hmtey"
        },
        "content": "e.g. `addservice si/WC d/Wash clothes c/100.00`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "* *Check in* : `checkin i/ID rn/ROOM_NUMBER td/TO_DATE` or +"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "`checkin bi/BOOKING_ID` +"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "e.g. `checkin i/G1231231X rn/101 td/2020-03-14` +"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "or `checkin bi/a1b2c3d4`"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* *Check out* : `checkout rn/ROOM_NUMBER` +"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "hmtey"
        },
        "content": "e.g. `checkout rn/101`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "* *Extend* : `extend rn/ROOM_NUMBER td/TO_DATE` +"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "e.g. `extend rn/313 td/2020-05-20`"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* *Find Guest* : `findguest n/NAME …​ n/NAME i/ID …​ i/ID` +"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "hmtey"
        },
        "content": "e.g. `findguest i/A0000000 i/B0000000 n/Alice`"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* *Fetch Bill* : `fetchbill i/ID [rn/ROOM_NUMBER]` +"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "hmtey"
        },
        "content": "e.g. `fetchbill i/G1231231X`"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* *Charge Service* : `chargeservice i/PERSON_ID rn/ROOM_NUMBER si/SERVICE_ID` +"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "hmtey"
        },
        "content": "e.g. `chargeservice i/G1231231X rn/100 si/WC`"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* *Delete Charged Service* : `deletecservice i/PERSON_ID rn/ROOM_NUMBER si/SERVICE_ID` +"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "hmtey"
        },
        "content": "e.g. `deletecservice i/G1231231X rn/100 si/WC`"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* *Make Reservation* : `reserve i/ID rn/ROOM_NUMBER df/FROM_DATE dt/TO_DATE` +"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "hmtey"
        },
        "content": "e.g. `reserve i/G1231231X rn/102 df/ 2020-12-12 dt/ 2020-12-30`"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* *Locate Room* : `rn/ROOM_NUMBER] ... [rn/ROOM_NUMBER] [n/NAME] ... [n/NAME] [i/ID] ... [i/ID]` +"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "hmtey"
        },
        "content": "e.g. `findroom i/A000000 rn/001 n/Tuan Le`"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* *Set Room Cost* : `setrcost rn/ROOM_NUMBER c/COST` +"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "hmtey"
        },
        "content": "e.g. `setrcost rn/101 c/50`"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 220,
      "tanphatls987": 11,
      "dawidjaja": 30,
      "youaremysky99": 72,
      "-": 101,
      "hmtey": 86
    }
  },
  {
    "path": "docs/team/dawidjaja.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "\u003d Daniel Alfred Widjaja - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "\u003d\u003d PROJECT: Morpheus"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "Morpheus is a desktop application that aims to facilitate the administrative work of hotel services as a hotel room management system. The system will also provide statistics and reports, constructed from the analysis of the details in the user-provided database. Most of the user interaction occurs via a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "* *Major enhancement #1*: implemented *check-in/check-out command*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "** What it does: This allows the user to check-in or check-out guest into the hotel."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "** Justification: It enables the user to keep track of which room is empty and which room is occupied."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "** Highlights: This enhancement is quite challenging since it is created in the early period which needs more planning."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "* *Major enhancement #2*: implemented *extend command*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "** What it does: This allows the user to extend the stay of guest."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "** Justification: Guest could probably extend stay if they wanted to. Without creating the bill for the previous stay, extend command allows it to be combined in the same bill."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "* *Minor enhancement*: Added booking ID implementation."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003ddawidjaja\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[Functional code \u0026 Test code]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "*** Managed releases `v1.3`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "*** Created several milestones on Github Page"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "*** Create and assign issue after discovery of bugs (Example: https://github.com/AY1920S2-CS2103T-W13-2/main/pull/249[#249])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "*** Update the User Guide accordingly https://github.com/AY1920S2-CS2103T-W13-2/main/pull/61[#61]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/AY1920S2-CS2103T-W13-2/main/pull/80[#80],"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W13-2/main/pull/85[#85],"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W13-2/main/pull/175[#175],"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W13-2/main/pull/211[#211],"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W13-2/main/pull/223[#223]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "*** Add checker script to make sure the code pass CI before they commit: https://github.com/AY1920S2-CS2103T-W13-2/main/pull/109[#109]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcheckin]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcheckout]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "include::../UserGuide.adoc[tag\u003dextend]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dreserve]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcheckin]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcheckout]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dextend]"
      }
    ],
    "authorContributionMap": {
      "dawidjaja": 68
    }
  },
  {
    "path": "docs/team/hmtey.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d Tey Hui Ming - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hmtey"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hmtey"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d PROJECT: Morpheus"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hmtey"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hmtey"
        },
        "content": "Morpheus is a desktop application that aims to facilitate the administrative work of hotel services as a hotel management system. The user interacts with it using a CLI, and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* *Major enhancement*: Set up the *billing system* for the Morpheus"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hmtey"
        },
        "content": ". Added the ability to *charge services to a bill*, *remove charged services from a bill* and *fetch \u0026 view bills*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** What it does: Allows the user to keep track of guests\u0027 bills and outstanding payments, with a list of their requested or used services."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** Justification: This feature improves the product significantly because as a hotel management system, Morpheus should be able to carry out administrative work like bookkeeping. This makes the billing system a key feature of the product."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** Highlights: This enhancement is a *core feature* of Morpheus and *necessary feature* of the billing system. Hence, it affects commands to be added in the future. It required an in-depth analysis of design alternatives as there were many ways to keep track of and manipulate bills in the code."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hmtey"
        },
        "content": ". Added the ability to *store \u0026 load bills*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** What it does: Allows the application to store bill information to the hard disk upon exit and load the data when reopened."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** Justification: This feature improves the product significantly because in order to facilitate bookkeeping, Morpheus must be able to save and load bill information."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** Highlights: This enhancement is a *necessary feature* of the billing system and therefore affects commands to be added in the future. It required a deep understanding of the storage component in the original addressbook."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* *Minor enhancement*: added the ability to set the cost of a room."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#\u003dundefined\u0026search\u003dhmtey[[Functional \u0026 Test code]]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hmtey"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hmtey"
        },
        "content": "*** Managed releases `v1.2` - `v1.4` (3 releases) on GitHub"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hmtey"
        },
        "content": "*** Maintaining the issue tracker"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hmtey"
        },
        "content": "*** Updated old references to addressbook (Pull requests https://github.com/AY1920S2-CS2103T-W13-2/main/pull/177[#177], https://github.com/AY1920S2-CS2103T-W13-2/main/pull/260[#260])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hmtey"
        },
        "content": "*** User Guide: https://github.com/AY1920S2-CS2103T-W13-2/main/pull/95[#95], https://github.com/AY1920S2-CS2103T-W13-2/main/pull/177/files[#177], https://github.com/AY1920S2-CS2103T-W13-2/main/pull/183[#183], https://github.com/AY1920S2-CS2103T-W13-2/main/pull/270[#270]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hmtey"
        },
        "content": "**** Standardized and cleaned up team\u0027s updates"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hmtey"
        },
        "content": "**** Added `setrcost`, `chargeservice`, `deletecservice` \u0026 `fetchbill` features"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hmtey"
        },
        "content": "**** Updated Introduction, Command Summary"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hmtey"
        },
        "content": "*** Developer Guide: https://github.com/AY1920S2-CS2103T-W13-2/main/pull/95[#95], https://github.com/AY1920S2-CS2103T-W13-2/main/pull/259[#259], https://github.com/AY1920S2-CS2103T-W13-2/main/pull/271[#271], https://github.com/AY1920S2-CS2103T-W13-2/main/pull/278/[#278]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hmtey"
        },
        "content": "**** Standardized and cleaned up team\u0027s updates"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hmtey"
        },
        "content": "**** Added Billing System Implementation"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hmtey"
        },
        "content": "**** Added diagrams (Billing System)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hmtey"
        },
        "content": "**** Updated Introduction, User Stories, Use Cases"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hmtey"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hmtey"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/AY1920S2-CS2103T-W13-2/main/pull/180[#180], https://github.com/AY1920S2-CS2103T-W13-2/main/pull/206[#206], https://github.com/AY1920S2-CS2103T-W13-2/main/pull/248[#248]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hmtey"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hmtey"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hmtey"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hmtey"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsetrcost]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hmtey"
        },
        "content": "include::../UserGuide.adoc[tag\u003dchargeservice]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hmtey"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddeletecservice]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hmtey"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfetchbill]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hmtey"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hmtey"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hmtey"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hmtey"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dintroduction]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hmtey"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dbillingsystem]"
      }
    ],
    "authorContributionMap": {
      "hmtey": 75
    }
  },
  {
    "path": "docs/team/johndoe.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "include::../UserGuide.adoc[tag\u003daddguest]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "dawidjaja": 1,
      "-": 71
    }
  },
  {
    "path": "docs/team/sancharib-git.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d Sanchari Bandyopadhyay - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d PROJECT: Morpheus"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "Morpheus is a hotel management system desktop application designed to manage the activities in a hotel. The user interacts with it in a CLI and it has a GUI created with JavaFx. It is written in Java."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* *Major enhancement*: Set up the *storage architecture for the Hotel* and implemented storage for **rooms and bookings**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** What it does: Allows the app to read and write room and booking details to hotel storage upon exit."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** Justification: This feature improves the product significantly because room and booking data of a hotel must be saved in a database to facilitate hotel management."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** Highlights: This implementation affected commands added in the future as initialization commands have to modify data in the storage. It required in depth analysis of the design of the storage component."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* *Major enhancement*: Set up the *display of the various lists* in the UI i.e. Room list, Booking list, Stay List"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** What it does: Allows users to view the rooms, bookings and stays in the hotel."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** Justification: This feature improves the product significantly as the users need to be able to see the current state of the hotel in the UI before entering any commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** Highlights: This implementation affected commands added in the future because users need to be able to view these lists first before executing commands on them."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* *Minor enhancement*: added a reserve command that allows the user to make reservations for a guest."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* *Minor enhancement*: updated and modified the user interface to make it personalized to Morpheus."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dsancharib-git\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[Functional code]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*** Managed releases `v1.2` - `v1.4` (3 releases) on GitHub"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*** Updated the GUI design (Pull requests https://github.com/AY1920S2-CS2103T-W13-2/main/pull/189[#189])"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*** Added hotel storage, and saved rooms and bookings and stays to hotel storage (Pull requests https://github.com/AY1920S2-CS2103T-W13-2/main/pull/85[#85], https://github.com/AY1920S2-CS2103T-W13-2/main/pull/107[#107], https://github.com/AY1920S2-CS2103T-W13-2/main/pull/223[#223])"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*** Added section on how to navigate the User Guide and cosmetic tweaks: (Pull requests https://github.com/AY1920S2-CS2103T-W13-2/main/pull/240[#240], https://github.com/AY1920S2-CS2103T-W13-2/main/pull/245[#245])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*** Added architecture diagrams, section on Initialization Feature, section on navigating the document and cosmetic tweaks to the Developer Guide (Pull requests https://github.com/AY1920S2-CS2103T-W13-2/main/pull/205[#205], https://github.com/AY1920S2-CS2103T-W13-2/main/pull/240[#240] )"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*** Issue management: (Examples: https://github.com/AY1920S2-CS2103T-W13-2/main/issues/255[#255], https://github.com/AY1920S2-CS2103T-W13-2/main/issues/37[#37])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/AY1920S2-CS2103T-W13-2/main/pull/183[#183], https://github.com/AY1920S2-CS2103T-W13-2/main/pull/248[#248] , https://github.com/AY1920S2-CS2103T-W13-2/main/pull/75[#75] , https://github.com/AY1920S2-CS2103T-W13-2/main/pull/109[#109]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/sancharib-git/ped/issues/7[1], https://github.com/sancharib-git/ped/issues/6[2], https://github.com/sancharib-git/ped/issues/5[3], https://github.com/sancharib-git/ped/issues/4[4], https://github.com/sancharib-git/ped/issues/1[5])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "|_Given below are some sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "include::../UserGuide.adoc[tag\u003dnav]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcommonparameters]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "include::../UserGuide.adoc[tag\u003dreserve]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "|_Given below are some sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dArchitecture]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dTesting]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 65
    }
  },
  {
    "path": "docs/team/tanphatls987.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "\u003d Tran Tan Phat - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "\u003d\u003d PROJECT: Morpheus"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "Morpheus is a desktop application used for hotel management. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 15 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "* *Major enhancement*: added *the ability to show and switch between tabs*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "** What it does: allows the user to quickly navigate between tabs."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "** Justification: This feature improves the product significantly because a user need to work with multiple type of data and the app should provide a convenient way to traverse between them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation was challenging as existed implementation only accounted for 1 tab."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "* *Minor enhancement*: modify old search command to accommodate new needs."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dtanphatls987\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dfalse[Functional code]]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "*** Managed releases `v1.2` - `v1.4` (3 releases) on GitHub"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "*** Updated the GUI (Pull requests https://github.com/AY1920S2-CS2103T-W13-2/main/pull/69[#69])"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "*** Wrote additional tests for existing features(Pull requests https://github.com/AY1920S2-CS2103T-W13-2/main/pull/181[#181])"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "*** Document for implementation: https://github.com/AY1920S2-CS2103T-W13-2/main/pull/92[#92], https://github.com/AY1920S2-CS2103T-W13-2/main/pull/232[#232]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/AY1920S2-CS2103T-W13-2/main/pull/71[#71], https://github.com/AY1920S2-CS2103T-W13-2/main/pull/85[#85]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples: https://github.com/tanphatls987/ped/issues/3[1],"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    https://github.com/tanphatls987/ped/issues/2[2], https://github.com/tanphatls987/ped/issues/1[3])"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "include::../UserGuide.adoc[tag\u003dswitch]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfindguest]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dUiCompJohnny]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dfindguest]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 59
    }
  },
  {
    "path": "docs/team/youaremysky99.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "\u003d\u003d PROJECT: Morpheus"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "Morpheus is a hotel management system desktop application designed to manage the activities in a hotel. The user interacts with it in a CLI and it has a GUI created with JavaFx. It is written in Java."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "* *Major enhancement*: implementing structure of Hotel"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "** What it does: Implementing structure of Hotel, basic objects such as Booking, Charges, Tier, Service."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "** Justification: This enhancement sets foundation for developing Morpheus."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "* *Major enhancement*: implementing hotel initialization"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "** What it does: Allows user to initialize hotel with data such as rooms, costs, available services."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "* *Major enhancement*: implementing deleting commands"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "** What it does: Allows user to delete guests, rooms, bookings, services from hote."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "* *Major enhancement*: implementing finding commands"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "** What it does: Allows user to find guests, bookings, rooms, empty rooms, services from hotel."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "* *Minor enhancement*: Implementing how UI shows response after each command:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "** What it does: Shows response by switching tabs, and filtering details to show that the action has been done."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dyouaremysky99\u0026tabRepo\u003dAY1920S2-CS2103T-W13-2%2Fmain%5Bmaster%5D[Functional code]]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "*** Managed releases `v1.2` - `v1.4` (3 releases) on GitHub"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "*** Wrote additional tests for existing features."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com/AY1920S2-CS2103T-W13-2/main/pull/285[#285]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "*** Issues management: https://github.com/AY1920S2-CS2103T-W13-2/main/issues/193[#193], https://github.com/AY1920S2-CS2103T-W13-2/main/issues/210[#210]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/AY1920S2-CS2103T-W13-2/main/pull/84[#84], https://github.com/AY1920S2-CS2103T-W13-2/main/pull/175[#175]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (https://github.com/youaremysky99/ped/issues)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "*** Integrated a new Github plugin (Travis CI) to the team repo"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "include::../UserGuide.adoc[tag\u003doverview]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddeleteroom]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddeleteservice]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dnonfunctional]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dfindcommand]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 72
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/add-remark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "The command should have the format of `remark INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "An example of the command is `remark 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create a new `remark` command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "All the commands inherit from the abstract class `Command` which means that they must override `execute()`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Output displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkHello.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between RemarkCommand and Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommandInterface.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` to  parse input from the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "While we are at it, let\u0027s change the error message to echo the values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The class must implement the `Parser` interface."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "image::ParserInterface.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "But what about the Index? Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".DeleteCommandParser.java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommandParser.java"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add `Remark` to the model"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "We achieve that by working with the `Person` model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person\u0027s name)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "Create a new `Remark` in `seedu.address.model.hotel.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make use of `Remark`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "----"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "----"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`seedu.address.ui.PersonCard`]."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/PersonListCard.fxml`]."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ".$remark shows up in each entry"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Modify `Person`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Person`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "WARNING: You must delete AddressBook\u0027s storage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Finalizing the UI"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ".The remark label is bound properly!"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "However, this is expected behavior as we have never changed `RemarkCommand` at all!"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ".Congratulations!"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkComplete.png[]"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "image::ContextMenu.png[, 1223px, 267px]"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "image::CreateTest.png[, 664px,751px]"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 1,
      "dawidjaja": 3,
      "-": 422
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.hotel.person.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Safe delete the field `address` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".invalidPersonAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source,json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "----"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "----"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 1,
      "dawidjaja": 2,
      "-": 114
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.BookKeeper;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.Hotel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ReadOnlyBookKeeper;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.ReadOnlyHotel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.storage.BookKeeperStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.storage.HotelStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.storage.JsonBookKeeperStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.storage.JsonHotelStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Morpheus ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        HotelStorage hotelStorage \u003d new JsonHotelStorage(userPrefs.getHotelFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        BookKeeperStorage bookKeeperStorage \u003d new JsonBookKeeperStorage(userPrefs.getBookKeeperFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, hotelStorage, bookKeeperStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * The data from the sample hotel will be used instead if {@code storage}\u0027s hotel is not found,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * or an empty hotel will be used instead if errors occur when reading {@code storage}\u0027s hotel."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        Optional\u003cReadOnlyHotel\u003e hotelOptional;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        Optional\u003cReadOnlyBookKeeper\u003e bookKeeperOptional;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        ReadOnlyHotel initialHotel;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        ReadOnlyBookKeeper initialBookKeeper;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            hotelOptional \u003d storage.readHotel();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            bookKeeperOptional \u003d storage.readBookKeeper();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            if (!addressBookOptional.isPresent() || !hotelOptional.isPresent() || !bookKeeperOptional.isPresent()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Hotel\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            initialHotel \u003d hotelOptional.orElseGet(SampleDataUtil::getSampleHotel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            initialBookKeeper \u003d bookKeeperOptional.orElseGet(SampleDataUtil::getSampleBookKeeper);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Hotel\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            initialHotel \u003d new Hotel();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            initialBookKeeper \u003d new BookKeeper();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Hotel\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            initialHotel \u003d new Hotel();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            initialBookKeeper \u003d new BookKeeper();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return new ModelManager(initialData, userPrefs, initialHotel, initialBookKeeper);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Hotel\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        logger.info(\"Starting Morpheus \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Morpheus ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 11,
      "-": 170,
      "hmtey": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String MESSAGE_BOOKINGS_LISTED_OVERVIEW \u003d \"%1$d bookings listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String MESSAGE_ROOMS_LISTED_OVERVIEW \u003d \"%1$d rooms listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/either/Either.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.commons.core.either;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "// Copyright 2018 The Bazel Authors. All rights reserved."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "// Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "// you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "// You may obtain a copy of the License at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "//    http://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "// Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "// distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "// See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "// limitations under the License."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * A container wrapping a value of one of two types. An {@code Either\u003cA, B\u003e} instance either wraps"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * an instance of {@code A} or a instance of {@code B}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * \u003cp\u003eJust as with {@link Pair}, this class is immutable, supports nullable values, and is"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * completely devoid of Bazel-business-logic-specific semantics. Avoid using it in public APIs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * \u003cp\u003eThis class is a a simple implementation of a general purpose \"sum\" type. In type theory, sum"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * types are the duals of product types -- the corresponding observation here is that {@link Either}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * is the dual of {@link Pair}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public abstract class Either\u003cA, B\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    // Disallow subclasses outside of this file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private Either() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /** Constructs a {@link Either} representing the left injection of {@code a}. */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static \u003cA, B\u003e Either\u003cA, B\u003e ofLeft(A a) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new LeftEither\u003c\u003e(a);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * check left"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public boolean isLeft() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return (this instanceof LeftEither);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * check right"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public boolean isRight() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return (this instanceof RightEither);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * get Left value."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return: left value."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @throws IllegalAccessError error"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public A getLeft() throws IllegalAccessError {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (!isLeft()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new IllegalAccessError();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return ((LeftEither\u003cA, B\u003e) this).getLeft();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * get right value"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return right value"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @throws IllegalAccessError error"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public B getRight() throws IllegalAccessError {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (!isRight()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new IllegalAccessError();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return ((RightEither\u003cA, B\u003e) this).getRight();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /** Constructs a {@link Either} representing the right injection of {@code b}. */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static \u003cA, B\u003e Either\u003cA, B\u003e ofRight(B b) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new RightEither\u003c\u003e(b);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Consumes the value injected into this {@link Either}. A left injection is consumed using"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * {@code leftConsumer} and a right injection is consumed using {@code rightConsumer}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public abstract void consume(Consumer\u003cA\u003e leftConsumer, Consumer\u003cB\u003e rightConsumer);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Maps the value injected into this {@link Either}. A left injection is mapped using"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * {@code leftFunction} and a right injection is mapped using {@code rightFunction}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public abstract \u003cC\u003e C map(Function\u003cA, C\u003e leftFunction, Function\u003cB, C\u003e rightFunction);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public abstract int hashCode();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public abstract boolean equals(Object other);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Left either."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param \u003cA\u003e: leftType"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param \u003cB\u003e: rightType"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private static class LeftEither\u003cA, B\u003e extends Either\u003cA, B\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        private final A a;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        private LeftEither(A a) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            this.a \u003d a;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public void consume(Consumer\u003cA\u003e leftConsumer, Consumer\u003cB\u003e rightConsumer) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            leftConsumer.accept(a);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "         * returns this left value"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "         */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public A getLeft() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return this.a;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public \u003cC\u003e C map(Function\u003cA, C\u003e leftFunction, Function\u003cB, C\u003e rightFunction) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return leftFunction.apply(a);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public int hashCode() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return Objects.hashCode(a);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            if (!(other instanceof LeftEither)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return Objects.equals(this.a, ((LeftEither) other).a);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return \"left injection of \" + a;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Right either."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param \u003cA\u003e: Left type"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param \u003cB\u003e: Right type"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private static class RightEither\u003cA, B\u003e extends Either\u003cA, B\u003e {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        private final B b;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        private RightEither(B b) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            this.b \u003d b;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public void consume(Consumer\u003cA\u003e leftConsumer, Consumer\u003cB\u003e rightConsumer) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            rightConsumer.accept(b);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public \u003cC\u003e C map(Function\u003cA, C\u003e leftFunction, Function\u003cB, C\u003e rightFunction) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return rightFunction.apply(b);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "         * returns this right value"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "         */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public B getRight() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return this.b;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public int hashCode() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return Objects.hashCode(b);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            if (!(other instanceof RightEither)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return Objects.equals(this.b, ((RightEither) other).b);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return \"right injection of \" + b;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 200
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize) + \"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance) + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 1,
      "dawidjaja": 1,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ReadOnlyBookKeeper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.ReadOnlyHotel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.Bill;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.booking.Booking;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Returns the Hotel."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @see seedu.address.model.Model#getHotel()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    ReadOnlyHotel getHotel();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Returns the BookKeeper."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * @see seedu.address.model.Model#getBookKeeper()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    ReadOnlyBookKeeper getBookKeeper();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of bookings"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    ObservableList\u003cBooking\u003e getFilteredBookingList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /** Returns an unmodifiable view of the room list */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    ObservableList\u003cRoom\u003e getRoomList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /** Returns an unmodifiable view of the booking list*/"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    ObservableList\u003cBooking\u003e getBookingList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Returns an unmodifiable view of the room list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    ObservableList\u003cRoom\u003e getFilteredRoomList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Returns an unmodifiable view of the bill list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    ObservableList\u003cBill\u003e getFilteredBillList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Returns the user prefs\u0027 hotel file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    Path getHotelFilePath();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 21,
      "tanphatls987": 1,
      "youaremysky99": 10,
      "-": 49,
      "hmtey": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.logic.parser.MorpheusParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ReadOnlyBookKeeper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.ReadOnlyHotel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.Bill;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.booking.Booking;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private final MorpheusParser morpheusParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        morpheusParser \u003d new MorpheusParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        Command command \u003d morpheusParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            storage.saveHotel(model.getHotel());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            storage.saveBookKeeper(model.getBookKeeper());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public ReadOnlyHotel getHotel() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return model.getHotel();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public ReadOnlyBookKeeper getBookKeeper() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return model.getBookKeeper();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public ObservableList\u003cBooking\u003e getFilteredBookingList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return model.getFilteredBookingList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public ObservableList\u003cRoom\u003e getRoomList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return model.getRoomList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public ObservableList\u003cBooking\u003e getBookingList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return model.getBookingList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public ObservableList\u003cRoom\u003e getFilteredRoomList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return model.getFilteredRoomList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public ObservableList\u003cBill\u003e getFilteredBillList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return model.getFilteredBillList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public Path getHotelFilePath() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return model.getHotelFilePath();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 25,
      "tanphatls987": 1,
      "youaremysky99": 10,
      "-": 73,
      "hmtey": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddGuestCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "public class AddGuestCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addguest\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to Morpheus.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            + PREFIX_ID + \"ID \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            + PREFIX_ID + \"J000000 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            + PREFIX_TAG + \"VIP \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in Morpheus\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON_ID \u003d \"There is a person with this id\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Creates an AddGuestCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public AddGuestCommand(Person person) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (model.hasPersonId(toAdd.getPersonId())) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON_ID);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Predicate\u003cPerson\u003e personPredicate \u003d person -\u003e person.getPersonId().equals(this.toAdd.getPersonId());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        model.updateFilteredPersonList(personPredicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), \"guest\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                || (other instanceof AddGuestCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddGuestCommand) other).toAdd));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 15,
      "sancharib-git": 1,
      "youaremysky99": 6,
      "-": 53,
      "hmtey": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddRoomCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOMNUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.hotel.bill.RoomCost;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.hotel.room.Tier;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Adds a room to hotel"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class AddRoomCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addroom\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a room to Morpheus.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + PREFIX_ROOMNUMBER + \"ROOM_NUM \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            + PREFIX_TIER + \"TIER \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            + PREFIX_COST + \"COST \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            + PREFIX_ROOMNUMBER + \"12E \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            + PREFIX_TIER + \"GOLD \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            + PREFIX_COST + \"150.00\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New room added: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ROOM \u003d \"This room was added before!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String MESSAGE_ROOM_NAME_NOT_ALLOWED \u003d \"This room name is not allowed\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private final String toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    private final RoomCost cost;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    private final Tier tier;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Construct a room command with a room name"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param roomName: name of the added room."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public AddRoomCommand(String roomName, RoomCost cost, Tier tier) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(roomName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        requireNonNull(cost);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        requireNonNull(tier);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.toAdd \u003d roomName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        this.tier \u003d tier;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        // Room name cannot contain space"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        if (this.toAdd.contains(\" \") || this.toAdd.equals(\"\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new CommandException(MESSAGE_ROOM_NAME_NOT_ALLOWED);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (model.hasRoom(this.toAdd)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ROOM);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        model.addRoom(this.toAdd, tier, cost);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Predicate\u003cRoom\u003e predicate \u003d room -\u003e room.hasName(this.toAdd);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        model.updateFilteredRoomList(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), \"room\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                || (other instanceof AddRoomCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddRoomCommand) other).toAdd));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawidjaja": 19,
      "youaremysky99": 60,
      "hmtey": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddServiceCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERVICEID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ReadOnlyHotel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.bill.AvailableService;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.bill.Cost;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ids.AvailableServiceId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Adds available service."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class AddServiceCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addservice\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": add a service to hotel\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + PREFIX_SERVICEID + \"ID \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + PREFIX_COST + \"COST\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + PREFIX_SERVICEID + \"WC \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Wash clothes \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + PREFIX_COST + \"5\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New available service added: %1$s (ID: %2$s)\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String DUPLICATED_MESSAGE \u003d \"This ID has been used. Please choose other ID.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private Cost cost;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private AvailableServiceId id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * service without proper_id"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public AddServiceCommand(String description, Cost cost, AvailableServiceId id) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(cost);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        ReadOnlyHotel hotel \u003d model.getHotel();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        AvailableService toAdd \u003d new AvailableService(description, cost, id);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (hotel.getAvailableServiceList().stream().anyMatch(availableService -\u003e availableService.getId()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                .equals(toAdd.getId()))) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new CommandException(DUPLICATED_MESSAGE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        model.addAvailableService(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, description, id), \"service\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 57,
      "hmtey": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddTierCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOMNUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ReadOnlyHotel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Tier;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Add a tier, can grouped with list of rooms."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class AddTierCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addtier\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a tier name.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + PREFIX_TIER + \"TIER_NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + PREFIX_ROOMNUMBER + \"ROOM_NUM\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + PREFIX_TIER + \"Gold \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + PREFIX_ROOMNUMBER + \"12E 12F 12T\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New tier added: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TIER \u003d \"This tier name was added before!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_ROOM_NOT_FOUND \u003d \"One of the rooms does not exist in the hotel!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_ROOM_HAS_TIER \u003d \"Some rooms have already have a tier,\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + \"unable to add tiers to them!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private final Tier toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private final ArrayList\u003cString\u003e roomNums;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Construct a AddTierCommand with tier and list of rooms."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param tier: tier"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param roomNums: list of room numbers."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public AddTierCommand(Tier tier, ArrayList\u003cString\u003e roomNums) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(tier);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.toAdd \u003d tier;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.roomNums \u003d roomNums;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (model.hasTier(toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TIER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        ReadOnlyHotel hotel \u003d model.getHotel();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        for (String roomNum: roomNums) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            if (!model.hasRoom(roomNum)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                throw new CommandException(MESSAGE_ROOM_NOT_FOUND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Function\u003cString, Room\u003e findRoom \u003d (String s) -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            for (Room room: hotel.getRoomList()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                if (room.hasName(s)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                    return room;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        };"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        for (String roomNum: roomNums) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            if (model.hasRoom(roomNum)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                Room current \u003d findRoom.apply(roomNum);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                assert current !\u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                if (current.hasNonDefaultTier()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                    throw new CommandException(MESSAGE_ROOM_HAS_TIER);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        model.addTier(this.toAdd, this.roomNums);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (other instanceof AddTierCommand) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            Tier otherTier \u003d ((AddTierCommand) other).toAdd;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            ArrayList otherRoomNums \u003d ((AddTierCommand) other).roomNums;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return this.toAdd.equals(otherTier) \u0026\u0026 this.roomNums.equals(otherRoomNums);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 3,
      "youaremysky99": 94,
      "hmtey": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ChargeServiceCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hmtey"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOMNUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERVICEID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.AvailableService;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.Bill;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ids.AvailableServiceId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hmtey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * Adds a service to a room in a guest’s tab."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hmtey"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hmtey"
        },
        "content": "public class ChargeServiceCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"chargeservice\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a service to the guest\u0027s bill. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + PREFIX_ID + \"PERSON_ID \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + PREFIX_ROOMNUMBER + \"ROOM_NUMBER \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + PREFIX_SERVICEID + \"SERVICE_ID\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + PREFIX_ID + \"G1231231X \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + PREFIX_ROOMNUMBER + \"101 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + PREFIX_SERVICEID + \"WC\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Added service (ID: %1$s) to the bill of \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + \"guest (ID: %2$s) for room %3$s.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_GUEST_NONEXISTENT \u003d \"Guest (ID: %1$s) does not exist in the system.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_ROOM_NONEXISTENT \u003d \"Room %1$s does not exist in the system.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_SERVICE_NONEXISTENT \u003d \"Service (ID: %1$s) does not exist in the system.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_NO_BOOKING \u003d \"Guest (ID: %1$s) is not checked into room %2$s.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private final PersonId personId;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private final RoomId roomId;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private final AvailableServiceId serviceId;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * @param personId to add bill to"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * @param roomId that the bill is for"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * @param serviceId of service to add"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public ChargeServiceCommand(PersonId personId, RoomId roomId, AvailableServiceId serviceId) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireAllNonNull(personId, roomId, serviceId);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.roomId \u003d roomId;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.serviceId \u003d serviceId;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        Optional\u003cPerson\u003e person \u003d model.findPersonWithId(personId);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        Optional\u003cRoom\u003e room \u003d model.findRoom(roomId);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        Optional\u003cAvailableService\u003e service \u003d model.findService(serviceId);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (person.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_GUEST_NONEXISTENT, personId));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (room.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_ROOM_NONEXISTENT, roomId));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (service.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_SERVICE_NONEXISTENT, serviceId));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (!model.isGuestCheckedIn(person.get(), room.get())) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NO_BOOKING, personId, roomId));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        model.chargeService(roomId, service.get());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        Predicate\u003cBill\u003e predicate \u003d b -\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            if (b.getRoomId().equals(roomId)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        };"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        model.updateFilteredBillList(predicate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, serviceId, personId, roomId), \"bill\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hmtey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hmtey": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CheckInByIdCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.hotel.Stay;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.hotel.booking.Booking;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": " * Check in a guest using a booking ID."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "public class CheckInByIdCommand extends CheckInCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public static final String MESSAGE_BOOKING_NOT_EXISTS \u003d \"Booking with ID %1$s does not exist.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public static final String MESSAGE_BOOKING_TOO_EARLY \u003d \"The booking is from %1$s.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public static final String MESSAGE_BOOKING_TOO_LATE \u003d \"The booking already expired at %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    private String bookingId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public CheckInByIdCommand(String bookingId) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        requireNonNull(bookingId);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        this.bookingId \u003d bookingId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        Optional\u003cBooking\u003e booking \u003d model.findBookingById(bookingId);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        if (booking.isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_BOOKING_NOT_EXISTS, bookingId));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        LocalDateTime fd \u003d booking.get().getTimeFrom();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        LocalDateTime td \u003d booking.get().getTimeTo();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        if (fd.isAfter(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_BOOKING_TOO_EARLY, fd));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        if (td.isBefore(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_BOOKING_TOO_LATE, td));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        model.checkIn(new Stay(booking.get(), \"\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawidjaja": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CheckInCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKINGID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOMNUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TODATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.hotel.Stay;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.Bill;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.timeframe.TimeFrame;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": " * Checks in a guest to the hotel."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "public class CheckInCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"checkin\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Checks in a guest to the hotel.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        + \"Parameters: \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        + PREFIX_ID + \"ID \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        + PREFIX_ROOMNUMBER + \"ROOMNUMBER \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        + PREFIX_TODATE + \"TODATE \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        + \"or \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        + PREFIX_BOOKINGID + \"BOOKING_ID\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        + \"Example: \\n\" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        + PREFIX_ID + \"G1231231U \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        + PREFIX_ROOMNUMBER + \"101 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        + PREFIX_TODATE + \"2020-03-14\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        + \"or \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        + PREFIX_BOOKINGID + \"BOOKING_ID\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Checked in %2$s into room %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public static final String MESSAGE_ROOM_OCCUPIED \u003d \"Room %1$s is occupied\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_ROOM_NOT_EXISTS \u003d \"Room %1$s does not exist.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_PERSON_NOT_EXISTS \u003d \"Guest (ID: %1$s) does not exist.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public static final String MESSAGE_DATE_PASSED \u003d \"%1$s has passed\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    private PersonId personId;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    private RoomId roomId;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    private LocalDateTime toDate;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Creates a CheckInCommand from current date until {@code toDate}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param personId the ID of the Person who wants to check in."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param roomId the ID of the Room that is going to be checked in."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param toDate the end Date of the stay."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public CheckInCommand(PersonId personId, RoomId roomId, LocalDateTime toDate) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        requireNonNull(personId);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        requireNonNull(roomId);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        requireNonNull(toDate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        this.roomId \u003d roomId;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        this.toDate \u003d toDate;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public CheckInCommand() { }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        Optional\u003cPerson\u003e person \u003d model.findPersonWithId(personId);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        Optional\u003cRoom\u003e room \u003d model.findRoom(roomId);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        if (person.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_PERSON_NOT_EXISTS, personId));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        if (room.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_ROOM_NOT_EXISTS, roomId));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        if (!(toDate.isAfter(LocalDateTime.now()))) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DATE_PASSED, toDate));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        TimeFrame stayTimeFrame \u003d new TimeFrame(LocalDateTime.now(), toDate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        if (!(model.isRoomFree(person.get(), room.get(), stayTimeFrame))) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_ROOM_OCCUPIED, roomId));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        Stay stay \u003d new Stay(person.get(), room.get(), LocalDateTime.now(), toDate, \"\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        model.checkIn(stay);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Predicate\u003cRoom\u003e predicate \u003d thisRoom -\u003e stay.getRoom().isSameRoom(thisRoom);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        model.updateFilteredRoomList(predicate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        Optional\u003cBill\u003e bill \u003d model.findBill(roomId);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (bill.isEmpty()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            model.addBill(new Bill(personId, roomId));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        model.chargeRoomCost(roomId, room.get().getRoomCost(), stay);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, roomId, personId), \"room\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 2,
      "dawidjaja": 90,
      "youaremysky99": 4,
      "hmtey": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CheckOutCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOMNUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": " * Checks out a guest to the hotel."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "public class CheckOutCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"checkout\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Checks out a guest to the hotel.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        + PREFIX_ROOMNUMBER + \"ROOM_NUMBER\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        + PREFIX_ROOMNUMBER + \"101 \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Room %1$s is successfully checked out!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_ROOM_NOT_EXISTS \u003d \"Room %1$s does not exist.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_ROOM_NOT_OCCUPIED \u003d \"Room %1$s is empty.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    private final RoomId roomId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Creates a CheckOutCommand from current date until {@code toDate}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param roomId the ID of the Room that is going to be checked out."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public CheckOutCommand(RoomId roomId) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        requireNonNull(roomId);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        this.roomId \u003d roomId;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        Optional\u003cRoom\u003e room \u003d model.findRoom(roomId);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        if (room.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_ROOM_NOT_EXISTS, roomId));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        if (model.checkOut(room.get())) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            Predicate\u003cRoom\u003e predicate \u003d thisRoom -\u003e room.get().isSameRoom(thisRoom);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            model.updateFilteredRoomList(predicate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            model.deleteBill(roomId);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, roomId), \"room\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_ROOM_NOT_OCCUPIED, roomId));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawidjaja": 56,
      "youaremysky99": 1,
      "hmtey": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * Clears Morpheus."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Morpheus has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "hmtey": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**String to switch between view.*/"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private final Optional\u003cString\u003e uiView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.uiView \u003d Optional.empty();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Construct command result with view attach to it."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param feedbackToUser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param showHelp"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param exit"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param uiView"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, String uiView) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.uiView \u003d Optional.of(uiView);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * {@code uiView} and other fields set to their default values."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public CommandResult(String feedbackToUser, String uiView) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this(feedbackToUser, false, false, uiView);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public Optional\u003cString\u003e getUiView() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return uiView;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 23,
      "youaremysky99": 8,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteBookingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.commons.core.either.Either;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.booking.Booking;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Deletes a reservation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class DeleteBookingCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletebooking\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \": Deletes the booking identified by the index number used in the displayed booking list, or by booking\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \" id.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) or [bi/BOOKING_ID]\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" bi/123455679\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String MESSAGE_INDEX_INVALID \u003d \"This index is not valid\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String MESSAGE_DELETE_BOOKING_SUCCESS \u003d \"Deleted Booking: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String MESSAGE_BOOKING_ID_NOT_FOUND \u003d \"Booking id not found!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private Either\u003cIndex, String\u003e toDelete;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public DeleteBookingCommand(Index index) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.toDelete \u003d Either.ofLeft(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public DeleteBookingCommand(String bookingId) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.toDelete \u003d Either.ofRight(bookingId);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (this.toDelete.isRight()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            String id \u003d this.toDelete.getRight();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            Optional\u003cBooking\u003e bookingOptional \u003d model.findBookingById(id);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            if (bookingOptional.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                throw new CommandException(MESSAGE_BOOKING_ID_NOT_FOUND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            Booking booking \u003d bookingOptional.get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            model.deleteBooking(booking);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_BOOKING_SUCCESS, booking.getBookingId()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            Index index \u003d this.toDelete.getLeft();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            List\u003cBooking\u003e lastShownList \u003d model.getFilteredBookingList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                throw new CommandException(MESSAGE_INDEX_INVALID);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            Booking booking \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            model.deleteBooking(booking);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_BOOKING_SUCCESS, booking.getBookingId()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteChargedServiceCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hmtey"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOMNUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERVICEID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.AvailableService;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.Bill;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.Chargeable;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ids.AvailableServiceId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hmtey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * Deletes a charged service from the guest\u0027s bill."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hmtey"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hmtey"
        },
        "content": "public class DeleteChargedServiceCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletecservice\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a service from the guest\u0027s bill. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + PREFIX_ID + \"PERSON_ID \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + PREFIX_ROOMNUMBER + \"ROOM_NUMBER \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + PREFIX_SERVICEID + \"SERVICE_ID\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + PREFIX_ID + \"G1231231X \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + PREFIX_ROOMNUMBER + \"101 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + PREFIX_SERVICEID + \"WC\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deleted service (ID: %1$s) from the bill of \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + \"guest (ID: %2$s) for room %3$s.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_GUEST_NONEXISTENT \u003d \"Guest (ID: %1$s) does not exist in the system.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_ROOM_NONEXISTENT \u003d \"Room %1$s does not exist in the system.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_SERVICE_NONEXISTENT \u003d \"Service (ID: %1$s) does not exist in the system.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_BILL_NONEXISTENT \u003d \"Guest (ID: %1$s) does not have any outstanding bills for \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + \"Room %2$s.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_SERIVCE_NOT_IN_BILL \u003d \"Service (ID: %1$s) does not exist in the bill.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private final PersonId personId;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private final RoomId roomId;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private final AvailableServiceId serviceId;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * @param personId to delete charges service for"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * @param roomId that the bill is for"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * @param serviceId of service to delete"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public DeleteChargedServiceCommand(PersonId personId, RoomId roomId, AvailableServiceId serviceId) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireAllNonNull(personId, roomId, serviceId);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.roomId \u003d roomId;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.serviceId \u003d serviceId;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        Optional\u003cPerson\u003e person \u003d model.findPersonWithId(personId);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        Optional\u003cRoom\u003e room \u003d model.findRoom(roomId);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        Optional\u003cAvailableService\u003e service \u003d model.findService(serviceId);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        Optional\u003cBill\u003e bill \u003d model.findBill(roomId);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (person.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_GUEST_NONEXISTENT, personId));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (room.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_ROOM_NONEXISTENT, roomId));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (service.isEmpty()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_SERVICE_NONEXISTENT, serviceId));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (bill.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_BILL_NONEXISTENT, personId, roomId));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        Optional\u003cChargeable\u003e serviceInBill \u003d bill.get().getService(serviceId);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (serviceInBill.isEmpty()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_SERIVCE_NOT_IN_BILL, serviceId));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        model.deleteChargedService(roomId, service.get());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        Predicate\u003cBill\u003e predicate \u003d b -\u003e {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            if (b.getRoomId().equals(roomId)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        };"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        model.updateFilteredBillList(predicate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, serviceId, personId, roomId), \"bill\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hmtey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hmtey": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.commons.core.either.Either;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list or a person,\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \"or by a person ID.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n.\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \"or Parameters: i/PERSON_ID\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"i/A000000\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String MESSAGE_PERSON_NOT_FOUND \u003d \"Person id not found.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private final Either\u003cIndex, PersonId\u003e toDelete;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.toDelete \u003d Either.ofLeft(targetIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public DeleteCommand(PersonId id) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.toDelete \u003d Either.ofRight(id);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (this.toDelete.isLeft()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            Index targetIndex \u003d this.toDelete.getLeft();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete), \"guest\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            PersonId id \u003d this.toDelete.getRight();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            Optional\u003cPerson\u003e personOptional \u003d model.findPersonWithId(id);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            if (personOptional.isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                throw new CommandException(MESSAGE_PERSON_NOT_FOUND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            model.deletePerson(personOptional.get());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personOptional.get()), \"guest\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (!(other instanceof DeleteCommand)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return this.toDelete.equals(command.toDelete);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 1,
      "youaremysky99": 39,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteRoomCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOMNUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.commons.core.either.Either;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Deletes a room from hotel"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class DeleteRoomCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteroom\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a room from Morpheus by ROOM_ID\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \", or  index number used in the displayed room list\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + PREFIX_ROOMNUMBER + \"ROOM_NUM\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \"or Parameters: Index INDEX (must be a positive integer)\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + PREFIX_ROOMNUMBER + \"12E\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Room %1$s has been deleted.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String MESSAGE_ROOM_NOT_FOUND \u003d \"There is no such room.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String MESSAGE_INDEX_INVALID \u003d \"Invalid index\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private final Either\u003cString, Index\u003e toDelete;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Constructs a {@code DeleteRoomCommand}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param roomNum: a string denoting room\u0027s number."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public DeleteRoomCommand(String roomNum) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(roomNum);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.toDelete \u003d Either.ofLeft(roomNum);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public DeleteRoomCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.toDelete \u003d Either.ofRight(targetIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (this.toDelete.isLeft()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            String roomNum \u003d toDelete.getLeft();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            if (!model.hasRoom(roomNum)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                throw new CommandException(MESSAGE_ROOM_NOT_FOUND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            model.deleteRoom(roomNum);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, roomNum), \"room\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            Index targetIndex \u003d this.toDelete.getRight();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            List\u003cRoom\u003e lastShownList \u003d model.getFilteredRoomList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                throw new CommandException(MESSAGE_INDEX_INVALID);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            Room room \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            model.deleteRoom(room.getRoomNum());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, room.getRoomNum()), \"room\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        // short circuit"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        // check instance"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (!(other instanceof DeleteRoomCommand)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        // check equality"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        DeleteRoomCommand otherCommand \u003d (DeleteRoomCommand) other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return toDelete.equals(otherCommand.toDelete);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteServiceCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERVICEID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.commons.core.either.Either;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ReadOnlyHotel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.bill.AvailableService;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ids.AvailableServiceId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Deletes an available services"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class DeleteServiceCommand extends Command { public static final String COMMAND_WORD \u003d \"deleteservice\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": delete an available service from hotel by service id\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \"or by  the index number used in the displayed room list\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + PREFIX_SERVICEID + \"ID\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \"or \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \"Parameters: INDEX (must be positive)\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + PREFIX_SERVICEID + \"WC\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The available service with ID: %1$s has been deleted\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String MESSAGE_SERVICE_NOT_FOUND \u003d \"The system has no service with id: %1$s. Please try again\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String MESSAGE_INDEX_INVALID \u003d \"Invalid index\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private final Either\u003cAvailableServiceId, Index\u003e toDelete;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * creates an DeleteServiceCommand with given id."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param id: an id"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public DeleteServiceCommand(AvailableServiceId id) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.toDelete \u003d Either.ofLeft(id);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * creates and DeleteServiceCommand with a given index."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public DeleteServiceCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.toDelete \u003d Either.ofRight(targetIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        ReadOnlyHotel hotel \u003d model.getHotel();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (this.toDelete.isLeft()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            AvailableServiceId id \u003d this.toDelete.getLeft();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            if (hotel.getAvailableServiceList().stream().noneMatch(availableService -\u003e availableService.getId()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                    .equals(id))) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_SERVICE_NOT_FOUND, id.toString()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            model.deleteAvailableService(id);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, id.toString()), \"service\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            List\u003cAvailableService\u003e services \u003d model.getFilteredServiceList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            Index index \u003d this.toDelete.getRight();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d services.size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                throw new CommandException(MESSAGE_INDEX_INVALID);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            AvailableService service \u003d services.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            model.deleteAvailableService(service.getId());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, service.getId().toString()), \"service\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (!(other instanceof DeleteServiceCommand)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        DeleteServiceCommand otherCommand \u003d (DeleteServiceCommand) other;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return this.toDelete.equals(otherCommand.toDelete);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Remark;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            + \"[\" + PREFIX_ID + \"ID] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        PersonId updatedPersonId \u003d editPersonDescriptor.getPersonId().orElse(personToEdit.getPersonId());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        Remark updatedRemark \u003d personToEdit.getRemark(); // edit command does not allow editing remarks"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return new Person(updatedName, updatedPersonId, updatedPhone, updatedEmail, updatedRemark, updatedTags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        private PersonId personId;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            setPersonId(toCopy.personId);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, tags);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        public void setPersonId(PersonId personId) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            this.personId \u003d personId;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        public Optional\u003cPersonId\u003e getPersonId() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            return Optional.ofNullable(personId);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                    \u0026\u0026 getPersonId().equals(e.getPersonId())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 17,
      "sancharib-git": 2,
      "-": 208
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExtendCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOMNUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TODATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.hotel.Stay;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.hotel.bill.Bill;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.timeframe.TimeFrame;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": " * Extend stay for a room command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "public class ExtendCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"extend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Extend the guest\u0027s stay.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        + \"Parameters: \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        + PREFIX_ROOMNUMBER + \"ROOMNUMBER \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        + PREFIX_TODATE + \"TODATE \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        + \"Example: \\n\" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        + PREFIX_ROOMNUMBER + \"101 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        + PREFIX_TODATE + \"2020-03-14\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Room %1$s is extended to %2$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public static final String MESSAGE_ROOM_NOT_EXISTS \u003d \"Room %1$s does not exist.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public static final String MESSAGE_ROOM_OCCUPIED \u003d \"Room %1$s is occupied\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public static final String MESSAGE_ROOM_NOT_CHECKED_IN \u003d \"Room %1$s is not checked in.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public static final String MESSAGE_DATE_PASSED \u003d \"%1$s has passed\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    private RoomId roomId;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    private LocalDateTime toDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Creates a ExtendCommand for room with {@code roomId} until {@code toDate}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param roomId the ID of the Room that is going to be extended."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param toDate the end Date of the stay."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public ExtendCommand(RoomId roomId, LocalDateTime toDate) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        requireNonNull(roomId);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        requireNonNull(toDate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        this.roomId \u003d roomId;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        this.toDate \u003d toDate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        Optional\u003cRoom\u003e room \u003d model.findRoom(roomId);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        if (room.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_ROOM_NOT_EXISTS, roomId));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        Optional\u003cStay\u003e stay \u003d model.findStay(room.get());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        if (stay.isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_ROOM_NOT_CHECKED_IN, roomId));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        Person person \u003d stay.get().getPayee();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        if (!(toDate.isAfter(LocalDateTime.now()))) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DATE_PASSED, toDate));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        TimeFrame stayTimeFrame \u003d new TimeFrame(stay.get().getTimeTo(), toDate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        if (!(model.isRoomFree(person, room.get(), stayTimeFrame))) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_ROOM_OCCUPIED, roomId));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        LocalDateTime fromDate \u003d stay.get().getTimeTo();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        model.extendRoom(stay.get(), toDate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        Predicate\u003cRoom\u003e predicate \u003d thisRoom -\u003e stay.get().getRoom().isSameRoom(thisRoom);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        model.updateFilteredRoomList(predicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        Optional\u003cBill\u003e bill \u003d model.findBill(roomId);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        if (bill.isEmpty()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            model.addBill(new Bill(person.getPersonId(), roomId));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        model.chargeExtendRoomCost(roomId, room.get().getRoomCost(), stay.get(), fromDate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, roomId, toDate), \"room\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawidjaja": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FetchBillCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hmtey"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOMNUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.Bill;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.Cost;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hmtey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * Retrieves the bill of a guest"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hmtey"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hmtey"
        },
        "content": "public class FetchBillCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"fetchbill\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + \": Retrieves the bill of a guest.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + PREFIX_ID + \"PERSONID \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + \"[\" + PREFIX_ROOMNUMBER + \"ROOMNUMBER]...\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + PREFIX_ID + \"J0000000 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + PREFIX_ROOMNUMBER + \"101\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_SUCCESS_NONSPECIFIC \u003d \"The total amount payable for all bill/s of \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + \"guest %1$s (ID: %2$s) is: $%3$s.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + \"For more details, check the bill tab.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_SUCCESS_SPECIFIC \u003d \"The total amount payable for the bill of \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + \"room %1$s of guest %2$s (ID: %3$s) is: $%4$s.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + \"For more details, check the bill tab.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_GUEST_NONEXISTENT \u003d \"Guest (ID: %1$s) does not exist in the system.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_ROOM_NONEXISTENT \u003d \"Room %1$s does not exist in the system.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_BILL_NONEXISTENT \u003d \"Guest (ID: %1$s) does not have any outstanding bills.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_SPECIFIC_BILL_NONEXISTENT \u003d \"Guest (ID: %1$s) does not have any \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + \"outstanding bills for room %2$s.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private final PersonId personId;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private final boolean isSpecific;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    private final RoomId roomId;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * @param personId to fetch the bills of"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public FetchBillCommand(PersonId personId) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireNonNull(personId);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        this.roomId \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.isSpecific \u003d false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Specifically fetch the bill of room number {@code roomId} for {@code personId}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public FetchBillCommand(PersonId personId, RoomId roomId) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireNonNull(personId);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        requireNonNull(roomId);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        this.roomId \u003d roomId;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.isSpecific \u003d true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        Cost total;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        Optional\u003cPerson\u003e person \u003d model.findPersonWithId(personId);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        ObservableList\u003cBill\u003e bills \u003d model.findBillList(personId);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (person.isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new CommandException(MESSAGE_GUEST_NONEXISTENT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (bills.isEmpty()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_BILL_NONEXISTENT, personId));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (isSpecific) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            Optional\u003cRoom\u003e room \u003d model.findRoom(roomId);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            Optional\u003cBill\u003e bill \u003d model.findBill(roomId);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            if (room.isEmpty()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_ROOM_NONEXISTENT, roomId));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            if (bill.isEmpty()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_SPECIFIC_BILL_NONEXISTENT, personId, roomId));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            total \u003d bill.get().getBillTotal();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            Predicate\u003cBill\u003e predicate \u003d b -\u003e {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                if (b.getRoomId().equals(roomId)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            };"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            model.updateFilteredBillList(predicate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_SPECIFIC,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                    roomId, person.get().getName(), personId, total), \"bill\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            total \u003d model.getGuestBillsTotal(personId);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            Predicate\u003cBill\u003e predicate \u003d b -\u003e {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                if (b.getPersonId().equals(personId)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            };"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            model.updateFilteredBillList(predicate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_NONSPECIFIC,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                    person.get().getName(), personId, total), \"bill\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hmtey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 1,
      "dawidjaja": 9,
      "hmtey": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindBookingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOMNUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.booking.MatchBookingPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.person.MatchNamePredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.person.MatchPersonIdPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.room.MatchRoomPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Finds and lists all bookings in hotel whose matches specified bookers of rooms."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class FindBookingCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findbooking\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": returns all bookings with matching personID\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \" or matching name or matching rooms.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \"Parameters: [i/ID] ... [i/ID] [n/NAME] ... [n/NAME] [rn/ROOM_ID] ... [rn/ROOM_ID]\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + PREFIX_ID + \"A000000 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + PREFIX_NAME + \"Tuan Le\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + PREFIX_ROOMNUMBER + \"001\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private final HashSet\u003cName\u003e names;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private final HashSet\u003cPersonId\u003e personIds;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private final HashSet\u003cRoomId\u003e roomIds;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Constructs a FindBookingCommand with list of predicates."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param names: list of names."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param personIds: list of personIds."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param roomIds: list of roomIds."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public FindBookingCommand(HashSet\u003cName\u003e names, HashSet\u003cPersonId\u003e personIds, HashSet\u003cRoomId\u003e roomIds) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(names);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(personIds);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(roomIds);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.names \u003d names;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.personIds \u003d personIds;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.roomIds \u003d roomIds;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        MatchBookingPredicate predicate \u003d new MatchBookingPredicate();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        predicate.setNamePredicate(new MatchNamePredicate(names));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        predicate.setPersonIdPredicate(new MatchPersonIdPredicate(personIds));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        predicate.setRoomPredicate(new MatchRoomPredicate(roomIds));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        model.updateFilteredBookingList(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                String.format(Messages.MESSAGE_BOOKINGS_LISTED_OVERVIEW, model.getFilteredBookingList().size())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        );"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (!(other instanceof FindBookingCommand)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        FindBookingCommand otherCommand \u003d (FindBookingCommand) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return otherCommand.names.equals(this.names)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                \u0026\u0026 otherCommand.roomIds.equals(this.roomIds)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                \u0026\u0026 otherCommand.personIds.equals(personIds);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return names.toString() + \" \" + roomIds.toString() + \" \" + personIds.toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindEmptyRoomCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROMDATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TODATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.timeframe.TimeFrame;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " * Find empty room in a period of time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "public class FindEmptyRoomCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findemptyroom\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"Find empty rooms in a time period\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        + \"Parameters\" + \": \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        + PREFIX_FROMDATE + \" \" + \"START_DATE\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        + PREFIX_TODATE + \" \" + \"END_DATE\" + \"\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        + \"Example: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        + PREFIX_FROMDATE + \"2020-12-12 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        + PREFIX_TODATE + \"2020-12-14 \" + \"\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public static final String FIND_SUCCESS \u003d \"Show available rooms\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private final TimeFrame timeFrame;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public FindEmptyRoomCommand(TimeFrame timeFrame) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.timeFrame \u003d timeFrame;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        Predicate\u003cRoom\u003e roomPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            room -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                boolean clashBooking \u003d model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                    .getBookingList()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                    .anyMatch(u -\u003e u.getBookDuration().isClash(timeFrame)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                        \u0026\u0026 u.getRoom().hasName(room.getRoomNum())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                    );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                return (!clashBooking);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            };"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        model.updateFilteredRoomList(roomPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return new CommandResult(FIND_SUCCESS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindGuestCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.MatchNamePredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.MatchPersonIdPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.person.MatchPersonPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " * Finds and lists all persons in address book whose match specified names of ids."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "public class FindGuestCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findguest\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": return all people with matching id or matching name.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            + \"Parameters: [i/ID] ... [i/ID] [n/KEYWORD] ... [n/KEYWORD] \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            + PREFIX_ID + \"A0000000\" + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            + PREFIX_ID + \"B0000000\" + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            + PREFIX_NAME + \"Alice\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private final HashSet\u003cName\u003e nameList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private final HashSet\u003cPersonId\u003e personIdList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Constructor for findguestcommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param nameList"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param personIdList"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public FindGuestCommand(HashSet\u003cName\u003e nameList, HashSet\u003cPersonId\u003e personIdList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.nameList \u003d nameList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.personIdList \u003d personIdList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        MatchPersonPredicate predicate \u003d new MatchPersonPredicate();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        predicate.setNamePredicate(new MatchNamePredicate(nameList));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        predicate.setPersonIdPredicate(new MatchPersonIdPredicate(personIdList));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (!(other instanceof FindGuestCommand)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        FindGuestCommand othCommand \u003d (FindGuestCommand) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return othCommand.nameList.equals(nameList)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            \u0026\u0026 othCommand.personIdList.equals(personIdList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return nameList.toString() + \" \" + personIdList.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 68,
      "youaremysky99": 5,
      "hmtey": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindRoomCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOMNUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.booking.Booking;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Finds and lists all rooms in hotel."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class FindRoomCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findroom\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": returns all rooms with matching Room ID\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \"or the person who stay in this room.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + \"Parameters: [rn/ROOM_NUMBER] ... [rn/ROOM_NUMBER] [n/NAME] ... [n/NAME] [i/ID] ... [i/ID]\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + PREFIX_ID + \"A000000 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + PREFIX_ROOMNUMBER + \"001 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            + PREFIX_NAME + \"Tuan Le\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private HashSet\u003cName\u003e names;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private HashSet\u003cRoomId\u003e roomIds;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private HashSet\u003cPersonId\u003e personIds;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Creates new FindRoomCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param names: list of names."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param roomIds: list of roomIds"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param personIds: list of personIds"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public FindRoomCommand(HashSet\u003cName\u003e names, HashSet\u003cRoomId\u003e roomIds, HashSet\u003cPersonId\u003e personIds) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(names);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(roomIds);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(personIds);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.names \u003d names;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.roomIds \u003d roomIds;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.personIds \u003d personIds;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        HashSet\u003cRoom\u003e x \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Predicate\u003cRoom\u003e predicate \u003d room -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            if (this.roomIds.contains(room.getRoomId())) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            Optional\u003cBooking\u003e bookingOpt \u003d model.getCurrentStay(room);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            if (bookingOpt.isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                Booking booking \u003d bookingOpt.get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                if (names.contains(booking.getPayee().getName())) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                if (personIds.contains(booking.getPayee().getPersonId())) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        };"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        model.updateFilteredRoomList(predicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                String.format(Messages.MESSAGE_ROOMS_LISTED_OVERVIEW, model.getFilteredRoomList().size())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        );"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (!(other instanceof FindRoomCommand)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        FindRoomCommand otherCommand \u003d (FindRoomCommand) other;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return this.names.equals(otherCommand.names)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                \u0026\u0026 this.personIds.equals(otherCommand.personIds)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                \u0026\u0026 this.roomIds.equals(otherCommand.roomIds);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return names.toString() + \" \" + roomIds.toString() + personIds.toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 103,
      "hmtey": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemarkCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Remark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            + PREFIX_REMARK + \"[REMARK]\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            + PREFIX_REMARK + \"Likes to swim.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public RemarkCommand(Index index, Remark remark) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPersonId(), personToEdit.getPhone(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                personToEdit.getEmail(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 89,
      "tanphatls987": 2,
      "hmtey": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ReserveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROMDATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOMNUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TODATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.booking.Booking;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.timeframe.TimeFrame;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.timeframe.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * Reserves a room under an existing person in the address book."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "public class ReserveCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reserve\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Reserves a room for a guest.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        + PREFIX_ID + \"PERSONID \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        + PREFIX_ROOMNUMBER + \"ROOMNUMBER \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        + PREFIX_FROMDATE + \"FROMDATE \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        + PREFIX_TODATE + \"TODATE\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        + \"Example: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        + PREFIX_ID + \"C0000000 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        + PREFIX_ROOMNUMBER + \"101 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        + PREFIX_FROMDATE + \"2020-12-12 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        + PREFIX_TODATE + \"2020-12-23 \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_ADD_RESERVE_SUCCESS \u003d \"Booked room %1$s for guest %2$s (ID: %3$s).\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_GUEST_NONEXISTENT \u003d \"Guest (ID: %1$s) does not exist in the system.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_ROOM_NONEXISTENT \u003d \"Room %1$s does not exist in the system.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_ROOM_BOOKED \u003d \"Room %1$s is already booked at this time.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    private final RoomId roomId;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private final PersonId personId;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private final TimeFrame reserveDuration;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public ReserveCommand(PersonId personId, RoomId roomNum, LocalDateTime fromDate, LocalDateTime toDate)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throws InvalidTimeFrameException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        requireAllNonNull(personId, roomNum, fromDate, toDate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        this.roomId \u003d roomNum;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        LocalDateTime reserveFrom \u003d fromDate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        LocalDateTime reserveTo \u003d toDate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        ///this can throw InvalidTimeFrame"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.reserveDuration \u003d new TimeFrame(reserveFrom, reserveTo);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        Optional\u003cPerson\u003e payee \u003d model.findPersonWithId(personId);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (payee.isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_GUEST_NONEXISTENT, personId));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        Optional\u003cRoom\u003e room \u003d model.findRoom(roomId);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (room.isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_ROOM_NONEXISTENT, roomId));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        if (!(model.isRoomFree(payee.get(), room.get(), reserveDuration))) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_ROOM_BOOKED, roomId));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        Booking toBook \u003d new Booking(payee.get(), room.get(), reserveDuration);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        model.bookRoom(toBook);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Predicate\u003cBooking\u003e predicate \u003d booking -\u003e booking.getBookingId().equals(toBook.getBookingId());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        model.updateFilteredBookingList(predicate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new CommandResult(generateSuccessMessage(payee.get()), \"booking\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Generates a command execution success message based on whether reservation added successfully"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private String generateSuccessMessage(Person payee) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return String.format(MESSAGE_ADD_RESERVE_SUCCESS, roomId, payee.getName(), personId);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 45,
      "tanphatls987": 22,
      "dawidjaja": 7,
      "youaremysky99": 6,
      "hmtey": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SetRoomCostCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hmtey"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOMNUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.RoomCost;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hmtey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * Sets the cost of a room."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hmtey"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hmtey"
        },
        "content": "public class SetRoomCostCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"setrcost\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets the cost of the room number specified.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + \"Parameters:\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + PREFIX_ROOMNUMBER + \"ROOMNUMBER \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + PREFIX_COST + \"COST \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + PREFIX_ROOMNUMBER + \"101 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            + PREFIX_COST + \"50\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The cost for room %1$s is set to %2$s per night.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_ROOM_NONEXISTENT \u003d \"Room %1$s does not exist in the system.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public static final String MESSAGE_ROOM_COST_INVALID \u003d \"Room cost must be a non-negative number\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private final RoomId roomNum;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private final RoomCost cost;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * @param roomNum to set the cost of"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * @param cost of room per night"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public SetRoomCostCommand(RoomId roomNum, RoomCost cost) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireAllNonNull(roomNum, cost);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.roomNum \u003d roomNum;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        Optional\u003cRoom\u003e room \u003d model.findRoom(roomNum);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (room.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_ROOM_NONEXISTENT, roomNum));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (cost.isNegative()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            throw new CommandException(MESSAGE_ROOM_COST_INVALID);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        model.setRoomCost(room.get(), cost);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Predicate\u003cRoom\u003e predicate \u003d thisRoom -\u003e thisRoom.isSameRoom(room.get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        model.updateFilteredRoomList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, roomNum, cost), \"room\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hmtey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 8,
      "youaremysky99": 5,
      "hmtey": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SwitchViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " * Switch to a specify tab and reset all filter on it."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "public class SwitchViewCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switch\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" : \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        + \"Switch to and reset filter on a selected tab\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        + \"Parameter: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        + \"TAB_NAME\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        + \"(One of {welcome, guest, room, booking, service, bill})\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \" + \"welcome\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private final String uiView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Construcctor."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param uiView"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public SwitchViewCommand(String uiView) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.uiView \u003d uiView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        switch (uiView) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        case \"welcome\" :"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        case \"guest\" :"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            model.updateFilteredPersonList(u -\u003e true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        case \"room\" :"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            model.updateFilteredRoomList(u -\u003e true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        case \"booking\" :"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            model.updateFilteredBookingList(u -\u003e true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        case \"service\" :"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            model.updateFilteredServiceList(u -\u003e true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        case \"bill\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            model.updateFilteredBillList(u -\u003e true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            throw new CommandException(\"Not a valid tab name\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            \"Switch tab\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            false,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            false,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            uiView"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        );"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public boolean equals(Object oth) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (this \u003d\u003d oth) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (!(oth instanceof SwitchViewCommand)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        SwitchViewCommand othSwitchViewCommand \u003d (SwitchViewCommand) oth;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return this.uiView.equals(othSwitchViewCommand.uiView);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 73,
      "youaremysky99": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddGuestCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.logic.commands.AddGuestCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Remark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " * Parses input arguments and creates a new AddGuestCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "public class AddGuestCommandParser implements Parser\u003cAddGuestCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddGuestCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * and returns an AddGuestCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public AddGuestCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ID, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ID, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                AddGuestCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        PersonId personId \u003d ParserUtil.parsePersonId(argMultimap.getValue(PREFIX_ID).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        Remark remark \u003d new Remark(\"\"); // add command does not allow adding remarks straight away"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        Person person \u003d new Person(name, personId, phone, email, remark, tagList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return new AddGuestCommand(person);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 25,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddRoomCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOMNUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.logic.commands.AddRoomCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.hotel.bill.RoomCost;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.hotel.room.Tier;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Parses input arguments and creates a new AddRoomCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class AddRoomCommandParser implements Parser\u003cAddRoomCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddRoomCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * and returns an AddRoomCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public AddRoomCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ROOMNUMBER, PREFIX_COST, PREFIX_TIER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ROOMNUMBER, PREFIX_COST, PREFIX_TIER)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                            AddRoomCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        if (!Tier.isTierOption(argMultimap.getValue(PREFIX_TIER).get())) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new ParseException(Tier.MESSAGE_INVALID_TIER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String roomNum \u003d argMultimap.getValue(PREFIX_ROOMNUMBER).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        RoomCost cost \u003d new RoomCost(ParserUtil.parseCost(argMultimap.getValue(PREFIX_COST).get()).toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        Tier tier \u003d ParserUtil.parseTier(argMultimap.getValue(PREFIX_TIER).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return new AddRoomCommand(roomNum, cost, tier);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawidjaja": 13,
      "youaremysky99": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddServiceCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERVICEID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.logic.commands.AddServiceCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.bill.Cost;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ids.AvailableServiceId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " *  Parses input arguments ad creates new AddServiceCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class AddServiceCommandParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddServiceCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * and returns an AddServiceCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public AddServiceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_COST, PREFIX_SERVICEID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_COST, PREFIX_SERVICEID)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                            AddServiceCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Cost cost \u003d ParserUtil.parseCost(argMultimap.getValue(PREFIX_COST).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String description \u003d argMultimap.getValue(PREFIX_DESCRIPTION).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        AvailableServiceId id \u003d ParserUtil.parseAvailableServiceId(argMultimap.getValue(PREFIX_SERVICEID).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new AddServiceCommand(description, cost, id);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} valueis in the given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 45,
      "hmtey": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddTierCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOMNUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.logic.commands.AddTierCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Tier;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Parses input arguments ad creates new AddTierCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class AddTierCommandParser implements Parser\u003cAddTierCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddRoomCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * and returns an AddTierCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public AddTierCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TIER, PREFIX_ROOMNUMBER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TIER, PREFIX_ROOMNUMBER)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                            AddTierCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String roomNumList \u003d argMultimap.getValue(PREFIX_ROOMNUMBER).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Tier tier \u003d ParserUtil.parseTier(argMultimap.getValue(PREFIX_TIER).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String[] roomNums \u003d roomNumList.split(\" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Collections.addAll(result, roomNums);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new AddTierCommand(tier, result);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 1,
      "youaremysky99": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ChargeServiceCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hmtey"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOMNUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERVICEID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.logic.commands.ChargeServiceCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ids.AvailableServiceId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hmtey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * Parses input arguments and creates a new ServiceCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hmtey"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hmtey"
        },
        "content": "public class ChargeServiceCommandParser implements Parser\u003cChargeServiceCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ChargeServiceCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * and returns a ChargeServiceCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public ChargeServiceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ID, PREFIX_ROOMNUMBER, PREFIX_SERVICEID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ID, PREFIX_ROOMNUMBER, PREFIX_SERVICEID)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                            ChargeServiceCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        PersonId personId \u003d ParserUtil.parsePersonId(argMultimap.getValue(PREFIX_ID).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        RoomId roomNum \u003d ParserUtil.parseRoom(argMultimap.getValue(PREFIX_ROOMNUMBER).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        AvailableServiceId serviceId \u003d ParserUtil.parseAvailableServiceId(argMultimap.getValue(PREFIX_SERVICEID).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return new ChargeServiceCommand(personId, roomNum, serviceId);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hmtey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hmtey": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CheckInCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKINGID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOMNUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TODATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.logic.commands.CheckInByIdCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.logic.commands.CheckInCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": " * Parses input arguments and creates a new CheckInCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "public class CheckInCommandParser implements Parser\u003cCheckInCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CheckInCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @return an CheckInCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public CheckInCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_ID, PREFIX_ROOMNUMBER, PREFIX_TODATE, PREFIX_BOOKINGID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        if ((!arePrefixesPresent(argMultimap, PREFIX_ID, PREFIX_ROOMNUMBER, PREFIX_TODATE)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_BOOKINGID))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                    CheckInCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_BOOKINGID)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            String bookingId \u003d argMultimap.getValue(PREFIX_BOOKINGID).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            return new CheckInByIdCommand(bookingId);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        PersonId personId \u003d ParserUtil.parsePersonId(argMultimap.getValue(PREFIX_ID).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        RoomId roomId \u003d ParserUtil.parseRoom(argMultimap.getValue(PREFIX_ROOMNUMBER).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        LocalDateTime toDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_TODATE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return new CheckInCommand(personId, roomId, toDate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawidjaja": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CheckOutCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOMNUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.logic.commands.CheckOutCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": " * Parses input arguments and creates a new CheckOutCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "public class CheckOutCommandParser implements Parser\u003cCheckOutCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CheckOutCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @return an CheckOutCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public CheckOutCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_ROOMNUMBER);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ROOMNUMBER)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                    CheckOutCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            );"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        RoomId roomId \u003d ParserUtil.parseRoom(argMultimap.getValue(PREFIX_ROOMNUMBER).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return new CheckOutCommand(roomId);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawidjaja": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public static final Prefix PREFIX_ID \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final Prefix PREFIX_SERVICEID \u003d new Prefix(\"si/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public static final Prefix PREFIX_BOOKINGID \u003d new Prefix(\"bi/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public static final Prefix PREFIX_ROOMNUMBER \u003d new Prefix(\"rn/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public static final Prefix PREFIX_TIER \u003d new Prefix(\"ti/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final Prefix PREFIX_FROMDATE \u003d new Prefix(\"fd/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final Prefix PREFIX_TODATE \u003d new Prefix(\"td/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final Prefix PREFIX_COST \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 1,
      "sancharib-git": 2,
      "dawidjaja": 2,
      "youaremysky99": 1,
      "-": 14,
      "hmtey": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteBookingCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKINGID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOMNUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.logic.commands.DeleteBookingCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Parses string input to {@code DeleteBookingCommand}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class DeleteBookingCommandParser implements Parser\u003cDeleteBookingCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Parses"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return an {@code DeleteBookingCommand}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @throws ParseException if parser fails."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public DeleteBookingCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        ArgumentMultimap mapping \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            ArgumentTokenizer.tokenize(userInput, PREFIX_BOOKINGID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (isAnyPrefixPresent(mapping, PREFIX_BOOKINGID)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            ///use ID case"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            String bookingId \u003d mapping.getValue(PREFIX_ROOMNUMBER).get();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return new DeleteBookingCommand(bookingId);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                return new DeleteBookingCommand(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteBookingCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private boolean isAnyPrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    };"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteChargedServiceCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hmtey"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOMNUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERVICEID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.logic.commands.ChargeServiceCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.logic.commands.DeleteChargedServiceCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ids.AvailableServiceId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hmtey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * Parses input arguments and creates a new DeleteChargesServiceCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hmtey"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hmtey"
        },
        "content": "public class DeleteChargedServiceCommandParser implements Parser\u003cDeleteChargedServiceCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteChargedServiceCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * and returns a DeleteChargedServiceCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public DeleteChargedServiceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ID, PREFIX_ROOMNUMBER, PREFIX_SERVICEID);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ID, PREFIX_ROOMNUMBER, PREFIX_SERVICEID)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                            ChargeServiceCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        PersonId personId \u003d ParserUtil.parsePersonId(argMultimap.getValue(PREFIX_ID).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        RoomId roomNum \u003d ParserUtil.parseRoom(argMultimap.getValue(PREFIX_ROOMNUMBER).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        AvailableServiceId serviceId \u003d ParserUtil.parseAvailableServiceId(argMultimap.getValue(PREFIX_SERVICEID).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return new DeleteChargedServiceCommand(personId, roomNum, serviceId);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hmtey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hmtey": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public DeleteCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        ArgumentMultimap mapping \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, PREFIX_ID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (isAnyPrefixPresent(mapping, PREFIX_ID)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            PersonId id \u003d ParserUtil.parsePersonId(mapping.getValue(PREFIX_ID).get());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return new DeleteCommand(id);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                return new DeleteCommand(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private boolean isAnyPrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 17,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteRoomCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOMNUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.logic.commands.DeleteRoomCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Parses input arguments and creates a new DeleteRoomCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class DeleteRoomCommandParser implements Parser\u003cDeleteRoomCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteRoomCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * and returns an DeleteRoomCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public DeleteRoomCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ROOMNUMBER);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (isAnyPrefixPresent(argMultimap, PREFIX_ROOMNUMBER)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            String roomNum \u003d argMultimap.getValue(PREFIX_ROOMNUMBER).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return new DeleteRoomCommand(roomNum);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                Index target \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                return new DeleteRoomCommand(target);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                                DeleteRoomCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private static boolean isAnyPrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    };"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteServiceCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERVICEID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.logic.commands.DeleteServiceCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ids.AvailableServiceId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Parses input arguments and creates a new DeleteServiceCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class DeleteServiceCommandParser implements Parser\u003cDeleteServiceCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteRoomCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * and returns an DeleteRoomCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public DeleteServiceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_SERVICEID);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (isAnyPrefixPresent(argMultimap, PREFIX_SERVICEID)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            String id \u003d argMultimap.getValue(PREFIX_SERVICEID).get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return new DeleteServiceCommand(new AvailableServiceId(id));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                return new DeleteServiceCommand(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                                DeleteServiceCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private boolean isAnyPrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    };"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        /*if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 3,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExtendCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOMNUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TODATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.logic.commands.ExtendCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": " * Parses input arguments and creates a new ExtendCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "public class ExtendCommandParser implements Parser\u003cExtendCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExtendCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @return an ExtendCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public ExtendCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_ROOMNUMBER, PREFIX_TODATE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ROOMNUMBER, PREFIX_TODATE)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                    ExtendCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        RoomId roomId \u003d ParserUtil.parseRoom(argMultimap.getValue(PREFIX_ROOMNUMBER).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        LocalDateTime toDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_TODATE).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return new ExtendCommand(roomId, toDate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawidjaja": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FetchBillCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hmtey"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOMNUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.logic.commands.FetchBillCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hmtey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * Parses input arguments and creates a new FetchBillCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hmtey"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hmtey"
        },
        "content": "public class FetchBillCommandParser implements Parser\u003cFetchBillCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FetchBillCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * and returns an FetchBillCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public FetchBillCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ID, PREFIX_ROOMNUMBER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ID)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FetchBillCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        PersonId personId \u003d ParserUtil.parsePersonId(argMultimap.getValue(PREFIX_ID).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_ROOMNUMBER)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            RoomId roomId \u003d ParserUtil.parseRoom(argMultimap.getValue(PREFIX_ROOMNUMBER).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            return new FetchBillCommand(personId, roomId);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            return new FetchBillCommand(personId);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hmtey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawidjaja": 3,
      "hmtey": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindBookingCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOMNUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.logic.commands.FindBookingCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Parsers input arguments and creates a new FindBookingCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class FindBookingCommandParser implements Parser\u003cFindBookingCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindBookingCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * and returns a FindBookingCoomand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public FindBookingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ID, PREFIX_ROOMNUMBER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (!isAnyPrefixPresent(argMultimap, PREFIX_NAME, PREFIX_ID, PREFIX_ROOMNUMBER)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                            FindBookingCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        HashSet\u003cPersonId\u003e personIdList \u003d getPersonIdList(argMultimap);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        HashSet\u003cName\u003e nameList \u003d getNameList(argMultimap);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        HashSet\u003cRoomId\u003e roomIdList \u003d getRoomIdList(argMultimap);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new FindBookingCommand(nameList, personIdList, roomIdList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private HashSet\u003cPersonId\u003e getPersonIdList(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new HashSet\u003c\u003e(argMultimap"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                .getAllValues(PREFIX_ID)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                .map(PersonId::new)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                .collect(Collectors.toList())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private HashSet\u003cName\u003e getNameList(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new HashSet\u003c\u003e(argMultimap"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                .getAllValues(PREFIX_NAME)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                .map(Name::new)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                .collect(Collectors.toList())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        );"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private HashSet\u003cRoomId\u003e getRoomIdList(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new HashSet\u003c\u003e(argMultimap"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                .getAllValues(PREFIX_ROOMNUMBER)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                .map(RoomId::new)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                .collect(Collectors.toList())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        );"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private boolean isAnyPrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    };"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindEmptyRoomCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROMDATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TODATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.logic.commands.FindEmptyRoomCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.timeframe.TimeFrame;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " * Parser for find empty room command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "public class FindEmptyRoomCommandParser implements Parser\u003cFindEmptyRoomCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public FindEmptyRoomCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            PREFIX_FROMDATE, PREFIX_TODATE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_FROMDATE, PREFIX_TODATE)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindEmptyRoomCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            );"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        LocalDateTime fromDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_FROMDATE).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        LocalDateTime toDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_TODATE).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return new FindEmptyRoomCommand(new TimeFrame(fromDate, toDate));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindGuestCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.logic.commands.FindGuestCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " * Parses input arguments and creates a new FindGuestCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "public class FindGuestCommandParser implements Parser\u003cFindGuestCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindGuestCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * and returns a FindGuestCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public FindGuestCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (!isAnyPrefixPresent(argMultimap, PREFIX_NAME, PREFIX_ID)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                    FindGuestCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        HashSet\u003cPersonId\u003e personIdList \u003d getPersonIdList(argMultimap);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        HashSet\u003cName\u003e nameList \u003d getNameList(argMultimap);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return new FindGuestCommand(nameList, personIdList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private HashSet\u003cPersonId\u003e getPersonIdList(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return new HashSet\u003c\u003e(argMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            .getAllValues(PREFIX_ID)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            .map(PersonId::new)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            .collect(Collectors.toList())"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private HashSet\u003cName\u003e getNameList(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return new HashSet\u003c\u003e(argMultimap"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            .getAllValues(PREFIX_NAME)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            .map(Name::new)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            .collect(Collectors.toList())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        );"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private boolean isAnyPrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    };"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindRoomCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOMNUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.logic.commands.FindRoomCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Parsers input arguments and creates a new FindBookingCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class FindRoomCommandParser implements Parser\u003cFindRoomCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindRoomCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * and returns a FindRoomCoomand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public FindRoomCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ID, PREFIX_ROOMNUMBER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (!isAnyPrefixPresent(argMultimap, PREFIX_NAME, PREFIX_ID, PREFIX_ROOMNUMBER)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                            FindRoomCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        HashSet\u003cPersonId\u003e personIdList \u003d getPersonIdList(argMultimap);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        HashSet\u003cName\u003e nameList \u003d getNameList(argMultimap);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        HashSet\u003cRoomId\u003e roomIdList \u003d getRoomIdList(argMultimap);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new FindRoomCommand(nameList, roomIdList, personIdList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private HashSet\u003cPersonId\u003e getPersonIdList(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new HashSet\u003c\u003e(argMultimap"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                .getAllValues(PREFIX_ID)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                .map(PersonId::new)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                .collect(Collectors.toList())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private HashSet\u003cName\u003e getNameList(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new HashSet\u003c\u003e(argMultimap"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                .getAllValues(PREFIX_NAME)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                .map(Name::new)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                .collect(Collectors.toList())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        );"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private HashSet\u003cRoomId\u003e getRoomIdList(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new HashSet\u003c\u003e(argMultimap"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                .getAllValues(PREFIX_ROOMNUMBER)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                .map(RoomId::new)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                .collect(Collectors.toList())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        );"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private boolean isAnyPrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    };"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MorpheusParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.logic.commands.AddGuestCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.logic.commands.AddRoomCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.logic.commands.AddServiceCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.logic.commands.ChargeServiceCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.logic.commands.CheckInCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.logic.commands.CheckOutCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.logic.commands.DeleteBookingCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.logic.commands.DeleteChargedServiceCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.logic.commands.DeleteRoomCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.logic.commands.DeleteServiceCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.logic.commands.ExtendCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.logic.commands.FetchBillCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.logic.commands.FindBookingCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.logic.commands.FindEmptyRoomCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.logic.commands.FindGuestCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.logic.commands.FindRoomCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.logic.commands.ReserveCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.logic.commands.SetRoomCostCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.logic.commands.SwitchViewCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hmtey"
        },
        "content": "public class MorpheusParser {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        case AddGuestCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            return new AddGuestCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        case AddRoomCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return new AddRoomCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        case AddServiceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return new AddServiceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        case CheckInCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            return new CheckInCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        case CheckOutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            return new CheckOutCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        case DeleteBookingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return new DeleteBookingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        case DeleteChargedServiceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            return new DeleteChargedServiceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        case DeleteServiceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return new DeleteServiceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        case DeleteRoomCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return new DeleteRoomCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        case FetchBillCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            return new FetchBillCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        case FindGuestCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            return new FindGuestCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        case FindBookingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return new FindBookingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        case FindRoomCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return new FindRoomCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        case RemarkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            return new RemarkCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        case ReserveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            return new ReserveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        case ChargeServiceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            return new ChargeServiceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        case SetRoomCostCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            return new SetRoomCostCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        case ExtendCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            return new ExtendCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        case SwitchViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            return new SwitchViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        case FindEmptyRoomCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            return new FindEmptyRoomCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 15,
      "sancharib-git": 8,
      "dawidjaja": 12,
      "youaremysky99": 27,
      "-": 69,
      "hmtey": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.Cost;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Tier;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ids.AvailableServiceId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    private static final String MESSAGE_DATE_FORMAT \u003d \"Date should be in YYYY-MM-DD format.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public static LocalDateTime parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        LocalDate localDate;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            localDate \u003d LocalDate.parse(trimmedDate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                MESSAGE_DATE_FORMAT));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return localDate.atTime(12, 0, 0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public static RoomId parseRoom(String roomNumber) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        requireNonNull(roomNumber);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return new RoomId(roomNumber.trim());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Parse {@code String s} into a {@code PersonId}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public static PersonId parsePersonId(String s) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return new PersonId(s);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Parse {@code Strign s} into a {@code AvailableServiceId}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static AvailableServiceId parseAvailableServiceId(String s) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new AvailableServiceId(s);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Parse {@code String s} into a {@code Tier}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static Tier parseTier(String s) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new Tier(s);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Parses a {@code String cost} into a {@code Cost}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * @throws ParseException if the given {@code cost} is invalid."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static Cost parseCost(String cost) throws ParseException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireNonNull(cost);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        String trimmedCost \u003d cost.trim();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (!Cost.isValidCost(trimmedCost)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new ParseException(Cost.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return new Cost(trimmedCost);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 12,
      "sancharib-git": 20,
      "dawidjaja": 17,
      "youaremysky99": 16,
      "-": 105,
      "hmtey": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RemarkCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Remark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * Parses input arguments and creates a new {@code RemarkCommand} object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "public class RemarkCommandParser implements Parser\u003cRemarkCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code RemarkCommand}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * and returns a {@code RemarkCommand} object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_REMARK);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return new RemarkCommand(index, new Remark(remark));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 36,
      "tanphatls987": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ReserveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROMDATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOMNUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TODATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.logic.commands.ReserveCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * Parses input arguments and creates a new ReserveCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "public class ReserveCommandParser implements Parser\u003cReserveCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ReserveCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * and returns an ReserveCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public ReserveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                PREFIX_ID, PREFIX_ROOMNUMBER, PREFIX_FROMDATE, PREFIX_TODATE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ID, PREFIX_ROOMNUMBER, PREFIX_FROMDATE, PREFIX_TODATE)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReserveCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        PersonId personId \u003d ParserUtil.parsePersonId(argMultimap.getValue(PREFIX_ID).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        RoomId roomNum \u003d ParserUtil.parseRoom(argMultimap.getValue(PREFIX_ROOMNUMBER).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        LocalDateTime fromDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_FROMDATE).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        LocalDateTime toDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_TODATE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return new ReserveCommand(personId, roomNum, fromDate, toDate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 45,
      "tanphatls987": 4,
      "dawidjaja": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SetRoomCostCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hmtey"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOMNUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.logic.commands.SetRoomCostCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.Cost;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.bill.RoomCost;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hmtey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * Parses input arguments and creates a new SetRoomCostCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hmtey"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hmtey"
        },
        "content": "public class SetRoomCostCommandParser implements Parser\u003cSetRoomCostCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SetRoomCostCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * and returns an SetRoomCostCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public SetRoomCostCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ROOMNUMBER, PREFIX_COST);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ROOMNUMBER, PREFIX_COST)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetRoomCostCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        RoomId roomNum \u003d ParserUtil.parseRoom(argMultimap.getValue(PREFIX_ROOMNUMBER).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        Cost cost \u003d ParserUtil.parseCost(argMultimap.getValue(PREFIX_COST).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return new SetRoomCostCommand(roomNum, new RoomCost(cost.toString()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hmtey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 2,
      "hmtey": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SwitchViewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.logic.commands.SwitchViewCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " * Parser for switch view command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "public class SwitchViewCommandParser implements Parser\u003cSwitchViewCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public SwitchViewCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        userInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (userInput.isEmpty()) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                    SwitchViewCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return new SwitchViewCommand(userInput.trim());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.UniquePersonList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Return true if there is a person with same id in the guest list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param personId"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public boolean hasPersonId(PersonId personId) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return findPersonWithId(personId).isPresent();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Return a person with matching id"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param personId"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public Optional\u003cPerson\u003e findPersonWithId(PersonId personId) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return persons.asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            .filter(u -\u003e u.getPersonId().equals(personId))"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            .findFirst();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 25,
      "-": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/model/BookKeeper.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hmtey"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.Stay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.AvailableService;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.Bill;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.Cost;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.RoomCost;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.UniqueBillList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hmtey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * Manages the bills of guests in the hotel"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hmtey"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hmtey"
        },
        "content": "public class BookKeeper implements ReadOnlyBookKeeper {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private final UniqueBillList bills;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Creates a new empty bookkeeper."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public BookKeeper() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            bills \u003d new UniqueBillList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Creates a BookKeeper using the bills in {@code toBeCopied}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public BookKeeper(ReadOnlyBookKeeper toBeCopied) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireNonNull(toBeCopied);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        setBills(toBeCopied.getBillList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Replaces the contents of the bill list with {@code bills}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * {@code bills} must not contain duplicate persons."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void setBills(List\u003cBill\u003e bills) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.bills.setBills(bills);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Adds a bill to the bookkeeper."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Bill must not already exist in the bookkeeper."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void addBill(Bill bill) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        bills.add(bill);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Removes bill for {@code roomId} from this {@code BookKeeper}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Bill must exist in the book keeper."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void deleteBill(RoomId roomId) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        Bill bill \u003d bills.asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .filter(b -\u003e b.getRoomId().equals(roomId))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        bills.remove(bill);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Returns true if a bill with the same identity as {@code bill} exists in the book keeper."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public boolean hasBill(Bill bill) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireNonNull(bill);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return bills.contains(bill);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Charges {@code roomCost} to the bill of {@code roomId}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void chargeRoomCostToBill(RoomId roomId, RoomCost roomCost, Stay stay) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        Bill bill \u003d bills.asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .filter(b -\u003e b.getRoomId().equals(roomId))"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .get();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        bill.addRoomCost(roomCost, stay);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Charges extended {@code roomCost} to the bill of {@code roomId}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public void chargeExtendedRoomCostToBill(RoomId roomId, RoomCost roomCost, Stay stay, LocalDateTime fromDate) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        Bill bill \u003d bills.asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            .filter(b -\u003e b.getRoomId().equals(roomId))"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            .findFirst()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            .get();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        bill.addExtendRoomCost(roomCost, stay, fromDate);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Charges {@code service} to the bill of {@code roomId}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void chargeServiceToBill(RoomId roomId, AvailableService service) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        Bill bill \u003d bills.asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            .filter(b -\u003e b.getRoomId().equals(roomId))"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            .findFirst()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            .get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        bill.addService(service);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Deletes {@code service} to the bill of {@code roomId}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void deleteChargedServiceFromBill(RoomId roomId, AvailableService service) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        Bill bill \u003d bills.asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .filter(b -\u003e b.getRoomId().equals(roomId))"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .get();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        bill.deleteService(service);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Returns the total cost of all bills belonging to {@code personId}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public Cost getGuestBillsTotal(PersonId personId) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        double total \u003d bills.asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .filter(b -\u003e b.getPersonId().equals(personId))"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .map(b -\u003e b.getBillTotal().getCostAsDouble())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .reduce(0.0, (subtotal, billTotal) -\u003e subtotal + billTotal);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return new Cost(total);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Returns the list of bills for {@code personId}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public ObservableList\u003cBill\u003e getBills(PersonId personId) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return bills.asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            .filter(b -\u003e b.getPersonId().equals(personId))"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            .collect(Collectors.toCollection(FXCollections::observableArrayList));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Returns the bill for {@code roomId}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public Optional\u003cBill\u003e getBill(RoomId roomId) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return bills.asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            .filter(b -\u003e b.getRoomId().equals(roomId))"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            .findFirst();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    // util methods"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public ObservableList\u003cBill\u003e getBillList() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return bills.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return bills.asUnmodifiableObservableList().size() + \" bills\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                || (other instanceof BookKeeper // instanceof handles nulls"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                \u0026\u0026 bills.equals(((BookKeeper) other).bills));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return bills.hashCode();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hmtey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawidjaja": 14,
      "hmtey": 179
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Hotel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.hotel.Stay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.bill.AvailableService;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.hotel.bill.RoomCost;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.UniqueAvailableServiceList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.booking.Booking;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.booking.UniqueBookingList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.booking.exception.RoomBookedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Tier;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.UniqueRoomList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ids.AvailableServiceId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.timeframe.TimeFrame;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Storing hotel\u0027s details: rooms, booking"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class Hotel implements ReadOnlyHotel {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private final UniqueRoomList roomList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    private final ArrayList\u003cStay\u003e stayList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private final ArrayList\u003cTier\u003e tierList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private final UniqueAvailableServiceList availableServiceList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private final UniqueBookingList bookingList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Create new empty hotel."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public Hotel() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        tierList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        stayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        //non-static initialization block"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            roomList \u003d new UniqueRoomList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            availableServiceList \u003d new UniqueAvailableServiceList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            bookingList \u003d new UniqueBookingList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        updateRoomStays();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Create new hotel from ReadOnlyHotel"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public Hotel(ReadOnlyHotel toBeCopied, AddressBook addressBook) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(toBeCopied);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        this.roomList.setRooms(toBeCopied.getRoomList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        this.tierList.addAll(toBeCopied.getTierList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        this.bookingList.setBookings(toBeCopied.getBookingList(), addressBook);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        this.stayList.addAll(toBeCopied.getStayList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        for (Stay stay: stayList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            stay.setPayee(addressBook.findPersonWithId(stay.getPayee().getPersonId()).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.availableServiceList.setServices(toBeCopied.getAvailableServiceList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        updateRoomStays();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    //// room-level operations"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Get the room list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return a room list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public ObservableList\u003cRoom\u003e getRoomList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return roomList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Replaces the contents of the room list with {@code rooms}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * {@code rooms} must not contain duplicate rooms."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void setRooms(List\u003cRoom\u003e rooms) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        this.roomList.setRooms(rooms);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Replaces the given room {@code target} in the list with {@code editedRoom}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * The room identity of {@code editedRoom} must not be the same as another existing room in the hotel."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void setRooms(Room target, Room editedRoom) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        requireNonNull(editedRoom);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        roomList.setRoom(target, editedRoom);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Returns true if a room with the same identity as {@code room} exists in the hotel."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public boolean hasRoom(Room room) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        requireNonNull(room);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return roomList.contains(room);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * check room num exists."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public boolean hasRoom(String roomNum) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        for (Room room : roomList) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            if (room.hasName(roomNum)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Check is booking already exists in the hotel"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public boolean hasBooking(Booking booking) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        for (Booking b : bookingList) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            if (b.isClash(booking)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Get the stay in the room in current time."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param room the room object."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @return The booking if exist, empty otherwise."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public Optional\u003cStay\u003e getCurrentStay(Room room) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        requireNonNull(room);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return stayList"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                .filter(u -\u003e u.isCorrectRoom(room))"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                .filter(u -\u003e u.isCurrentlyClash(room))"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Checks if {@code person} is checked into {@code room}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public boolean isGuestCheckedIn(Person person, Room room) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return !stayList"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .filter(s -\u003e s.getPayee().equals(person) \u0026\u0026 s.getRoom().equals(room))"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .isEmpty();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**Returns observable list of tiers*/"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public ObservableList\u003cTier\u003e getTierList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return FXCollections.observableArrayList(tierList);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public ObservableList\u003cBooking\u003e getBookingList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return bookingList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return observable list of available services."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public ObservableList\u003cAvailableService\u003e getAvailableServiceList() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return availableServiceList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public ObservableList\u003cStay\u003e getStayList() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return FXCollections.observableList(stayList);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Return a room with matching room Id"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @param roomId"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @return Room"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public Optional\u003cRoom\u003e findRoomWithRoomId(RoomId roomId) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return roomList.asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                .filter(u -\u003e u.getRoomId().equals(roomId))"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Return a room with matching room number"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @param roomNum"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @return Room"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public Optional\u003cRoom\u003e getRoom(RoomId roomNum) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return roomList"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                .asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                .filter(u -\u003e u.getRoomNum().equals(roomNum.toString()))"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Return a room with matching room number"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param roomNum"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @return Room"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public Optional\u003cRoom\u003e getRoom(String roomNum) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return getRoom(new RoomId(roomNum));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Find an available service from hotel with given AvailableServiceId."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public Optional\u003cAvailableService\u003e getAvailableService(AvailableServiceId id) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return availableServiceList"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                .asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                .filter(service -\u003e service.getId().equals(id))"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Adds a room to the hotel."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * The room must not already exist in the address book."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void addRoom(Room r) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        roomList.add(r);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * add a new room"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void addRoom(String roomNum) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        Room newRoom \u003d new Room(roomNum);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        roomList.add(newRoom);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * add a new room with tier and cost"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public void addRoom(String roomNum, Tier tier, RoomCost cost) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        Room newRoom \u003d new Room(roomNum, tier, cost);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        roomList.add(newRoom);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * find a room"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private Room findSureRoom(String roomNum) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        for (Room room : roomList) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            if (room.hasName(roomNum)) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                return room;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * check a if a tier exists"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public boolean hasTier(Tier otherTier) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        for (Tier tier : tierList) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            if (tier.equals(otherTier)) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * adds an available service"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void addAvailableService(AvailableService service) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        availableServiceList.add(service);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void removeRoom(Room key) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        roomList.remove(key);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Adds booking to booking list"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     *"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @throws RoomBookedException if there is a clash between"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @code booking and bookings in booking list"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void addBooking(Booking booking) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (hasBooking(booking)) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            throw new RoomBookedException();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            bookingList.add(booking);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Deletes a room with room number"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void deleteRoom(String roomNum) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        ///passed the checks for existence"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        roomList.remove(this.findSureRoom(roomNum));"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Deletes an availableService from id."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void deleteAvailableService(AvailableServiceId id) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Optional\u003cAvailableService\u003e serviceOptional \u003d findServiceWithId(id);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        serviceOptional.ifPresent(availableServiceList::remove);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * adds a new tier."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void addTier(Tier tier, ArrayList\u003cString\u003e roomNums) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        tierList.add(tier);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        for (String roomNum : roomNums) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            if (hasRoom(roomNum)) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                Room current \u003d findSureRoom(roomNum);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                assert current !\u003d null;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                current.setTier(tier);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Return a service with matching serviceId"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     *"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public Optional\u003cAvailableService\u003e findServiceWithId(AvailableServiceId serviceId) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return availableServiceList.asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .filter(u -\u003e u.getId().equals(serviceId))"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return roomList.asUnmodifiableObservableList().size() + \" rooms\";"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (other instanceof Hotel) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            return this.roomList.equals(((Hotel) other).roomList)"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                    \u0026\u0026 this.bookingList.equals(((Hotel) other).bookingList);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return roomList.hashCode();"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Check in to the hotel according to the stay details."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param stay"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public void checkIn(Stay stay) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        bookingList.removeIf(booking -\u003e ("
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                stay.getRoom() \u003d\u003d booking.getRoom()"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                        \u0026\u0026 stay.isInside(booking)));"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        addStay(stay);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        updateRoomStays();"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Return the current stay with the corresponding room"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param room"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public Optional\u003cStay\u003e findStay(Room room) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return stayList"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            .filter(u -\u003e u.getRoom().equals(room))"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            .findFirst();"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Check out the current room"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param room the room that wants to be checked out"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public boolean checkOut(Room room) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        Optional\u003cStay\u003e stay \u003d getCurrentStay(room);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        if (stay.isEmpty()) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        deleteStay(stay.get());"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        room.setStay(null);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Delete stay from hotel stay list."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param stay"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    private void deleteStay(Stay stay) {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        stayList.remove(stay);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Check if room wants to be booked by this person is empty during the duration"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param person   person who wants to checked"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param room     the room that is checked"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param duration the duration of the booking"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public boolean isRoomFree(Person person, Room room, TimeFrame duration) {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        requireNonNull(room);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        //timeframe create successfully mean no bogus duration"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        boolean isRoomCurrentlyEmpty \u003d stayList"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                .noneMatch(u -\u003e u.isClash(room, duration));"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        boolean isBookingNotClash \u003d bookingList"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                .asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                .filter(u -\u003e u.getPayee() !\u003d person)"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                .noneMatch(u -\u003e u.isClash(room, duration));"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return isRoomCurrentlyEmpty \u0026\u0026 isBookingNotClash;"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public void addStay(Stay stay) {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        stayList.add(stay);"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Goes through stay list and sets"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * the current stay for each room"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void updateRoomStays() {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        for (Stay stay : stayList) {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            for (Room room : roomList) {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                if (stay.getRoom().getRoomNum().equals(room.getRoomNum())) {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                    room.setStay(stay);"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public Optional\u003cBooking\u003e findBookingById(String booking) {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return bookingList.findBookingById(booking);"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 151,
      "dawidjaja": 155,
      "youaremysky99": 146,
      "hmtey": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.hotel.Stay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.bill.AvailableService;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.Bill;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.Cost;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.RoomCost;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.booking.Booking;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Tier;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ids.AvailableServiceId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.timeframe.TimeFrame;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    Predicate\u003cBooking\u003e PREDICATE_SHOW_ALL_BOOKINGS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    Predicate\u003cRoom\u003e PREDICATE_SHOW_ALL_ROOMS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    Predicate\u003cBill\u003e PREDICATE_SHOW_ALL_BILLS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Returns the user prefs\u0027 hotel file path"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    Path getHotelFilePath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Returns the user prefs\u0027 book keeper file path"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    Path getBookKeeperFilePath();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /** Returns the Hotel*/"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    ReadOnlyHotel getHotel();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /** Returns the BookKeeper*/"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    ReadOnlyBookKeeper getBookKeeper();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Return true if a person with the same id exists in the address book."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param personId"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    boolean hasPersonId(PersonId personId);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Return a person with matching personId"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param personId"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    Optional\u003cPerson\u003e findPersonWithId(PersonId personId);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Returns an unmodifiable view of the filtered booking list."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    ObservableList\u003cBooking\u003e getFilteredBookingList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Returns an unmodifiable view of the filtered room list."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    ObservableList\u003cRoom\u003e getFilteredRoomList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Returns an unmodifiable view of the filtered service list."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    ObservableList\u003cAvailableService\u003e getFilteredServiceList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Returns an unmodifiable view of the filtered bill list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    ObservableList\u003cBill\u003e getFilteredBillList();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Updates the filter of the filtered booking list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    void updateFilteredBookingList(Predicate\u003cBooking\u003e predicate);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Updates the filter of the filtered service list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    void updateFilteredServiceList(Predicate\u003cAvailableService\u003e predicate);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Updates the filter of the filtered service list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    void updateFilteredBillList(Predicate\u003cBill\u003e predicate);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Updates the filter of the filtered room list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    void updateFilteredRoomList(Predicate\u003cRoom\u003e predicate);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**Returns list of rooms"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @return*/"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    ObservableList\u003cRoom\u003e getRoomList();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /** Returns list of bookings */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    ObservableList\u003cBooking\u003e getBookingList();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    Optional\u003cBooking\u003e getCurrentStay(Room room);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    Optional\u003cRoom\u003e findRoom(RoomId roomNum);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Check if a room is available during a period."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param person"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param room"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param duration"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    boolean isRoomFree(Person person, Room room, TimeFrame duration);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Checks if {@code person} is checked into {@code room}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    boolean isGuestCheckedIn(Person person, Room room);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Book a room with booking details."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param booking"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    void bookRoom(Booking booking);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    void checkIn(Stay stay);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    Optional\u003cStay\u003e findStay(Room room);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    boolean checkOut(Room room);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    void deleteBooking(Booking booking);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Adds {@code bill} to the bookkeeper."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    void addBill(Bill bill);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Deletes {@code bill} from the bookkeeper."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    void deleteBill(RoomId roomId);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Returns the list of bills for specified personId."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    ObservableList\u003cBill\u003e findBillList(PersonId personId);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Returns the bill for the specified roomId."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    Optional\u003cBill\u003e findBill(RoomId roomId);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Returns the total cost of all bills belonging to specified personId."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    Cost getGuestBillsTotal(PersonId personId);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Add a room with roomName"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param roomName"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    void addRoom(String roomName);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Add a room with roomName, tier, and cost"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param roomName"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param tier"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param cost"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    void addRoom(String roomName, Tier tier, RoomCost cost);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Check if a room exist"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    boolean hasRoom(String roomName);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * check if a booking exists"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    boolean hasBooking(Booking booking);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Check if a tier name exists"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    boolean hasTier(Tier tier);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Add a tier with a tiername"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    void addTier(Tier tier, ArrayList\u003cString\u003e roomNums);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Sets the the room cost for the given room."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    void setRoomCost(Room room, RoomCost roomCost);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Adds a service to hotel."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    void addAvailableService(AvailableService service);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Returns a service with matching serviceId."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    Optional\u003cAvailableService\u003e findService(AvailableServiceId serviceId);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Charges the room cost to the bill of the corresponding room number."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    void chargeRoomCost(RoomId roomId, RoomCost roomCost, Stay stay);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    void chargeExtendRoomCost(RoomId roomId, RoomCost roomCost, Stay stay, LocalDateTime fromDate);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Charges a service to the bill of the corresponding room number."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    void chargeService(RoomId roomId, AvailableService service);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * deletes a room from hotel"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    void deleteRoom(String roomNum);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * deletes an available service from hotel"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    void deleteAvailableService(AvailableServiceId id);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Returns a Booking with matching bookingId."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    Optional\u003cBooking\u003e findBookingById(String bookingId);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Extend a room stay until toDate"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param stay"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param toDate"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    void extendRoom(Stay stay, LocalDateTime toDate);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Deletes a charged service from the bill of the corresponding room number."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    void deleteChargedService(RoomId roomId, AvailableService service);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 22,
      "tanphatls987": 53,
      "dawidjaja": 37,
      "youaremysky99": 64,
      "-": 87,
      "hmtey": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.hotel.Stay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.bill.AvailableService;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.Bill;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.Cost;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.RoomCost;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.booking.Booking;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Tier;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ids.AvailableServiceId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.timeframe.TimeFrame;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private final FilteredList\u003cBooking\u003e filteredBookings;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private final FilteredList\u003cRoom\u003e filteredRooms;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private final FilteredList\u003cAvailableService\u003e filteredServices;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private final FilteredList\u003cBill\u003e filteredBills;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private final Hotel hotel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private final BookKeeper bookKeeper;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                        ReadOnlyHotel hotel, ReadOnlyBookKeeper bookKeeper) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        this.hotel \u003d new Hotel(hotel, this.addressBook);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.bookKeeper \u003d new BookKeeper(bookKeeper);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        filteredBookings \u003d new FilteredList\u003c\u003e(this.hotel.getBookingList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        filteredRooms \u003d new FilteredList\u003c\u003e(this.hotel.getRoomList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        filteredServices \u003d new FilteredList\u003c\u003e(this.hotel.getAvailableServiceList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        filteredBills \u003d new FilteredList\u003c\u003e(this.bookKeeper.getBillList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this(addressBook, userPrefs, new Hotel(), new BookKeeper());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this(new AddressBook(), new UserPrefs(), new Hotel(), new BookKeeper());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public Path getHotelFilePath() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return userPrefs.getHotelFilePath();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public Path getBookKeeperFilePath() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return userPrefs.getBookKeeperFilePath();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public ReadOnlyHotel getHotel() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return hotel;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public boolean hasPersonId(PersonId personId) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        requireNonNull(personId);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return addressBook.hasPersonId(personId);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Return a person with matching personId"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param personId the personID"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @return Optional of the person with that PersonID"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public Optional\u003cPerson\u003e findPersonWithId(PersonId personId) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return addressBook.findPersonWithId(personId);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     *      * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public ObservableList\u003cBooking\u003e getFilteredBookingList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return filteredBookings;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public ObservableList\u003cRoom\u003e getFilteredRoomList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return filteredRooms;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public ObservableList\u003cAvailableService\u003e getFilteredServiceList() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return filteredServices;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public ObservableList\u003cBill\u003e getFilteredBillList() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return filteredBills;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void updateFilteredBookingList(Predicate\u003cBooking\u003e predicate) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        filteredBookings.setPredicate(predicate);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public void updateFilteredServiceList(Predicate\u003cAvailableService\u003e predicate) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        filteredServices.setPredicate(predicate);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void updateFilteredBillList(Predicate\u003cBill\u003e predicate) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireAllNonNull(predicate);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        filteredBills.setPredicate(predicate);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void updateFilteredRoomList(Predicate\u003cRoom\u003e predicate) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        filteredRooms.setPredicate(predicate);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public ObservableList\u003cRoom\u003e getRoomList() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return hotel.getRoomList();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public ObservableList\u003cBooking\u003e getBookingList() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return hotel.getBookingList();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Get the stay in the room in current time."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param room the room object."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @return The booking if exist, empty otherwise."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public Optional\u003cBooking\u003e getCurrentStay(Room room) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        requireNonNull(room);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        hotel.getCurrentStay(room);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return hotel.getBookingList()"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            .filter(u -\u003e u.isCorrectRoom(room))"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            .filter(u -\u003e u.isCurrentlyClash(room))"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            .findFirst();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public Optional\u003cRoom\u003e findRoom(RoomId roomNum) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        requireNonNull(roomNum);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return hotel.findRoomWithRoomId(roomNum);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public boolean isRoomFree(Person person, Room room, TimeFrame duration) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(room);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return hotel.isRoomFree(person, room, duration);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public boolean isGuestCheckedIn(Person person, Room room) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireAllNonNull(person, room);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return hotel.isGuestCheckedIn(person, room);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public void bookRoom(Booking booking) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(booking);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        hotel.addBooking(booking);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        updateFilteredBookingList(PREDICATE_SHOW_ALL_BOOKINGS);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Checks in a room with the given details from the booking."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param stay The booking we want to store"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public void checkIn(Stay stay) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        hotel.checkIn(stay);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Return the current stay with the corresponding room"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param room"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public Optional\u003cStay\u003e findStay(Room room) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return hotel.findStay(room);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public void extendRoom(Stay stay, LocalDateTime td) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        stay.extendToDate(td);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Checks out anyone from the room."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param room the room that wants to be checked out"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @return 1 if checkout successful, 0 if room does not exist"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public boolean checkOut(Room room) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        requireNonNull(room);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return hotel.checkOut(room);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public void deleteBooking(Booking booking) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        hotel.getBookingList().remove(booking);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        updateFilteredBookingList(PREDICATE_SHOW_ALL_BOOKINGS);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void addRoom(String roomNum) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(roomNum);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        hotel.addRoom(roomNum);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        updateFilteredRoomList(PREDICATE_SHOW_ALL_ROOMS);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public void addRoom(String roomNum, Tier tier, RoomCost cost) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        requireNonNull(roomNum);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        requireNonNull(tier);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        requireNonNull(cost);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        hotel.addRoom(roomNum, tier, cost);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        updateFilteredRoomList(PREDICATE_SHOW_ALL_ROOMS);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public boolean hasRoom(String roomNum) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(roomNum);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return this.hotel.hasRoom(roomNum);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public boolean hasBooking(Booking booking) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        requireNonNull(booking);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return this.hotel.hasBooking(booking);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public Optional\u003cBooking\u003e findBookingById(String booking) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        requireNonNull(booking);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return hotel.findBookingById(booking);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public boolean hasTier(Tier tier) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(tier);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return this.hotel.hasTier(tier);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void addTier(Tier tier, ArrayList\u003cString\u003e roomNums) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(tier);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(roomNums);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.hotel.addTier(tier, roomNums);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Billing System \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public ReadOnlyBookKeeper getBookKeeper() {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return bookKeeper;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void setRoomCost(Room room, RoomCost roomCost) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireAllNonNull(room, roomCost);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        room.setCost(roomCost);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void addAvailableService(AvailableService service) {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireNonNull(service);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        hotel.addAvailableService(service);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public Optional\u003cAvailableService\u003e findService(AvailableServiceId serviceId) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireNonNull(serviceId);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return hotel.findServiceWithId(serviceId);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void chargeRoomCost(RoomId roomId, RoomCost roomCost, Stay stay) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireAllNonNull(roomId, roomCost, stay);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        bookKeeper.chargeRoomCostToBill(roomId, roomCost, stay);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public void chargeExtendRoomCost(RoomId roomId, RoomCost roomCost, Stay stay, LocalDateTime fromDate) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        requireAllNonNull(roomId, roomCost, stay, fromDate);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        bookKeeper.chargeExtendedRoomCostToBill(roomId, roomCost, stay, fromDate);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void chargeService(RoomId roomId, AvailableService service) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireAllNonNull(roomId, service);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        bookKeeper.chargeServiceToBill(roomId, service);"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void addBill(Bill bill) {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireNonNull(bill);"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        bookKeeper.addBill(bill);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void deleteBill(RoomId roomId) {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireNonNull(roomId);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        bookKeeper.deleteBill(roomId);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public ObservableList\u003cBill\u003e findBillList(PersonId personId) {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireNonNull(personId);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return bookKeeper.getBills(personId);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public Optional\u003cBill\u003e findBill(RoomId roomId) {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireNonNull(roomId);"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return bookKeeper.getBill(roomId);"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public Cost getGuestBillsTotal(PersonId personId) {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireNonNull(personId);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return bookKeeper.getGuestBillsTotal(personId);"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void deleteRoom(String roomNum) {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(roomNum);"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        hotel.deleteRoom(roomNum);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        updateFilteredRoomList(PREDICATE_SHOW_ALL_ROOMS);"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void deleteAvailableService(AvailableServiceId id) {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        hotel.deleteAvailableService(id);"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void deleteChargedService(RoomId roomId, AvailableService service) {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireAllNonNull(roomId, service);"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        bookKeeper.deleteChargedServiceFromBill(roomId, service);"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 28,
      "tanphatls987": 54,
      "dawidjaja": 88,
      "youaremysky99": 87,
      "-": 147,
      "hmtey": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyBookKeeper.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hmtey"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.Bill;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hmtey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * Unmodifiable view of a bookkeeper"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hmtey"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hmtey"
        },
        "content": "public interface ReadOnlyBookKeeper {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Returns an unmodifiable view of the bill list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * This list will not contain any duplicate bills."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    ObservableList\u003cBill\u003e getBillList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hmtey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hmtey": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyHotel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.hotel.Stay;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.bill.AvailableService;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.booking.Booking;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Tier;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Unmodifiable hotel"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public interface ReadOnlyHotel {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * return list of rooms."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    ObservableList\u003cRoom\u003e getRoomList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @return a list of tiers;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    ObservableList\u003cTier\u003e getTierList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @return list of bookings"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    ObservableList\u003cBooking\u003e getBookingList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return list of available services"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    ObservableList\u003cAvailableService\u003e getAvailableServiceList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @return list of available stays"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    ObservableList\u003cStay\u003e getStayList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    Optional\u003cStay\u003e findStay(Room room);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 9,
      "dawidjaja": 11,
      "youaremysky99": 19,
      "hmtey": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    Path getHotelFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    Path getBookKeeperFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 1,
      "-": 16,
      "hmtey": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private Path hotelFilePath \u003d Paths.get(\"data\", \"hotel.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private Path bookKeeperFilePath \u003d Paths.get(\"data\", \"bookkeeper.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        setHotelFilePath(newUserPrefs.getHotelFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        setBookKeeperFilePath(newUserPrefs.getBookKeeperFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public Path getHotelFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return hotelFilePath;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public Path getBookKeeperFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return bookKeeperFilePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void setHotelFilePath(Path hotelFilePath) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        requireNonNull(hotelFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        this.hotelFilePath \u003d hotelFilePath;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void setBookKeeperFilePath(Path bookKeeperFilePath) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireNonNull(bookKeeperFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.bookKeeperFilePath \u003d bookKeeperFilePath;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                \u0026\u0026 hotelFilePath.equals(o.hotelFilePath)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                \u0026\u0026 bookKeeperFilePath.equals(o.bookKeeperFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath, hotelFilePath, bookKeeperFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        sb.append(\"\\nAddressBook data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        sb.append(\"\\nHotel data file location 2 : \" + hotelFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        sb.append(\"\\nBook Keeper data file location 3 : \" + bookKeeperFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 14,
      "-": 84,
      "hmtey": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/Reserve.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.model.hotel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.booking.Booking;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " * Store reservation for future."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "public class Reserve extends Booking {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Create an empty reservation."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public Reserve(Person payee, Room room, LocalDateTime bookFrom, LocalDateTime bookTo) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        super(payee, room, bookFrom, bookTo);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 16,
      "sancharib-git": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/Stay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.model.hotel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.booking.Booking;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class Stay extends Booking {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * [Stay description]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return [description]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public Stay(Person payee, Room room, LocalDateTime from, LocalDateTime to, String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        super(payee, room, from, to);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * [Stay description]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @return [description]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public Stay(Person payee, Room room, LocalDateTime from, LocalDateTime to, String uuid, String description) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        super(payee, room, from, to, uuid);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public Stay(Booking booking, String description) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        super(booking.getPayee(), booking.getRoom(), booking.getBookDuration());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public void extendToDate(LocalDateTime td) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        this.bookDuration.setEndTime(td);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 5,
      "sancharib-git": 3,
      "dawidjaja": 21,
      "youaremysky99": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/bill/AvailableService.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.model.hotel.bill;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ids.AvailableServiceId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Available services, to be added when initialization."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Stores: description, cost, id of the service."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hmtey"
        },
        "content": "public class AvailableService implements Chargeable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private Cost cost;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private AvailableServiceId id;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param desc: a short description of the service"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param cost: amount"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * @param serviceId: for reference"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public AvailableService(String desc, Cost cost, AvailableServiceId serviceId) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireAllNonNull(desc, cost, serviceId);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.description \u003d desc;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.id \u003d serviceId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Checks if service is same as {@code service}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public boolean isSameService(AvailableService service) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (service \u003d\u003d this) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return service !\u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                \u0026\u0026 service.getId().equals(getId());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return its own id."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public AvailableServiceId getId() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return this.id;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return its own description."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return cost of this services"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public Cost getCost() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return this.cost;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        builder.append(getId())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .append(\": \")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .append(\" ($\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .append(getCost())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .append(\")\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 41,
      "hmtey": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/bill/Bill.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hmtey"
        },
        "content": "package seedu.address.model.hotel.bill;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.Stay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ids.AvailableServiceId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * Contains a list of chargeable objects that a guest has requested for a specific room."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class Bill {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private PersonId personId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private RoomId roomId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private ArrayList\u003cChargeable\u003e charges;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private double billTotal;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Creates an empty {@code bill}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public Bill(PersonId personId, RoomId roomId) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.roomId \u003d roomId;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.charges \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Creates a {@code bill} with all fields present. For storage purposes."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public Bill(PersonId personId, RoomId roomId, ArrayList\u003cChargeable\u003e charges, double totalExpenses) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireAllNonNull(personId, roomId, charges, totalExpenses);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.roomId \u003d roomId;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.charges \u003d charges;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.billTotal \u003d totalExpenses;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Adds {@code roomCost} to the stored list of chargeable objects."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void addRoomCost(RoomCost roomCost, Stay stay) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        charges.add(roomCost);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        long daysOfStay \u003d stay.getBookDuration().getDays();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        billTotal +\u003d roomCost.getCostAsDouble() * daysOfStay;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Adds {@code roomCost} to the stored list of chargeable objects."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public void addExtendRoomCost(RoomCost roomCost, Stay stay, LocalDateTime fromDate) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        charges.add(roomCost);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        long daysOfStay \u003d stay.getBookDuration().getDaysDiff(fromDate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        billTotal +\u003d roomCost.getCostAsDouble() * daysOfStay;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public Optional\u003cChargeable\u003e getService(AvailableServiceId serviceId) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return FXCollections.observableList(charges)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .filter(s -\u003e s instanceof AvailableService)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .filter(s -\u003e ((AvailableService) s).getId().equals(serviceId))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Adds {@code service} to the stored list of chargeable objects."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void addService(AvailableService service) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        charges.add(service);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        billTotal +\u003d service.getCost().getCostAsDouble();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Deletes {@code service} from the stored list of chargeable objects."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void deleteService(AvailableService service) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        boolean isRemoved \u003d charges.remove(service);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (isRemoved) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            billTotal -\u003d service.getCost().getCostAsDouble();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Returns true if there is no chargeable objects in the bill."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return charges.isEmpty();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public PersonId getPersonId() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return personId;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public RoomId getRoomId() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return roomId;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public ObservableList\u003cChargeable\u003e getCharges() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return FXCollections.unmodifiableObservableList(FXCollections.observableArrayList(charges));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public Cost getBillTotal() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return new Cost(billTotal);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Checks if bill is same as {@code bill}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public boolean isSameBill(Bill bill) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (bill \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return bill !\u003d null"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                \u0026\u0026 bill.getPersonId().equals(getPersonId())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                \u0026\u0026 bill.getRoomId().equals(getRoomId());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        for (Chargeable charge : charges) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            if (charge instanceof RoomCost) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                builder.append(\"- Room Cost ($\" + charge + \" per night)\\n\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                builder.append(\"- \" + charge + \"\\n\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        builder.append(\"Total payable: $\" + Double.toString(billTotal));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dawidjaja": 13,
      "youaremysky99": 12,
      "hmtey": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/bill/Chargeable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hmtey"
        },
        "content": "package seedu.address.model.hotel.bill;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * Represents a Chargeable item/service that guests have requested for."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public interface Chargeable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Returns the cost of the chargeable item/service"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public Cost getCost();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public String toString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 5,
      "hmtey": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/bill/Cost.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hmtey"
        },
        "content": "package seedu.address.model.hotel.bill;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hmtey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * Represents a Cost of a chargeable object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCost(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hmtey"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hmtey"
        },
        "content": "public class Cost {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            \"Cost should only contain numbers, and it should have a maximum of 2 decimal places\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[-+]?\\\\d{1,}(\\\\.\\\\d{1,2})?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public final double cost;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Constructs a {@code Cost}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * @param cost A valid cost."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public Cost(String cost) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireNonNull(cost);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        checkArgument(isValidCost(cost), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.cost \u003d Double.valueOf(cost);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public Cost(double cost) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireNonNull(cost);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Returns true if a given string is a valid cost."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static boolean isValidCost(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public boolean isNegative() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return cost \u003c 0.0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public double getCostAsDouble() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return cost;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return String.format(\"%.2f\", cost);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hmtey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 12,
      "dawidjaja": 1,
      "hmtey": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/bill/RoomCost.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hmtey"
        },
        "content": "package seedu.address.model.hotel.bill;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * Represents the cost of the room for a night."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "public class RoomCost extends Cost implements Chargeable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private static final String DEFAULT_ROOM_COST \u003d \"10.00\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Construsts a {@code RoomCost} without a set {@code cost}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public RoomCost(String cost) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        super(cost);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public RoomCost(double cost) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        super(cost);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Default constructor"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public RoomCost() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        super(DEFAULT_ROOM_COST);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public Cost getCost() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 10,
      "youaremysky99": 11,
      "hmtey": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/bill/UniqueAvailableServiceList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hmtey"
        },
        "content": "package seedu.address.model.hotel.bill;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.exceptions.DuplicateServiceException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.exceptions.ServiceNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hmtey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * A list of AVAILABLESERVICES that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * A service is considered unique by comparing using {@code AvailableService#isSameService(AvailableService)}. As such,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * adding and updating of services uses AvailableService#isSameService(AvailableService) for equality so as to ensure"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * that the service being added or updated is unique in terms of serviceId in the UniqueAvailableServiceList. However,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * the removal of a service uses AvailableService#equals(Object) so as to ensure that the service with exactly the same"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hmtey"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hmtey"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * @see AvailableService#isSameService(AvailableService)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hmtey"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hmtey"
        },
        "content": "public class UniqueAvailableServiceList implements Iterable\u003cAvailableService\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private final ObservableList\u003cAvailableService\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private final ObservableList\u003cAvailableService\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Returns true if the list contains an equivalent service as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public boolean contains(AvailableService toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameService);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Adds a service to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * The service must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void add(AvailableService toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new DuplicateServiceException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Replaces the service {@code target} in the list with {@code editedService}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * The service identity of {@code editedService} must not be the same as another existing service in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void setService(AvailableService target, AvailableService editedService) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireAllNonNull(target, editedService);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new ServiceNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (!target.isSameService(editedService) \u0026\u0026 contains(editedService)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new DuplicateServiceException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        internalList.set(index, editedService);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Replaces the contents of this {@code internalList} with"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * {@code internalList} of {@code replacement}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void setServices(UniqueAvailableServiceList replacement) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Replaces the contents of this list with {@code services}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * {@code services} must not contain duplicate services."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void setServices(List\u003cAvailableService\u003e services) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireAllNonNull(services);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (!servicesAreUnique(services)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new DuplicateServiceException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        internalList.setAll(services);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Removes the equivalent service from the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * The service must exist in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void remove(AvailableService toRemove) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new ServiceNotFoundException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public ObservableList\u003cAvailableService\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public Iterator\u003cAvailableService\u003e iterator() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                || (other instanceof UniqueAvailableServiceList // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueAvailableServiceList) other).internalList));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Returns true if {@code services} contains only unique services."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private boolean servicesAreUnique(List\u003cAvailableService\u003e services) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        for (int i \u003d 0; i \u003c services.size() - 1; i++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            for (int j \u003d i + 1; j \u003c services.size(); j++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                if (services.get(i).isSameService(services.get(j))) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hmtey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hmtey": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/bill/UniqueBillList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hmtey"
        },
        "content": "package seedu.address.model.hotel.bill;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.exceptions.BillNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.exceptions.DuplicateBillException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hmtey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * A list of BILLS that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * A bill is considered unique by comparing using {@code Bill#isSameBill(Bill)}. As such,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * adding and updating of bills uses Bills#isSameBille(Bill) for equality so as to ensure"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * that the bill being added or updated is unique in terms of personId \u0026 roomId in the UniqueBillList. However,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * the removal of a bill uses Bill#equals(Object) so as to ensure that the bill with exactly the same"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hmtey"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hmtey"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * @see Bill#isSameBill(Bill)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hmtey"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hmtey"
        },
        "content": "public class UniqueBillList implements Iterable\u003cBill\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private final ObservableList\u003cBill\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private final ObservableList\u003cBill\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Returns true if the list contains an equivalent bill as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public boolean contains(Bill toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameBill);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Adds a service to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * The service must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void add(Bill toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new DuplicateBillException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Replaces the bill {@code target} in the list with {@code editedBill}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * The bill identity of {@code editedBill} must not be the same as another existing bill in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void setBill(Bill target, Bill editedBill) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireAllNonNull(target, editedBill);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new BillNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (!target.isSameBill(editedBill) \u0026\u0026 contains(editedBill)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new DuplicateBillException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        internalList.set(index, editedBill);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Replaces the contents of this {@code internalList} with"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * {@code internalList} of {@code replacement}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void setBill(UniqueBillList replacement) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Replaces the contents of this list with {@code bills}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * {@code bills} must not contain duplicate bills."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void setBills(List\u003cBill\u003e bills) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireAllNonNull(bills);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (!billsAreUnique(bills)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new DuplicateBillException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        internalList.setAll(bills);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Removes the equivalent bill from the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * The bill must exist in the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void remove(Bill toRemove) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new BillNotFoundException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public ObservableList\u003cBill\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public Iterator\u003cBill\u003e iterator() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                || (other instanceof UniqueBillList // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueBillList) other).internalList));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Returns true if {@code bills} contains only unique bills."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private boolean billsAreUnique(List\u003cBill\u003e bills) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        for (int i \u003d 0; i \u003c bills.size() - 1; i++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            for (int j \u003d i + 1; j \u003c bills.size(); j++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                if (bills.get(i).isSameBill(bills.get(j))) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hmtey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hmtey": 143
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/bill/exceptions/BillNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hmtey"
        },
        "content": "package seedu.address.model.hotel.bill.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hmtey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * Signals that the operation is unable to find the specified bill."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hmtey"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hmtey"
        },
        "content": "public class BillNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public BillNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        super(\"Unable to find this bill\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hmtey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hmtey": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/bill/exceptions/DuplicateBillException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hmtey"
        },
        "content": "package seedu.address.model.hotel.bill.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hmtey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * Signals that the operation will result in duplicate Bills (Bills are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * personId \u0026 roomId)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hmtey"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hmtey"
        },
        "content": "public class DuplicateBillException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public DuplicateBillException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        super(\"Operation would result in duplicate bills\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hmtey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hmtey": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/bill/exceptions/DuplicateServiceException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hmtey"
        },
        "content": "package seedu.address.model.hotel.bill.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hmtey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * Signals that the operation will result in duplicate Services (Servics are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * serviceId)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hmtey"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hmtey"
        },
        "content": "public class DuplicateServiceException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public DuplicateServiceException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        super(\"Operation would result in duplicate services\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hmtey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hmtey": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/bill/exceptions/ServiceNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hmtey"
        },
        "content": "package seedu.address.model.hotel.bill.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hmtey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * Signals that the operation is unable to find the specified service."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hmtey"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hmtey"
        },
        "content": "public class ServiceNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public ServiceNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        super(\"Unable to find this service\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hmtey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hmtey": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/booking/Booking.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.model.hotel.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.timeframe.TimeFrame;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.timeframe.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " * Store booking information."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "public class Booking {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    protected Person payee;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    protected Room room;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    protected TimeFrame bookDuration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    protected UUID uuid;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Create a booking with full detail."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param payee"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param room"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param bookDuration"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public Booking(Person payee, Room room, TimeFrame bookDuration) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.payee \u003d payee;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.room \u003d room;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.bookDuration \u003d bookDuration;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        this.uuid \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Create a booking with full detail."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param payee"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param room"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param from"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @throws InvalidTimeFrameException"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public Booking(Person payee, Room room, LocalDateTime from, LocalDateTime to)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throws InvalidTimeFrameException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.payee \u003d payee;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.room \u003d room;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.bookDuration \u003d new TimeFrame(from, to);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        uuid \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Create a booking with full detail."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param payee"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param room"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param from"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param to"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param uuid"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @throws InvalidTimeFrameException"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public Booking(Person payee, Room room, LocalDateTime from, LocalDateTime to, String uuid)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        throws InvalidTimeFrameException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        this.payee \u003d payee;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        this.room \u003d room;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        this.bookDuration \u003d new TimeFrame(from, to);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        this.uuid \u003d UUID.fromString(uuid);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Check if 2 booking clash each other."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param oth other object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @return true if the object clash each other"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public boolean isClash(Booking oth) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        ///different room"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (!this.room.getRoomNum().equals(oth.room.getRoomNum())) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return bookDuration.isClash(oth.bookDuration);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Check if this booking clash with a room during a period of time."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param room Room object to be checked"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param duration start date and end date"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @return true if there exist clash with other"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public boolean isClash(Room room, TimeFrame duration) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (!this.room.getRoomNum().equals(room.getRoomNum())) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return bookDuration.isClash(duration);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * check if other booking is inside current booking timeframe."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param oth other booking"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @return true if other booking is within the current booking timeframe."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public boolean isInside(Booking oth) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (!this.room.getRoomNum().equals(room.getRoomNum())) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return bookDuration.isInside(oth.bookDuration);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Check if this booking clash with a room during a period of time."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param room Room object to be checked"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @return true if there exist clash with other"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public boolean isCurrentlyClash(Room room) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (!this.room.getRoomNum().equals(room.getRoomNum())) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return bookDuration.isInside(LocalDateTime.now());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public boolean isCorrectRoom(Room room) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return this.room.isSameRoom(room);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Checks if booking is same as @code booking"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @param booking"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public boolean isSameBooking(Booking booking) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (booking \u003d\u003d this) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return booking !\u003d null"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                \u0026\u0026 booking.getRoom().equals(getRoom())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                \u0026\u0026 booking.getBookDuration().equals(getBookDuration());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public boolean equals(Object oth) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (oth \u003d\u003d this) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (!(oth instanceof Booking)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        Booking othBooking \u003d (Booking) oth;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return othBooking.payee.equals(payee)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            \u0026\u0026 othBooking.bookDuration.equals(bookDuration)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            \u0026\u0026 othBooking.room.equals(room);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public Room getRoom() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return room;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public Person getPayee() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return payee;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public LocalDateTime getTimeFrom() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return bookDuration.getStartTime();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public LocalDateTime getTimeTo() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return bookDuration.getEndTime();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public TimeFrame getBookDuration() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return bookDuration;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * return if the booking has the same ID."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Could be checked by the first 8 characters as well."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param booking"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public boolean isMatchId(String booking) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        int len \u003d booking.length();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return uuid.toString().substring(0, len).equals(booking);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public String getReadableBookingId() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return uuid.toString().substring(0, 8);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public String getBookingId() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return uuid.toString();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public void setPayee(Person personWithId) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        this.payee \u003d personWithId;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 77,
      "sancharib-git": 39,
      "dawidjaja": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/booking/MatchBookingPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.model.hotel.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.person.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Predicate for booking, (or) of 3 predicates"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class MatchBookingPredicate implements Predicate\u003cBooking\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private Predicate\u003cRoom\u003e roomPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private Predicate\u003cPersonId\u003e personIdPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private Predicate\u003cName\u003e namePredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Constructs a default booking predicate."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public MatchBookingPredicate() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        roomPredicate \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        personIdPredicate \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        namePredicate \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * set this roomPredicate."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void setRoomPredicate(Predicate\u003cRoom\u003e roomPredicate) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.roomPredicate \u003d roomPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * set this personPredicate"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void setPersonIdPredicate(Predicate\u003cPersonId\u003e personIdPredicate) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.personIdPredicate \u003d personIdPredicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * set this namePredicate"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void setNamePredicate(Predicate\u003cName\u003e namePredicate) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.namePredicate \u003d namePredicate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public boolean test(Booking booking) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return roomPredicate.test(booking.getRoom())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                || namePredicate.test(booking.getPayee().getName())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                || personIdPredicate.test(booking.getPayee().getPersonId());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/booking/UniqueBookingList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "package seedu.address.model.hotel.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.booking.exception.BookingNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.booking.exception.RoomBookedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * A list of bookings that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * A booking is considered unique by comparing using {@code Booking#isClash(Booking)}. As such, adding and updating of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * bookings uses Booking#isClash(Booking)) for equality so as to ensure that the booking being added or updated is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * unique in terms of TimeFrame in the UniqueRoomList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * @see Booking#isClash(Booking)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "public class UniqueBookingList implements Iterable\u003cBooking\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private final ObservableList\u003cBooking\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private final ObservableList\u003cBooking\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Returns true if the list contains an equivalent booking as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public boolean contains(Booking toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameBooking);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Adds a booking to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * The booking must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void add(Booking toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            throw new RoomBookedException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Replaces the contents of this {@code internalList} with"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * {@code internalList} of {@code replacement}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void setBookings(UniqueBookingList replacement) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Replaces the contents of this list with {@code bookings}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * {@code bookings} must not contain duplicate bookings."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public void setBookings(List\u003cBooking\u003e bookings, AddressBook addressBook) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        requireAllNonNull(bookings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (!bookingsAreUnique(bookings)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            throw new RoomBookedException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        internalList.setAll(bookings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        for (Booking booking: internalList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            booking.setPayee(addressBook.findPersonWithId(booking.getPayee().getPersonId()).get());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Removes the equivalent booking from the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * The booking must exist in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void remove(Booking toRemove) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            throw new BookingNotFoundException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public ObservableList\u003cBooking\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public Iterator\u003cBooking\u003e iterator() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                || (other instanceof UniqueBookingList // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueBookingList) other).internalList));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Remove element from internal list if match with Predicate p"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param p"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public void removeIf(Predicate\u003cBooking\u003e p) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        for (Booking booking: internalList) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            if (p.test(booking)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                internalList.remove(booking);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Returns true if {@code bookings} contains only unique bookings."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private boolean bookingsAreUnique(List\u003cBooking\u003e bookings) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        for (int i \u003d 0; i \u003c bookings.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            for (int j \u003d i + 1; j \u003c bookings.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                if (bookings.get(i).isSameBooking(bookings.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Return the booking that match with the booking ID."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param booking"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public Optional\u003cBooking\u003e findBookingById(String booking) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return internalList"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            .filter(u -\u003e u.isMatchId(booking))"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            .findFirst();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 120,
      "dawidjaja": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/booking/exception/BookingNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "package seedu.address.model.hotel.booking.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * Signals that the operation is unable to find the specified booking."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "public class BookingNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public BookingNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        super(\"Unable to find this booking\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/booking/exception/RoomBookedException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.model.hotel.booking.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * Exception for if room has already been booked"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "public class RoomBookedException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public RoomBookedException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        super(\"Room is already booked\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 1,
      "sancharib-git": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/person/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.model.hotel.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 1,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/person/MatchNamePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.model.hotel.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " * Check if the person name is in a predetermine list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class MatchNamePredicate implements Predicate\u003cName\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private final HashSet\u003cName\u003e nameList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Create predicate with nameList"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param nameList"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public MatchNamePredicate(HashSet\u003cName\u003e nameList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        ///nameList may change later on"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.nameList \u003d nameList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Altenative constructor."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param nameList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public MatchNamePredicate(List\u003cName\u003e nameList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.nameList \u003d new HashSet\u003c\u003e(nameList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Evaluates this predicate on the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @return {@code true} if the input argument matches the predicate,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * otherwise {@code false}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public boolean test(Name name) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return nameList.contains(name);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public boolean equals(Object oth) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (this \u003d\u003d oth) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (!(oth instanceof MatchNamePredicate)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        MatchNamePredicate othPred \u003d (MatchNamePredicate) oth;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return othPred.nameList.equals(nameList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 49,
      "youaremysky99": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/person/MatchPersonIdPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.model.hotel.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " * Check if person have personId in a predetermine list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class MatchPersonIdPredicate implements Predicate\u003cPersonId\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private final HashSet\u003cPersonId\u003e personIdList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Create predicate."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param personIdList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public MatchPersonIdPredicate(HashSet\u003cPersonId\u003e personIdList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        ///personIdList may change later"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.personIdList \u003d personIdList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Altenative constructor."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param personIdList"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public MatchPersonIdPredicate(List\u003cPersonId\u003e personIdList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.personIdList \u003d new HashSet\u003c\u003e(personIdList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public boolean test(PersonId personId) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return personIdList.contains(personId);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public boolean equals(Object oth) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (this \u003d\u003d oth) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (!(oth instanceof MatchPersonIdPredicate)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        MatchPersonIdPredicate othPred \u003d (MatchPersonIdPredicate) oth;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return othPred.personIdList.equals(personIdList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 44,
      "youaremysky99": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/person/MatchPersonPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.model.hotel.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Match person predicate, or of namePredicate and personIdPredicate"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class MatchPersonPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private Predicate\u003cName\u003e namePredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private Predicate\u003cPersonId\u003e personIdPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Constructs a new MatchPersonPredicate"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public MatchPersonPredicate() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.namePredicate \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.personIdPredicate \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * set this.namePredicate"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void setNamePredicate(Predicate\u003cName\u003e namePredicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.namePredicate \u003d namePredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * set this.personIdPredicate"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void setPersonIdPredicate(Predicate\u003cPersonId\u003e personIdPredicate) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.personIdPredicate \u003d personIdPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return this.namePredicate.test(person.getName())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                || this.personIdPredicate.test(person.getPersonId());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/person/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.model.hotel.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 1,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.model.hotel.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private final PersonId personId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    //private final Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Old constructor"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Remark remark, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        requireAllNonNull(name, phone, email, tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.personId \u003d new PersonId(\"A000000\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public Person(Name name, PersonId personId, Phone phone, Email email, Remark remark,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                  Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        requireAllNonNull(name, personId, phone, email, tags);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Simplify person with no personal details."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public Person(Name name, PersonId personId) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        requireAllNonNull(name, personId);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.phone \u003d new Phone(\"99999999\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.email \u003d new Email(\"default@mail\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.remark \u003d new Remark(\"default\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public PersonId getPersonId() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return personId;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /*public Address getAddress() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return otherPerson.getPersonId().equals(getPersonId())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return Objects.hash(name, personId, phone, email, tags);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .append(\" PersonId: \")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                .append(getPersonId())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                .append(\" Remark: \")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                .append(getRemark())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 31,
      "sancharib-git": 12,
      "-": 114,
      "hmtey": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/person/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.model.hotel.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/person/Remark.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.model.hotel.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * Represents a Person\u0027s remark in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * Guarantees: immutable; is always valid"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        value \u003d remark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                \u0026\u0026 value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 1,
      "sancharib-git": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/person/UniquePersonList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.model.hotel.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 3,
      "-": 134
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/person/exceptions/DuplicatePersonException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.model.hotel.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/person/exceptions/PersonNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.model.hotel.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/room/MatchRoomPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.model.hotel.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Check if the person name is in a predetermine list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class MatchRoomPredicate implements Predicate\u003cRoom\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private final HashSet\u003cRoomId\u003e roomIds;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Creates new MatchRoomPredicate to match a room in roomIds."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param roomIds: a set of ids."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public MatchRoomPredicate(HashSet\u003cRoomId\u003e roomIds) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.roomIds \u003d roomIds;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Alternative constructor, given a list of roomIds instead of a set."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param roomIdList: list of roomId."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public MatchRoomPredicate(List\u003cRoomId\u003e roomIdList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.roomIds \u003d new HashSet\u003c\u003e(roomIdList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Test a predicate with some input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return {@code true} if the input argument matches the predicate,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * {@code false} otherwise."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public boolean test(Room room) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return roomIds.contains(room.getRoomId());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (!(other instanceof MatchRoomPredicate)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        MatchRoomPredicate otherPredicate \u003d (MatchRoomPredicate) other;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return otherPredicate.roomIds.equals(this.roomIds);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/room/Room.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "package seedu.address.model.hotel.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.Stay;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.RoomCost;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " * Store room information."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "public class Room {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private Tier roomTier;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private String roomNum;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private RoomId roomId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private RoomCost roomCost;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private Stay stay;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Create a room with name, tier \u0026 cost."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Create a room with name and tier."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param roomNum"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param roomTier"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public Room(String roomNum, Tier roomTier, RoomCost roomCost) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.roomTier \u003d roomTier;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        this.roomNum \u003d roomNum;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        this.roomId \u003d RoomId.generate(roomNum);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.roomCost \u003d roomCost;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Construct a room with just a name, using default tier and an unset cost."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Construct a room with just a name and a default tier"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param roomNum"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public Room(String roomNum) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this(roomNum, new Tier(), new RoomCost());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * RoomNum getter."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public String getRoomNum() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return this.roomNum;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * RoomId getter."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @return roomId"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public RoomId getRoomId() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return this.roomId;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Check if this room has some certain name."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param roomNum"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return comparison"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public boolean hasName(String roomNum) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return this.roomNum.equals(roomNum);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Check if this room has non default tier or not"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public boolean hasNonDefaultTier() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return !this.roomTier.isDefaultTier();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return this room\u0027s name"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return this.roomNum;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public Tier getTier() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return this.roomTier;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Checks if room is same as @code room"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @param room"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public boolean isSameRoom(Room room) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (room \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return room !\u003d null"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                \u0026\u0026 room.getRoomNum().equals(getRoomNum());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return \"Room { \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                + \"roomTier\u003d\" + roomTier.toString()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                + \", roomNum\u003d\u0027\" + roomNum + \u0027\\\u0027\u0027"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                + \", roomId\u003d\" + roomId"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                + \u0027}\u0027;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * set tier for this room"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void setTier(Tier tier) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.roomTier \u003d tier;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Sets the stay for this room"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void setStay(Stay stay) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        this.stay \u003d stay;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Gets the current stay of the room"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public Stay getStay() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return stay;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Returns the {@code RoomCost} for the room."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public RoomCost getRoomCost() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return roomCost;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Sets the cost for this room."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void setCost(RoomCost roomCost) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.roomCost \u003d roomCost;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 54,
      "tanphatls987": 21,
      "dawidjaja": 8,
      "youaremysky99": 38,
      "hmtey": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/room/Tier.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "package seedu.address.model.hotel.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " * Store room tier."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "public class Tier {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Enum to show different types of tiers"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    enum TierName {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        BRONZE, SILVER, GOLD"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /* MESSAGE_CONSTRAINTS should be generated from TierName */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tier must be GOLD, SILVER or BRONZE\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public static final String MESSAGE_INVALID_TIER \u003d \"Invalid Tier format\\n\" + MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public static final String DEFAULT_TIER \u003d \"BRONZE\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private TierName name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private boolean isDefault;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Create a tier with name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @param n"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public Tier(String n) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        this.name \u003d TierName.valueOf(n);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.isDefault \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Create a default tier"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public Tier() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        name \u003d TierName.valueOf(DEFAULT_TIER);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Check whether s is a valid tier option."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param s compared string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @return true if valid"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public static boolean isTierOption(String s) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        for (TierName tn: TierName.values()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            if (tn.name().equals(s)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Check if this tier is default tier."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public boolean isDefaultTier() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return this.isDefault;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public boolean equals(Object oth) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (oth \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (!(oth instanceof Tier)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        Tier othTier \u003d (Tier) oth;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return othTier.name.equals(name);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return name.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 14,
      "tanphatls987": 25,
      "dawidjaja": 26,
      "youaremysky99": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/room/UniqueRoomList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "package seedu.address.model.hotel.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.exceptions.DuplicateRoomException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.exceptions.RoomNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * A list of ROOMS that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * A room is considered unique by comparing using {@code Room#isSameRoom(Room)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * rooms uses Room#isSameRoom(Room) for equality so as to ensure that the room being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * unique in terms of roomnumber in the UniqueRoomList. However, the removal of a room uses Room#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * @see Room#isSameRoom(Room)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "public class UniqueRoomList implements Iterable\u003cRoom\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private final ObservableList\u003cRoom\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private final ObservableList\u003cRoom\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Returns true if the list contains an equivalent room as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public boolean contains(Room toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameRoom);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Adds a room to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * The room must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void add(Room toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            throw new DuplicateRoomException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Replaces the room {@code target} in the list with {@code editedRoom}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * The room identity of {@code editedRoom} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void setRoom(Room target, Room editedRoom) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        requireAllNonNull(target, editedRoom);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            throw new RoomNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (!target.isSameRoom(editedRoom) \u0026\u0026 contains(editedRoom)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            throw new DuplicateRoomException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        internalList.set(index, editedRoom);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Replaces the contents of this {@code internalList} with"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * {@code internalList} of {@code replacement}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void setRooms(UniqueRoomList replacement) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Replaces the contents of this list with {@code rooms}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * {@code rooms} must not contain duplicate roomss."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void setRooms(List\u003cRoom\u003e rooms) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        requireAllNonNull(rooms);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (!roomsAreUnique(rooms)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            throw new DuplicateRoomException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        internalList.setAll(rooms);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Removes the equivalent room from the list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * The room must exist in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void remove(Room toRemove) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            throw new RoomNotFoundException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public ObservableList\u003cRoom\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public Iterator\u003cRoom\u003e iterator() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                || (other instanceof UniqueRoomList // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueRoomList) other).internalList));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Returns true if {@code persons} contains only unique room."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private boolean roomsAreUnique(List\u003cRoom\u003e rooms) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        for (int i \u003d 0; i \u003c rooms.size() - 1; i++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            for (int j \u003d i + 1; j \u003c rooms.size(); j++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                if (rooms.get(i).isSameRoom(rooms.get(j))) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 141
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/room/exceptions/DuplicateRoomException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "package seedu.address.model.hotel.room.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * Signals that the operation will result in duplicate Rooms (Rooms are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * room number)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "public class DuplicateRoomException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public DuplicateRoomException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        super(\"Operation would result in duplicate rooms\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/hotel/room/exceptions/RoomNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "package seedu.address.model.hotel.room.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * Signals that the operation is unable to find the specified room."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "public class RoomNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public RoomNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        super(\"Unable to find this room\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ids/AvailableServiceId.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.model.ids;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Id of available services."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * To be factorized by hotel."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class AvailableServiceId extends Id {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public AvailableServiceId(String serializedId) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        super(serializedId);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (!(other instanceof AvailableServiceId)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        AvailableServiceId otherId \u003d (AvailableServiceId) other;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return otherId.getSerializedId().equals(getSerializedId());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ids/Id.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.model.ids;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Id in the system"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public abstract class Id {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private String serializedId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    protected Id(String serializedId) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.serializedId \u003d serializedId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    protected String getSerializedId() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return serializedId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return serializedId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public boolean equals(Object oth) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (oth \u003d\u003d this) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (!(oth instanceof Id)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        Id othId \u003d (Id) oth;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return othId.serializedId.equals(serializedId);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return serializedId.hashCode();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 26,
      "youaremysky99": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ids/PersonId.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.model.ids;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " * Wrap string as id."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "public class PersonId extends Id {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public PersonId(String serializedId) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        super(serializedId);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public boolean equals(Object oth) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (oth \u003d\u003d this) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (!(oth instanceof PersonId)) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        PersonId othPersonId \u003d (PersonId) oth;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return othPersonId.getSerializedId().equals(getSerializedId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return super.hashCode();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 22,
      "youaremysky99": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ids/RoomId.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.model.ids;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " *"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class RoomId extends Id {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public RoomId(String serializedId) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        super(serializedId);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * [generate description]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param  roomName [description]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return          [description]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static RoomId generate(String roomName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        RoomId result \u003d new RoomId(roomName);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public boolean equals(Object oth) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        if (oth \u003d\u003d this) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        if (!(oth instanceof RoomId)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        RoomId othRoomId \u003d (RoomId) oth;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return othRoomId.getSerializedId().equals(getSerializedId());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawidjaja": 15,
      "youaremysky99": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/timeframe/TimeFrame.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.model.timeframe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static java.time.LocalTime.NOON;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static java.time.temporal.ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.timeframe.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " * Represent a period of time."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "public class TimeFrame {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private LocalDateTime from;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private LocalDateTime to;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Construct a new timeframe."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Use LocalDateTime.MIN or LocalDateTime.MAX in case no start or end time."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param from"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param to"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @throws InvalidTimeFrameException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public TimeFrame(LocalDateTime from, LocalDateTime to) throws InvalidTimeFrameException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        requireAllNonNull(from, to);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.from \u003d from;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.to \u003d to;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (from.isAfter(to)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            throw new InvalidTimeFrameException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Start time getter"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public LocalDateTime getStartTime() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return from;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * End time getter"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public LocalDateTime getEndTime() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return to;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Set end time of the timeframe to toDate"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param td"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public void setEndTime(LocalDateTime toDate) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        to \u003d toDate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Gets the number of days in the time frame"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public long getDays() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        long days \u003d from.until(to, DAYS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (LocalDateTime.now().toLocalTime().isAfter(NOON)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            days++;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return days;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Get the number of days different from the fromDate to the current toDate"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param fromDate"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public long getDaysDiff(LocalDateTime fromDate) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return fromDate.until(to, DAYS) + 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Check if 2 timeframe clash."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param oth"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @return true if at least 1 second period is common in 2 timeframe"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public boolean isClash(TimeFrame oth) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        LocalDateTime commonLeft \u003d from;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (commonLeft.isBefore(oth.from)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            commonLeft \u003d oth.from;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        LocalDateTime commonRight \u003d to;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (commonRight.isAfter(oth.to)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            commonRight \u003d oth.to;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return commonLeft.isBefore(commonRight);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Check if oth is inside current timeframe."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param oth other timeframe"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @return true if is inside"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public boolean isInside(TimeFrame oth) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return isInside(oth.from) \u0026\u0026 isInside(oth.to);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * Check if the time is inside the timeframe."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @param time the time that is going to be checked"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     * @return true if the time is between from and to."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public boolean isInside(LocalDateTime time) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return !from.isAfter(time) \u0026\u0026 !to.isBefore(time);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public boolean equals(Object oth) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (oth \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (!(oth instanceof TimeFrame)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        TimeFrame othTimeFrame \u003d (TimeFrame) oth;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return othTimeFrame.from.equals(from)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            \u0026\u0026 othTimeFrame.to.equals(to);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        String formattedFrom \u003d from.format(formatter);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        String formattedTo \u003d to.format(formatter);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return \"From: \" + formattedFrom + \" To: \" + formattedTo + \"\\n\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 78,
      "sancharib-git": 4,
      "dawidjaja": 41,
      "hmtey": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/timeframe/exception/InvalidTimeFrameException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.model.timeframe.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " * Exception for invalid time frame."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "public class InvalidTimeFrameException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public InvalidTimeFrameException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        super(\"Invalid time frame\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.BookKeeper;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.Hotel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ReadOnlyBookKeeper;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.ReadOnlyHotel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.Bill;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.RoomCost;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.booking.Booking;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Remark;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Tier;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * Contains utility methods for populating {@code Morpheus} with sample data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public static final Remark EMPTY_REMARK \u003d new Remark(\"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new PersonId(\"A000000\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                    EMPTY_REMARK,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                getTagSet(\"VIP\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new PersonId(\"B000000\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                    EMPTY_REMARK,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                getTagSet(\"Member\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new PersonId(\"C000000\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                    EMPTY_REMARK,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                getTagSet(\"VIP\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            new Person(new Name(\"David Li\"), new PersonId(\"D000000\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                    EMPTY_REMARK,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                getTagSet(\"Member\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new PersonId(\"I000000\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                    EMPTY_REMARK,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                getTagSet(\"Member\")),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new PersonId(\"R000000\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                    EMPTY_REMARK,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                getTagSet(\"Member\"))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public static Room[] getSampleRooms() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return new Room[] {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            new Room(\"001\", new Tier(\"GOLD\"), new RoomCost(\"150.00\")),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            new Room(\"002\", new Tier(\"SILVER\"), new RoomCost(\"100.00\")),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            new Room(\"003\", new Tier(\"SILVER\"), new RoomCost(\"100.00\")),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            new Room(\"004\", new Tier(\"BRONZE\"), new RoomCost(\"50.00\")),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            new Room(\"005\", new Tier(\"BRONZE\"), new RoomCost(\"50.00\")),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            new Room(\"006\", new Tier(\"BRONZE\"), new RoomCost(\"50.00\"))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        };"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public static Booking[] getSampleBookings() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return new Booking[] {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            new Booking(getSamplePersons()[0],"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                        getSampleRooms()[0], LocalDateTime.now(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                        LocalDateTime.of(2020, 12,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                                12, 12, 12, 12))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        };"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private static Bill[] getSampleBills() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return new Bill[] {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public static ReadOnlyHotel getSampleHotel() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        Hotel sampleHotel \u003d new Hotel();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        for (Room sampleRoom: getSampleRooms()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            sampleHotel.addRoom(sampleRoom);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        for (Booking sampleBooking: getSampleBookings()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            sampleHotel.addBooking(sampleBooking);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return sampleHotel;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static ReadOnlyBookKeeper getSampleBookKeeper() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        BookKeeper sampleBookKeeper \u003d new BookKeeper();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        for (Bill samepleBill : getSampleBills()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            sampleBookKeeper.addBill(samepleBill);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return sampleBookKeeper;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 44,
      "tanphatls987": 5,
      "dawidjaja": 19,
      "-": 38,
      "hmtey": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/BookKeeperStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hmtey"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ReadOnlyBookKeeper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hmtey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hmtey"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hmtey"
        },
        "content": "public interface BookKeeperStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    Path getBookKeeperFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Returns BookKeeper data as a {@link ReadOnlyBookKeeper}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    Optional\u003cReadOnlyBookKeeper\u003e readBookKeeper() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * @see #getBookKeeperFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    Optional\u003cReadOnlyBookKeeper\u003e readBookKeeper(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Saves the given {@link ReadOnlyBookKeeper} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * @param bookKeeper cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    void saveBookKeeper(ReadOnlyBookKeeper bookKeeper) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * @see #saveBookKeeper(ReadOnlyBookKeeper)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    void saveBookKeeper(ReadOnlyBookKeeper bookKeeper, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hmtey"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hmtey": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/HotelStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.ReadOnlyHotel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * Represents a storage for {@link seedu.address.model.Hotel}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "public interface HotelStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    Path getHotelFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Returns Hotel data as a {@link ReadOnlyHotel}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    Optional\u003cReadOnlyHotel\u003e readHotel() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @see #getHotelFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    Optional\u003cReadOnlyHotel\u003e readHotel(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Saves the given {@link ReadOnlyHotel} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @param hotel cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    void saveHotel(ReadOnlyHotel hotel) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @see #saveHotel(ReadOnlyHotel)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    void saveHotel(ReadOnlyHotel hotel, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedBill.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hmtey"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.AvailableService;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.Bill;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.Chargeable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.RoomCost;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hmtey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * Jackson-friendly version of {@link Bill}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hmtey"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hmtey"
        },
        "content": "public class JsonAdaptedBill {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Bill\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private final String personId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private final String roomId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private final String roomCost;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private final String total;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private final List\u003cJsonAvailableService\u003e charged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Constructs a {@code JsonAdaptedBill} with the given bill details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public JsonAdaptedBill(@JsonProperty(\"personId\") String personId,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                           @JsonProperty(\"roomId\") String roomId,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                           @JsonProperty(\"total\") String total,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                           @JsonProperty(\"room cost\") String roomCost,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                           @JsonProperty(\"charged\") List\u003cJsonAvailableService\u003e charged) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.roomId \u003d roomId;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.roomCost \u003d roomCost;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.total \u003d total;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (charged !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            this.charged.addAll(charged);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Converts a given {@code Bill} into this class for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public JsonAdaptedBill(Bill source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        personId \u003d source.getPersonId().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        roomId \u003d source.getRoomId().toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        roomCost \u003d String.valueOf(source.getCharges().stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .filter(c -\u003e c instanceof RoomCost)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .findFirst().get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        total \u003d source.getBillTotal().toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        charged.addAll(source.getCharges().stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .filter(c -\u003e c instanceof AvailableService)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .map(s -\u003e new JsonAvailableService((AvailableService) s))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Bill} object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public Bill toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (personId \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                    PersonId.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (roomId \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, RoomId.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (roomCost \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"room cost\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (total \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"bill total\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        final PersonId modelPersonId \u003d new PersonId(personId);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        final RoomId modelRoomId \u003d new RoomId(roomId);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        final double modelTotalExpenses \u003d Double.parseDouble(total);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        final ArrayList\u003cChargeable\u003e modelCharges \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        modelCharges.add(new RoomCost(roomCost));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        for (JsonAvailableService service : charged) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            modelCharges.add(service.toModelType());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return new Bill(modelPersonId, modelRoomId, modelCharges, modelTotalExpenses);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hmtey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hmtey": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedBooking.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.Hotel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.booking.Booking;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * Jackson-friendly version of {@link Booking}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "public class JsonAdaptedBooking {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Booking\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    private static final String MISSING_ROOM_MESSAGE_FORMAT \u003d \"Room %s does not exist!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private final String room;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private final String payeeName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private final String payeeId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private final String timeFrom;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private final String timeTo;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    private final String uuid;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Constructs a {@code JsonAdaptedBooking} with the given booking details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public JsonAdaptedBooking(@JsonProperty(\"room\") String roomNum,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                              @JsonProperty(\"payeeName\") String payeeName,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                              @JsonProperty(\"payeeId\") String payeeId,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                              @JsonProperty(\"from\") String timeFrom,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                              @JsonProperty(\"to\") String timeTo,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                              @JsonProperty(\"uuid\") String uuid) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        this.room \u003d roomNum;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        this.payeeName \u003d payeeName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        this.payeeId \u003d payeeId;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        this.timeFrom \u003d timeFrom;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        this.timeTo \u003d timeTo;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        this.uuid \u003d uuid;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Converts a given {@code Booking} into this class for Jackson use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public JsonAdaptedBooking(Booking source) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        room \u003d source.getRoom().getRoomNum();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        payeeName \u003d source.getPayee().getName().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        payeeId \u003d source.getPayee().getPersonId().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        timeFrom \u003d source.getTimeFrom().toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        timeTo \u003d source.getTimeTo().toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        uuid \u003d source.getBookingId();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Converts this Jackson-friendly adapted booking object into the model\u0027s {@code Booking} object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted booking."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public Booking toModelType(Hotel hotel) throws IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (room \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Room.class.getSimpleName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        Optional\u003cRoom\u003e optionalRoom \u003d hotel.getRoom(room);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        if (optionalRoom.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_ROOM_MESSAGE_FORMAT, room));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        final Room modelRoom \u003d optionalRoom.get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (payeeName \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"PayeeName\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (payeeId \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"PayeeId\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        final Person modelPayee \u003d new Person(new Name(payeeName), new PersonId(payeeId));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (timeFrom \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"From\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (timeTo \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"To\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        if (uuid \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"BookingId\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        final LocalDateTime modelTimeFrom \u003d LocalDateTime.parse(timeFrom);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        final LocalDateTime modelTimeTo \u003d LocalDateTime.parse(timeTo);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return new Booking(modelPayee, modelRoom, modelTimeFrom, modelTimeTo, uuid);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 87,
      "dawidjaja": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Remark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private final String personId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private final List\u003cJsonAdaptedBill\u003e billed \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"personId\") String personId,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            @JsonProperty(\"remark\") String remark,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        personId \u003d source.getPersonId().toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        remark \u003d source.getRemark().value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (personId \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                PersonId.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        final PersonId modelPersonId \u003d new PersonId(personId);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        final Remark modelRemark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return new Person(modelName, modelPersonId, modelPhone, modelEmail, modelRemark, modelTags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 18,
      "sancharib-git": 7,
      "-": 92,
      "hmtey": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRoom.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.RoomCost;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Tier;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * Jackson-friendly version of {@link Room}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "public class JsonAdaptedRoom {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Room\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private final String tier;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private final String number;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private final String cost;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    //private final String Id;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Constructs a {@code JsonAdaptedRoom} with the given room details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public JsonAdaptedRoom(@JsonProperty(\"tier\") String tier,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                           @JsonProperty(\"roomNum\") String number, @JsonProperty(\"cost\") String cost) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        this.tier \u003d tier;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        this.number \u003d number;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Converts a given {@code Room} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public JsonAdaptedRoom(Room source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        tier \u003d source.getTier().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        number \u003d source.getRoomNum();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        cost \u003d source.getRoomCost().getCost().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Converts this Jackson-friendly adapted room object into the model\u0027s {@code Room} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted room."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public Room toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (tier \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Tier.class.getSimpleName()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        final Tier modelTier \u003d new Tier(tier);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (number \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"room number\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        final String modelRoomNumber \u003d number;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (cost \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                    RoomCost.class.getSimpleName()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        final RoomCost modelRoomCost \u003d new RoomCost(cost);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return new Room(modelRoomNumber, modelTier, modelRoomCost);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 55,
      "tanphatls987": 1,
      "dawidjaja": 3,
      "hmtey": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedStay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.Hotel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.Stay;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.booking.Booking;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Jackson-friendly version of {@link Booking}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class JsonAdaptedStay extends JsonAdaptedBooking {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Stay\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public JsonAdaptedStay(@JsonProperty(\"room\") String roomNum,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                              @JsonProperty(\"payeeName\") String payeeName,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                              @JsonProperty(\"payeeId\") String payeeId,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                              @JsonProperty(\"from\") String timeFrom,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                              @JsonProperty(\"to\") String timeTo,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                              @JsonProperty(\"uuid\") String uuid,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                              @JsonProperty(\"description\") String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        super(roomNum, payeeName, payeeId, timeFrom, timeTo, uuid);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public JsonAdaptedStay(Stay stay) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        super(stay);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.description \u003d stay.getDescription();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Constructs a Stay"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public Stay toModelType(Hotel hotel) throws IllegalValueException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        Booking booking \u003d super.toModelType(hotel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"description\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new Stay(booking.getPayee(), booking.getRoom(), booking.getTimeFrom(), booking.getTimeTo(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                booking.getBookingId(), description);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawidjaja": 6,
      "youaremysky99": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            logger.warning(\"AddressBook not found.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 1,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAvailableService.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.bill.AvailableService;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.bill.Cost;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ids.AvailableServiceId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Jackson-friendly version of {@link seedu.address.model.hotel.bill.AvailableService}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class JsonAvailableService {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Service\u0027field %d is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private final String id;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private final String cost;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Constructs a {@code JsonAvailableService} with the given service details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public JsonAvailableService(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                                @JsonProperty(\"id\") String id,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                                @JsonProperty(\"cost\") String cost) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Converts a given {@code AvailableService} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public JsonAvailableService(AvailableService source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        description \u003d source.getDescription();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        id \u003d source.getId().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        cost \u003d source.getCost().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Converts this Jackson-friendly adapted service object into the model\u0027s {@code AvailableService} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted service."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public AvailableService toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, \"descrption\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, AvailableServiceId.class.getSimpleName())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            );"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (cost \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Cost.class.getSimpleName())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            );"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new AvailableService(description, new Cost(cost), new AvailableServiceId(id));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonBookKeeperStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hmtey"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ReadOnlyBookKeeper;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hmtey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * A class to access BookKeeper data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hmtey"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hmtey"
        },
        "content": "public class JsonBookKeeperStorage implements BookKeeperStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonHotelStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public JsonBookKeeperStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public Path getBookKeeperFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public Optional\u003cReadOnlyBookKeeper\u003e readBookKeeper() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return readBookKeeper(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Similar to {@link #readBookKeeper()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public Optional\u003cReadOnlyBookKeeper\u003e readBookKeeper(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        Optional\u003cJsonSerializableBookKeeper\u003e jsonBookKeeper \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                filePath, JsonSerializableBookKeeper.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (!jsonBookKeeper.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            logger.warning(\"BookKeeper not found\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            return Optional.of(jsonBookKeeper.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void saveBookKeeper(ReadOnlyBookKeeper bookKeeper) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        saveBookKeeper(bookKeeper, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Similar to {@link #saveBookKeeper(ReadOnlyBookKeeper)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void saveBookKeeper(ReadOnlyBookKeeper bookKeeper, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireNonNull(bookKeeper);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableBookKeeper(bookKeeper), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hmtey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hmtey": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonHotelStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.ReadOnlyHotel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "public class JsonHotelStorage implements HotelStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonHotelStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public JsonHotelStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public Path getHotelFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public Optional\u003cReadOnlyHotel\u003e readHotel() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return readHotel(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Similar to {@link #readHotel()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public Optional\u003cReadOnlyHotel\u003e readHotel(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        Optional\u003cJsonSerializableHotel\u003e jsonHotel \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                filePath, JsonSerializableHotel.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (!jsonHotel.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            logger.warning(\"Hotel not found\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            return Optional.of(jsonHotel.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void saveHotel(ReadOnlyHotel hotel) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        saveHotel(hotel, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Similar to {@link #saveHotel(ReadOnlyHotel)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void saveHotel(ReadOnlyHotel hotel, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        requireNonNull(hotel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableHotel(hotel), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 1,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableBookKeeper.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hmtey"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.BookKeeper;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ReadOnlyBookKeeper;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.Bill;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hmtey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * An Immutable BookKeeper that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hmtey"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hmtey"
        },
        "content": "@JsonRootName(value \u003d \"bookkeeper\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hmtey"
        },
        "content": "class JsonSerializableBookKeeper {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BILL \u003d \"Persons list contains duplicate bill(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private final List\u003cJsonAdaptedBill\u003e bills \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Constructs a {@code JsonSerializableBookKeeper} with the given bills."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public JsonSerializableBookKeeper(@JsonProperty(\"bills\") List\u003cJsonAdaptedBill\u003e bills) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.bills.addAll(bills);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Converts a given {@code ReadOnlyBookKeeper} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableBookKeeper}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public JsonSerializableBookKeeper(ReadOnlyBookKeeper source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        bills.addAll(source.getBillList().stream().map(JsonAdaptedBill::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Converts this book keeper into the model\u0027s {@code BookKeeper} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public BookKeeper toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        BookKeeper bookKeeper \u003d new BookKeeper();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        for (JsonAdaptedBill jsonAdaptedBill : bills) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            Bill bill \u003d jsonAdaptedBill.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            if (bookKeeper.hasBill(bill)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_BILL);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            bookKeeper.addBill(bill);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return bookKeeper;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hmtey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hmtey": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableHotel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.Hotel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.ReadOnlyHotel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.Stay;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.bill.AvailableService;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.booking.Booking;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * An Immutable Hotel that is serializable to JSON format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "@JsonRootName(value \u003d \"hotel\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "public class JsonSerializableHotel {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ROOMS \u003d \"Room list contains duplicate room(s).\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SERVICES \u003d \"Service list contains duplicate service(s)\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private static final String MESSAGE_DUPLICATE_BOOKINGS \u003d \"Booking list contains duplicate booking(s)\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private final List\u003cJsonAdaptedRoom\u003e rooms \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private final List\u003cJsonAdaptedBooking\u003e bookings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private final List\u003cJsonAvailableService\u003e availableServices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private final List\u003cJsonAdaptedStay\u003e stays \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Constructs a {@code JsonSerializableHotel} with the given rooms and bookings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public JsonSerializableHotel(@JsonProperty(\"rooms\") List\u003cJsonAdaptedRoom\u003e rooms,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                                 @JsonProperty(\"bookings\") List\u003cJsonAdaptedBooking\u003e bookings,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                                 @JsonProperty(\"availableServices\") List\u003cJsonAvailableService\u003e availableServices,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                                 @JsonProperty(\"stays\") List\u003cJsonAdaptedStay\u003e stays) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        this.rooms.addAll(rooms);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        this.bookings.addAll(bookings);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.availableServices.addAll(availableServices);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.stays.addAll(stays);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Converts a given {@code ReadOnlyHotel} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @param sourceHotel future changes to this will not affect the created {@code JsonSerializableHotel}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public JsonSerializableHotel(ReadOnlyHotel sourceHotel) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        rooms.addAll(sourceHotel.getRoomList().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                .map(JsonAdaptedRoom::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        bookings.addAll(sourceHotel.getBookingList().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                .map(JsonAdaptedBooking::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        availableServices.addAll(sourceHotel.getAvailableServiceList().stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                .map(JsonAvailableService::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        stays.addAll(sourceHotel.getStayList().stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                .map(JsonAdaptedStay::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Converts this hotel into the model\u0027s {@code Hotel} object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public Hotel toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        Hotel hotel \u003d new Hotel();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        for (JsonAdaptedRoom jsonAdaptedRoom : rooms) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            Room room \u003d jsonAdaptedRoom.toModelType();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            if (hotel.hasRoom(room)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ROOMS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            hotel.addRoom(room);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        for (JsonAdaptedBooking jsonAdaptedBooking : bookings) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            Booking booking \u003d jsonAdaptedBooking.toModelType(hotel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            if (hotel.hasBooking(booking)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_BOOKINGS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            hotel.addBooking(booking);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        for (JsonAvailableService jsonAvailableService : availableServices) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            AvailableService service \u003d jsonAvailableService.toModelType();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            if (hotel.getAvailableServiceList().stream().anyMatch(other -\u003e other.getId().equals(service.getId()))) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_SERVICES);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            hotel.addAvailableService(service);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        for (JsonAdaptedStay jsonAdaptedStay : stays) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            Stay stay \u003d jsonAdaptedStay.toModelType(hotel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            hotel.addStay(stay);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return hotel;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 73,
      "dawidjaja": 2,
      "youaremysky99": 24,
      "hmtey": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ReadOnlyBookKeeper;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.ReadOnlyHotel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hmtey"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage, HotelStorage, BookKeeperStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    Optional\u003cReadOnlyHotel\u003e readHotel() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    Optional \u003cReadOnlyHotel\u003e readHotel(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    void saveHotel(ReadOnlyHotel hotel) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    Optional\u003cReadOnlyBookKeeper\u003e readBookKeeper() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    Path getBookKeeperFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    void saveBookKeeper(ReadOnlyBookKeeper bookKeeper) throws IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 9,
      "-": 32,
      "hmtey": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ReadOnlyBookKeeper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.ReadOnlyHotel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * Manages storage of Morpheus data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private HotelStorage hotelStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private BookKeeperStorage bookKeeperStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                          HotelStorage hotelStorage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                          BookKeeperStorage bookKeeperStorage,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        this.hotelStorage \u003d hotelStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.bookKeeperStorage \u003d bookKeeperStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Morpheus methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public Path getHotelFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return hotelStorage.getHotelFilePath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public Optional\u003cReadOnlyHotel\u003e readHotel() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return readHotel(hotelStorage.getHotelFilePath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public Optional \u003cReadOnlyHotel\u003e readHotel(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return hotelStorage.readHotel(filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public Path getBookKeeperFilePath() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return bookKeeperStorage.getBookKeeperFilePath();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public Optional\u003cReadOnlyBookKeeper\u003e readBookKeeper() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return readBookKeeper(bookKeeperStorage.getBookKeeperFilePath());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public Optional\u003cReadOnlyBookKeeper\u003e readBookKeeper(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return bookKeeperStorage.readBookKeeper(filePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void saveHotel(ReadOnlyHotel hotel) throws IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        saveHotel(hotel, hotelStorage.getHotelFilePath());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void saveHotel(ReadOnlyHotel hotel, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        hotelStorage.saveHotel(hotel, filePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void saveBookKeeper(ReadOnlyBookKeeper bookKeeper) throws IOException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        saveBookKeeper(bookKeeper, bookKeeperStorage.getBookKeeperFilePath());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void saveBookKeeper(ReadOnlyBookKeeper bookKeeper, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        bookKeeperStorage.saveBookKeeper(bookKeeper, filePath);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 24,
      "-": 81,
      "hmtey": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AvailableServiceCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.bill.AvailableService;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * An UI component that displays information of a {@code AvailableService}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class AvailableServiceCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private static final String FXML \u003d \"AvailableServiceCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public final AvailableService service;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private Label cost;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Creates new card given a service."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public AvailableServiceCard(AvailableService service) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.service \u003d service;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        id.setText(service.getId().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        description.setText(service.getDescription());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        cost.setText(service.getCost().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        // instance of this"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (!(other instanceof AvailableServiceCard)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        AvailableServiceCard otherCard \u003d (AvailableServiceCard) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return description.getText().equals(otherCard.description.getText())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                \u0026\u0026 cost.getText().equals(otherCard.cost.getText())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                \u0026\u0026 id.getText().equals(otherCard.id.getText());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AvailableServiceListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.bill.AvailableService;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Available services ui."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class AvailableServiceListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private static final String FXML \u003d \"AvailableServiceListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AvailableServiceListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private ListView\u003cAvailableService\u003e availableServiceListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public AvailableServiceListPanel(ObservableList\u003cAvailableService\u003e availableServices) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        availableServiceListView.setItems(availableServices);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        availableServiceListView.setCellFactory(listView -\u003e new AvailableServiceViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code AvailableService} using"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * a {@code AvailableServiceCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    class AvailableServiceViewCell extends ListCell\u003cAvailableService\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        protected void updateItem(AvailableService service, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            super.updateItem(service, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            if (empty || service \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                setGraphic(new AvailableServiceCard(service).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BillCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hmtey"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.Bill;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hmtey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * An UI component that displays information of a {@code Bill}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hmtey"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hmtey"
        },
        "content": "public class BillCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private static final String FXML \u003d \"BillCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public final Bill bill;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private Label roomNum;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private Label personId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private Label details;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Creates new card given a bill."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public BillCard(Bill bill) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        this.bill \u003d bill;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        roomNum.setText(\"Room: \" + bill.getRoomId().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        personId.setText(\"Guest: \" + bill.getPersonId().toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        details.setText(bill.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        // instance of this"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        if (!(other instanceof BillCard)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        BillCard otherCard \u003d (BillCard) other;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return roomNum.getText().equals(otherCard.roomNum.getText())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                \u0026\u0026 details.getText().equals(otherCard.details.getText());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hmtey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hmtey": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BillListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hmtey"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.Bill;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hmtey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hmtey"
        },
        "content": " * Panel containing list of bills."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hmtey"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hmtey"
        },
        "content": "public class BillListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private static final String FXML \u003d \"BillListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BillListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private ListView\u003cBill\u003e billListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public BillListPanel(ObservableList\u003cBill\u003e billList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        billListView.setItems(billList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        billListView.setCellFactory(listView -\u003e new BillListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Bill} using a {@code BillCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    class BillListViewCell extends ListCell\u003cBill\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        protected void updateItem (Bill bill, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            super.updateItem(bill, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            if (empty || bill \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                setGraphic(new BillCard(bill).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hmtey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hmtey": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BookingCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.booking.Booking;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * An UI component that displays information of a {@code Booking}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "public class BookingCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private static final String FXML \u003d \"BookingCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public final Booking booking;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    private Label payee;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    private Label room;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    private Label duration;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    private Label bookingId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public BookingCard(Booking booking) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        this.booking \u003d booking;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        payee.setText(booking.getPayee().getName().toString() + \"  \" + booking.getPayee().getPersonId().toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        room.setText(\"Room: \" + booking.getRoom().getRoomNum());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        duration.setText(booking.getBookDuration().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        bookingId.setText(booking.getReadableBookingId());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (!(other instanceof RoomCard)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        BookingCard card \u003d (BookingCard) other;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        return payee.getText().equals(card.payee.getText())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                \u0026\u0026 room.equals(card.room);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 52,
      "dawidjaja": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BookingListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.booking.Booking;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "/**Booking list Ui*/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "public class BookingListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private static final String FXML \u003d \"BookingListPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BookingListPanel.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private ListView\u003cBooking\u003e bookingListView;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public BookingListPanel(ObservableList\u003cBooking\u003e bookingList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        bookingListView.setItems(bookingList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        bookingListView.setCellFactory(listView -\u003e new BookingListPanel.BookingListViewCell());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    class BookingListViewCell extends ListCell\u003cBooking\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        protected void updateItem(Booking booking, boolean empty) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            super.updateItem(booking, empty);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            if (empty || booking \u003d\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                setGraphic(new BookingCard(booking).getRoot());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            \"https://github.com/AY1920S2-CS2103T-W13-4/main/blob/master/docs/UserGuide.adoc\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 101,
      "hmtey": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainTabPane.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " * TabPane for traversing between different list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "public class MainTabPane extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private static final String FXML \u003d \"MainTabPane.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private WelcomePanel welcomePanel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private RoomListPanel roomListPanel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private BookingListPanel bookingListPanel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private AvailableServiceListPanel availableServiceListPanel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private BillListPanel billListPanel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private HashMap\u003cString, Tab\u003e tabMapping;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private TabPane mainTabPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private Tab welcomeTab;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private Tab roomTab;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private Tab guestTab;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private Tab bookingTab;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private Tab availableServiceTab;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private Tab billTab;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private StackPane welcomePlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private StackPane personListPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private StackPane roomListPanelPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private StackPane bookingListPanelPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private StackPane availableServiceListPanelPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private StackPane billListPanelPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Create a mainTabPane"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param logic"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public MainTabPane(Logic logic) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        ///set up panels"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        setWelcomePlaceholder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        setPersonListPanel();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        setRoomListPanel();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        setBookingListPanel();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        setAvailableServiceListPanel();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        setBillListPanel();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        mainTabPane.getStyleClass().add(\"floating\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        initializeMapping();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Create mapping between name and tab."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private void initializeMapping() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        tabMapping \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        tabMapping.put(\"welcome\", welcomeTab);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        tabMapping.put(\"room\", roomTab);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        tabMapping.put(\"guest\", guestTab);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        tabMapping.put(\"booking\", bookingTab);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        tabMapping.put(\"service\", availableServiceTab);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        tabMapping.put(\"bill\", billTab);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private void setWelcomePlaceholder() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        welcomePanel \u003d new WelcomePanel();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        welcomePlaceholder.getChildren().add(welcomePanel.getRoot());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private void setPersonListPanel() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        personListPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private void setRoomListPanel() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        roomListPanel \u003d new RoomListPanel(logic.getFilteredRoomList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        roomListPanelPlaceholder.getChildren().add(roomListPanel.getRoot());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private void setBookingListPanel() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        bookingListPanel \u003d new BookingListPanel(logic.getFilteredBookingList());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        bookingListPanelPlaceholder.getChildren().add(bookingListPanel.getRoot());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private void setAvailableServiceListPanel() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        availableServiceListPanel \u003d new AvailableServiceListPanel(logic.getHotel().getAvailableServiceList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        availableServiceListPanelPlaceholder.getChildren().add(availableServiceListPanel.getRoot());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private void setBillListPanel() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        billListPanel \u003d new BillListPanel(logic.getFilteredBillList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        billListPanelPlaceholder.getChildren().add(billListPanel.getRoot());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Set to corresponding tab with tab name specified."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param tabName"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public boolean setCurrentTab(String tabName) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (!tabMapping.containsKey(tabName)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        Tab selectTab \u003d tabMapping.get(tabName);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        mainTabPane.getSelectionModel().select(selectTab);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 81,
      "sancharib-git": 29,
      "youaremysky99": 10,
      "hmtey": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private MainTabPane mainTabPane;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private StackPane mainTabPanePlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private StackPane roomListPanelPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        mainTabPane \u003d new MainTabPane(logic);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        mainTabPanePlaceholder.getChildren().add(mainTabPane.getRoot());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getHotelFilePath());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            switchTab(commandResult.getUiView());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Switch tab view."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @param uiView"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private void switchTab(Optional\u003cString\u003e uiView) throws CommandException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (uiView.isEmpty()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        boolean setTabResult \u003d mainTabPane.setCurrentTab(uiView.get());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        if (!setTabResult) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            throw new CommandException(\"Not a valid tab name\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 21,
      "sancharib-git": 4,
      "-": 186
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private Label personId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        personId.setText(person.getPersonId().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                .filter(tag -\u003e tag.tagName.equals(\"VIP\") || tag.tagName.equals(\"Member\"))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 3,
      "sancharib-git": 5,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 1,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RoomCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * An UI component that displays information of a {@code Room}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "public class RoomCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private static final String FXML \u003d \"RoomCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public final Room room;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private Label tier;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private Label roomNum;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    private Label cost;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private Label stay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private Label occupancy;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private Label guest;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public RoomCard(Room room, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        this.room \u003d room;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        if (tier \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            tier \u003d new Label();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        tier.setText(room.getTier().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        roomNum.setText(room.getRoomNum());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        if (cost \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            cost \u003d new Label();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        cost.setText(room.getRoomCost().getCost().toString()); //getCost probably could be deleted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (stay \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            stay \u003d new Label();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (occupancy \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            occupancy \u003d new Label();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (guest \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            guest \u003d new Label();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (room.getStay() \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            stay.setText(\"No current stay\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            occupancy.setText(\"free\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            occupancy.setStyle(\"-fx-background-color:GREEN\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            String formattedTo \u003d room.getStay().getTimeTo().format(formatter);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            stay.setText(\"Current stay until: \" + formattedTo);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            guest.setText(\"Guest: \" + room.getStay().getPayee().getPersonId().toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            occupancy.setText(\"occupied\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            occupancy.setStyle(\"-fx-background-color:RED\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        if (!(other instanceof RoomCard)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        RoomCard card \u003d (RoomCard) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return roomNum.getText().equals(card.roomNum.getText())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                \u0026\u0026 room.equals(card.room);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 6,
      "sancharib-git": 73,
      "dawidjaja": 14,
      "hmtey": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RoomListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * Panel containing the list of rooms."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "public class RoomListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private static final String FXML \u003d \"RoomListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RoomListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private ListView\u003cRoom\u003e roomListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public RoomListPanel(ObservableList\u003cRoom\u003e roomList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        roomListView.setItems(roomList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        roomListView.setCellFactory(listView -\u003e new RoomListPanel.RoomListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    class RoomListViewCell extends ListCell\u003cRoom\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        protected void updateItem(Room room, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            super.updateItem(room, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            if (empty || room \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                setGraphic(new RoomCard(room, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/morpheus_icon.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 84,
      "hmtey": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 1,
      "-": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/WelcomePanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "/**Panel showing welcome information*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "public class WelcomePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private static final String FXML \u003d \"WelcomePanel.fxml\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(WelcomePanel.class);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public WelcomePanel() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 17
    }
  },
  {
    "path": "src/main/resources/view/AvailableServiceCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                \u003cLabel fx:id\u003d\"description\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            \u003cLabel fx:id\u003d\"cost\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$cost\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 31
    }
  },
  {
    "path": "src/main/resources/view/AvailableServiceListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    \u003cListView fx:id\u003d\"availableServiceListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 7
    }
  },
  {
    "path": "src/main/resources/view/BillCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"75\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"75\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                \u003cLabel fx:id\u003d\"roomNum\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$room\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            \u003cLabel fx:id\u003d\"personId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$personId\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            \u003cLabel fx:id\u003d\"details\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$details\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "hmtey": 31
    }
  },
  {
    "path": "src/main/resources/view/BillListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    \u003cListView fx:id\u003d\"billListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hmtey"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "hmtey": 7
    }
  },
  {
    "path": "src/main/resources/view/BookingCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"75\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"75\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                \u003cLabel fx:id\u003d\"room\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$Room\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            \u003cLabel fx:id\u003d\"bookingId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$bookingId\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            \u003cLabel fx:id\u003d\"payee\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            \u003cLabel fx:id\u003d\"duration\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$Duration\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 30,
      "dawidjaja": 2
    }
  },
  {
    "path": "src/main/resources/view/BookingListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    \u003cListView fx:id\u003d\"bookingListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 7
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 1,
      "-": 37
    }
  },
  {
    "path": "src/main/resources/view/MainTabPane.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "\u003cVBox prefHeight\u003d\"286.0\" prefWidth\u003d\"366.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "      \u003cTabPane id\u003d\"mainTabFrame\" fx:id\u003d\"mainTabPane\" stylesheets\u003d\"@DarkTheme.css\" tabClosingPolicy\u003d\"UNAVAILABLE\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "         \u003ctabs\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            \u003cTab fx:id\u003d\"welcomeTab\" text\u003d\"About\" styleClass\u003d\"tab\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "               \u003ccontent\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                  \u003cAnchorPane style\u003d\"-fx-background-color: black;\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"welcomePlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "               \u003c/content\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            \u003cTab fx:id\u003d\"guestTab\" text\u003d\"Guests\" styleClass\u003d\"tab\" style\u003d\"-fx-text-fill: white;\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "               \u003ccontent\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                  \u003cAnchorPane style\u003d\"-fx-background-color: black;\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"personListPlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "               \u003c/content\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            \u003cTab fx:id\u003d\"roomTab\" text\u003d\"Rooms\" styleClass\u003d\"tab\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "               \u003ccontent\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                  \u003cAnchorPane style\u003d\"-fx-background-color: black;\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                     \u003cStackPane fx:id\u003d\"roomListPanelPlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "               \u003c/content\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            \u003cTab fx:id\u003d\"bookingTab\" text\u003d\"Bookings\" styleClass\u003d\"tab\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "               \u003ccontent\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                  \u003cAnchorPane style\u003d\"-fx-background-color: black;\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"bookingListPanelPlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "               \u003c/content\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            \u003cTab fx:id\u003d\"availableServiceTab\" text\u003d\"Available Services\" styleClass\u003d\"tab\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "               \u003ccontent\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                  \u003cAnchorPane style\u003d\"-fx-background-color: black;\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"availableServiceListPanelPlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "               \u003c/content\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            \u003cTab fx:id\u003d\"billTab\" text\u003d\"Bills\" styleClass\u003d\"tab\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hmtey"
        },
        "content": "               \u003ccontent\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                  \u003cAnchorPane style\u003d\"-fx-background-color: black;\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"billListPanelPlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hmtey"
        },
        "content": "               \u003c/content\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "         \u003c/tabs\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "      \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 28,
      "sancharib-git": 25,
      "youaremysky99": 9,
      "hmtey": 9
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Morpheus\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\" style\u003d\"-fx-font-family: Courier New;\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" styleClass\u003d\"tab\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\" style\u003d\"-fx-font-family: Courier New;\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" style\u003d\"-fx-font-family: Courier New;\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            \u003cStackPane fx:id\u003d\"mainTabPanePlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 9,
      "tanphatls987": 6,
      "-": 41
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "      \u003cLabel fx:id\u003d\"personId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$personId\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "      \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 1,
      "sancharib-git": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/RoomCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                \u003cLabel fx:id\u003d\"roomNum\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            \u003cLabel fx:id\u003d\"occupancy\" styleClass\u003d\"occupancy\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            \u003cLabel fx:id\u003d\"tier\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$Tier\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            \u003cLabel fx:id\u003d\"cost\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$cost\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            \u003cLabel fx:id\u003d\"stay\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$stay\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            \u003cLabel fx:id\u003d\"guest\" styleClass\u003d\"cell_small_label\" text\u003d\"Guest: -\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 33,
      "dawidjaja": 2
    }
  },
  {
    "path": "src/main/resources/view/RoomListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    \u003cListView fx:id\u003d\"roomListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 7
    }
  },
  {
    "path": "src/main/resources/view/WelcomePanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    \u003cTextFlow textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        \u003cLabel text\u003d\"Morpheus, Hotel Management System\" styleClass\u003d\"welcomeTitle\" alignment\u003d\"TOP_RIGHT\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    \u003cTextFlow textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        \u003cLabel text\u003d\"Welcome to Morpheus.\" styleClass\u003d\"welcome-heading\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    \u003cTextFlow textAlignment\u003d\"LEFT\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        \u003cLabel text\u003d\"1. To Get Started \" styleClass\u003d\"welcome-subheading\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    \u003cTextFlow textAlignment\u003d\"LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        \u003cLabel text\u003d\"Click on a tab to get started!\" styleClass\u003d\"welcome-body\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        \u003cLabel text\u003d\"             \"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    \u003cTextFlow textAlignment\u003d\"LEFT\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        \u003cLabel text\u003d\"2. To View Help \" styleClass\u003d\"welcome-subheading\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    \u003cTextFlow textAlignment\u003d\"LEFT\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        \u003cLabel text\u003d\"Click on \" styleClass\u003d\"welcome-body\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        \u003cLabel text\u003d\"Help\" styleClass\u003d\"markup\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        \u003cLabel text\u003d\"          \"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    \u003cTextFlow textAlignment\u003d\"LEFT\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        \u003cLabel text\u003d\"3. Enter A Command Below!\" styleClass\u003d\"welcome-subheading\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                SerializableTestClass.JSON_STRING_REPRESENTATION + \"\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 2,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.storage.JsonBookKeeperStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.storage.JsonHotelStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        JsonHotelStorage hotelStorage \u003d new JsonHotelStorage((temporaryFolder).resolve(\"hotel.json\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        JsonBookKeeperStorage bookKeeperStorage \u003d new JsonBookKeeperStorage((temporaryFolder)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                .resolve(\"bookkeeper.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, hotelStorage,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                bookKeeperStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                                    Path filePath) throws IOException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 4,
      "-": 132,
      "hmtey": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddGuestCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddGuestCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "public class AddGuestCommandIntegrationTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        ///avoid same person id"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().withPersonId(\"somethingridiculous\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                model.getHotel(), model.getBookKeeper());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Predicate\u003cPerson\u003e personPredicate \u003d person -\u003e person.getPersonId().equals(validPerson.getPersonId());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        expectedModel.updateFilteredPersonList(personPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        assertCommandSuccess(new AddGuestCommand(validPerson), model,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                String.format(AddGuestCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        assertCommandFailure(new AddGuestCommand(personInList), model, AddGuestCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 8,
      "youaremysky99": 5,
      "-": 37,
      "hmtey": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddGuestCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ReadOnlyBookKeeper;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ReadOnlyHotel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.hotel.Stay;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.bill.AvailableService;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.bill.Bill;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.Cost;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.RoomCost;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.booking.Booking;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Tier;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ids.AvailableServiceId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.timeframe.TimeFrame;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "public class AddGuestCommandTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddGuestCommand(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        AddGuestCommand addGuestCommand \u003d new AddGuestCommand(validPerson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            AddGuestCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addGuestCommand.execute(modelStub));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        AddGuestCommand addAliceCommand \u003d new AddGuestCommand(alice);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        AddGuestCommand addBobCommand \u003d new AddGuestCommand(bob);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        AddGuestCommand addAliceCommandCopy \u003d new AddGuestCommand(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        public Path getHotelFilePath() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        public Path getBookKeeperFilePath() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public ReadOnlyHotel getHotel() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        public ReadOnlyBookKeeper getBookKeeper() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        public boolean hasPersonId(PersonId personId) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        public Optional\u003cPerson\u003e findPersonWithId(PersonId personId) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public boolean hasRoom(String roomNum) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        public boolean hasBooking(Booking booking) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public void addRoom(String roomNum) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public void addRoom(String roomName, Tier tier, RoomCost cost) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public ObservableList\u003cBooking\u003e getFilteredBookingList() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public ObservableList\u003cRoom\u003e getFilteredRoomList() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        public ObservableList\u003cAvailableService\u003e getFilteredServiceList() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        public ObservableList\u003cBill\u003e getFilteredBillList() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public void updateFilteredBookingList(Predicate\u003cBooking\u003e predicate) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public void updateFilteredRoomList(Predicate\u003cRoom\u003e predicate) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        public void updateFilteredServiceList(Predicate\u003cAvailableService\u003e predicate) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        public void updateFilteredBillList(Predicate\u003cBill\u003e predicate) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        public ObservableList\u003cRoom\u003e getRoomList() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        public ObservableList\u003cBooking\u003e getBookingList() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public Optional\u003cBooking\u003e getCurrentStay(Room room) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public Optional\u003cRoom\u003e findRoom(RoomId roomId) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public boolean isRoomFree(Person person, Room room, TimeFrame duration) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        public boolean isGuestCheckedIn(Person person, Room room) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        public void bookRoom(Booking booking) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public void checkIn(Stay stay) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public Optional\u003cStay\u003e findStay(Room room) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public boolean checkOut(Room room) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public void addTier(Tier tier, ArrayList\u003cString\u003e roomNums) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public void deleteBooking(Booking booking) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public boolean hasTier(Tier tier) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        public void setRoomCost(Room room, RoomCost roomCost) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public void addAvailableService(AvailableService service) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        public Optional\u003cAvailableService\u003e findService(AvailableServiceId service) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        public void chargeRoomCost(RoomId roomId, RoomCost roomCost, Stay stay) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public void chargeExtendRoomCost(RoomId roomId, RoomCost roomCost, Stay stay, LocalDateTime fromDate) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        public void deleteChargedService(RoomId roomId, AvailableService service) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        public void chargeService(RoomId roomId, AvailableService service) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public void deleteRoom(String roomNum) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public void deleteAvailableService(AvailableServiceId id) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        public void addBill(Bill bill) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        public void deleteBill(RoomId roomId) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        public ObservableList\u003cBill\u003e findBillList(PersonId personId) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        public Optional\u003cBill\u003e findBill(RoomId roomId) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        public Cost getGuestBillsTotal(PersonId personId) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public Optional\u003cBooking\u003e findBookingById(String bookingId) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public void extendRoom(Stay stay, LocalDateTime toDate) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        public boolean hasPersonId(PersonId personId) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            requireNonNull(personId);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            return personsAdded.stream().anyMatch(personId::equals);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 59,
      "sancharib-git": 28,
      "dawidjaja": 47,
      "youaremysky99": 60,
      "-": 170,
      "hmtey": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddRoomCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.BookKeeper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.Hotel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.testutil.RoomBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Integration test, interacting with model"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class AddRoomCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private static final Room DEFAULT_ROOM \u003d new RoomBuilder().build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Hotel(), new BookKeeper());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void executeAddRoom_success() throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        AddRoomCommand command \u003d new AddRoomCommand("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            DEFAULT_ROOM.getName(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            DEFAULT_ROOM.getRoomCost(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            DEFAULT_ROOM.getTier());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                model.getHotel(), model.getBookKeeper());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        model.addRoom(DEFAULT_ROOM.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 1,
      "dawidjaja": 4,
      "youaremysky99": 27,
      "hmtey": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddRoomCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.hotel.bill.RoomCost;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.hotel.room.Tier;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Test for add room command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class AddRoomCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void construct_nullRoom_throwsnNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddRoomCommand(null, null, null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String firstName \u003d \"12E\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String secondName \u003d \"12F\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        Tier tier \u003d new Tier(\"GOLD\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        RoomCost roomCost \u003d new RoomCost(\"150.00\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Room firstRoom \u003d new Room(firstName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Room secondRoom \u003d new Room(secondName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        AddRoomCommand addFirst \u003d new AddRoomCommand(firstName, roomCost, tier);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        AddRoomCommand addSecond \u003d new AddRoomCommand(secondName, roomCost, tier);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertTrue(addFirst.equals(addFirst));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        //same values -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        AddRoomCommand copyFirst \u003d new AddRoomCommand(firstName, roomCost, tier);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertTrue(addFirst.equals(copyFirst));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        //different types -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertFalse(addFirst.equals(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        //null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertFalse(addSecond.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        //different name -\u003e return false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertFalse(addFirst.equals(addSecond));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 2,
      "dawidjaja": 8,
      "youaremysky99": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddServiceCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.BookKeeper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.Hotel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.bill.AvailableService;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.bill.Cost;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ids.AvailableServiceId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddServiceCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class AddServiceCommandIntegrationTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Hotel(), new BookKeeper());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void execute_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String description \u003d \"Wash clothes\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        AvailableServiceId id \u003d new AvailableServiceId(\"WC\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Cost cost \u003d new Cost(\"100.00\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                model.getHotel(), model.getBookKeeper());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        expectedModel.addAvailableService(new AvailableService(description, cost, id));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertCommandSuccess(new AddServiceCommand(description, cost, id), model,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                String.format(AddServiceCommand.MESSAGE_SUCCESS, description, id), expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void execute_duplicatedService() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String description \u003d \"Wash clothes\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        AvailableServiceId id \u003d new AvailableServiceId(\"WC\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Cost cost \u003d new Cost(\"100.00\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                model.getHotel(), model.getBookKeeper());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        expectedModel.addAvailableService(new AvailableService(description, cost, id));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        model.addAvailableService(new AvailableService(description, cost, id));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertCommandFailure(new AddServiceCommand(description, cost, id), model, AddServiceCommand.DUPLICATED_MESSAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 51,
      "hmtey": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddServiceCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.bill.Cost;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ids.AvailableServiceId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class AddServiceCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void construct_nullCost() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String description \u003d \"Wash clothes\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        AvailableServiceId id \u003d new AvailableServiceId(\"WC\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddServiceCommand(description, null, id));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void construct_nullId() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String description \u003d \"Wash clothes\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Cost cost \u003d new Cost(\"100.00\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddServiceCommand(description, cost, null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void construct_nullDesc() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        AvailableServiceId id \u003d new AvailableServiceId(\"WC\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Cost cost \u003d new Cost(\"100.00\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddServiceCommand(null, cost, id));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddTierCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.BookKeeper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.Hotel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Tier;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.testutil.TierBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.testutil.TypicalRooms;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Integration test, interacting with model"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class AddTierCommandIntegrationTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Hotel(), new BookKeeper());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void executeAddTier_roomNotFound() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                model.getHotel(), model.getBookKeeper());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        Tier validTier \u003d new TierBuilder().withTierName(\"GOLD\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        ArrayList\u003cRoom\u003e roomList \u003d TypicalRooms.getTypicalRooms();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        ArrayList\u003cString\u003e roomNums \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        for (Room room: roomList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            roomNums.add(room.getName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        expectedModel.addTier(validTier, roomNums);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertCommandFailure(new AddTierCommand(validTier, roomNums), model,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                AddTierCommand.MESSAGE_ROOM_NOT_FOUND);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 3,
      "youaremysky99": 43,
      "hmtey": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddTierCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Tier;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.testutil.TypicalRooms;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Test for add tier command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class AddTierCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void construct_nullRoom_thowsnNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddTierCommand(null, null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        String firstTierName \u003d \"BRONZE\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        String secondTierName \u003d \"GOLD\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Tier goldTier \u003d new Tier(firstTierName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Tier diamondTier \u003d new Tier(secondTierName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        ArrayList roomList \u003d (ArrayList) TypicalRooms.getTypicalRooms();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        AddTierCommand firstCommand \u003d new AddTierCommand(goldTier, roomList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        AddTierCommand secondCommand \u003d new AddTierCommand(diamondTier, roomList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        //same object, returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertTrue(goldTier.equals(goldTier));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        //same values, returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        AddTierCommand copyFirst \u003d new AddTierCommand(goldTier, roomList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertTrue(copyFirst.equals(firstCommand));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        //different types, returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertFalse(secondCommand.equals(1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        //null, returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertFalse(firstCommand.equals(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        //different values, return false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertFalse(firstCommand.equals(secondCommand));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 3,
      "youaremysky99": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CheckInCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.BEST_ROOM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.WORST_ROOM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.Hotel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ReadOnlyBookKeeper;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.ReadOnlyHotel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.hotel.Stay;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.bill.AvailableService;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.bill.Bill;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.Cost;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.RoomCost;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.hotel.booking.Booking;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.hotel.room.Tier;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ids.AvailableServiceId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.timeframe.TimeFrame;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "public class CheckInCommandTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public void constructor_nullPersonId_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        RoomId roomId \u003d new RoomId(\"123\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        LocalDateTime localDateTime \u003d LocalDateTime.now().plusDays(1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CheckInCommand(null, roomId, localDateTime));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public void constructor_nullRoomId_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        PersonId personId \u003d new PersonId(\"G1232123O\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        LocalDateTime localDateTime \u003d LocalDateTime.now().plusDays(1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CheckInCommand(personId, null, localDateTime));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public void constructor_nullLocalDateTime_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        PersonId personId \u003d new PersonId(\"G1232123O\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        RoomId roomId \u003d new RoomId(\"123\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CheckInCommand(personId, roomId, null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public void constructor_personDoesNotExist_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        PersonId personId \u003d new PersonId(\"G1232123O\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        RoomId roomId \u003d new RoomId(\"123\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        LocalDateTime localDateTime \u003d LocalDateTime.now().plusDays(1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        CheckInCommand checkInCommand \u003d new CheckInCommand(personId, roomId, localDateTime);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        ModelStubWithRoomsAndPerson modelStubWithRoomsAndPerson \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            new ModelStubWithRoomsAndPerson();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            String.format(CheckInCommand.MESSAGE_PERSON_NOT_EXISTS, personId), () -\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            checkInCommand.execute(modelStubWithRoomsAndPerson));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public void constructor_roomDoesNotExist_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        PersonId personId \u003d ALICE.getPersonId();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        RoomId roomId \u003d new RoomId(\"123\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        LocalDateTime localDateTime \u003d LocalDateTime.now().plusDays(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        CheckInCommand checkInCommand \u003d new CheckInCommand(personId, roomId, localDateTime);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        ModelStubWithRoomsAndPerson modelStubWithRoomsAndPerson \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            new ModelStubWithRoomsAndPerson();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            String.format(CheckInCommand.MESSAGE_ROOM_NOT_EXISTS, roomId), () -\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            checkInCommand.execute(modelStubWithRoomsAndPerson));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public void execute_expiredToDate_throwsCommandException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        PersonId personId \u003d ALICE.getPersonId();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        RoomId roomId \u003d BEST_ROOM.getRoomId();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        LocalDateTime toDate \u003d LocalDateTime.now().plusDays(-1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        CheckInCommand checkInCommand \u003d new CheckInCommand(personId, roomId, toDate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        ModelStubWithRoomsAndPerson modelStubWithRoomsAndPerson \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            new ModelStubWithRoomsAndPerson();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            String.format(CheckInCommand.MESSAGE_DATE_PASSED, toDate), () -\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            checkInCommand.execute(modelStubWithRoomsAndPerson));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public void execute_roomOccupied_throwsCommandException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        PersonId personId \u003d BOB.getPersonId();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        RoomId roomId \u003d BEST_ROOM.getRoomId();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        LocalDateTime toDate \u003d LocalDateTime.now().plusDays(2);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        CheckInCommand checkInCommand \u003d new CheckInCommand(personId, roomId, toDate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        ModelStubWithBooking modelStubWithBooking \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            new ModelStubWithBooking();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            String.format(CheckInCommand.MESSAGE_ROOM_OCCUPIED, roomId), () -\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            checkInCommand.execute(modelStubWithBooking));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public void execute_checkInClash_throwsCommandException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        PersonId personId \u003d BOB.getPersonId();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        RoomId roomId \u003d BEST_ROOM.getRoomId();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        LocalDateTime toDate \u003d LocalDateTime.now().plusDays(2);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        CheckInCommand checkInCommand \u003d new CheckInCommand(personId, roomId, toDate);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        ModelStubWithBooking modelStubWithBooking \u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            new ModelStubWithBooking();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            String.format(CheckInCommand.MESSAGE_ROOM_OCCUPIED, roomId), () -\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            checkInCommand.execute(modelStubWithBooking));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public void execute_successfulBooking() throws CommandException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        PersonId personId \u003d BOB.getPersonId();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        RoomId roomId \u003d WORST_ROOM.getRoomId();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        LocalDateTime toDate \u003d LocalDateTime.now().plusDays(2);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        CheckInCommand checkInCommand \u003d new CheckInCommand(personId, roomId, toDate);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        ModelStubWithBooking modelStubWithBooking \u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            new ModelStubWithBooking();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        CommandResult commandResult \u003d checkInCommand.execute(modelStubWithBooking);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        assertEquals(String.format(CheckInCommand.MESSAGE_SUCCESS, roomId, personId),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    private abstract class ModelStub implements Model {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        protected final ArrayList\u003cRoom\u003e roomList;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        protected final ArrayList\u003cBooking\u003e bookingList;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        protected final ArrayList\u003cStay\u003e stayList;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        protected final Hotel hotel;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public ModelStub() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            roomList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            bookingList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            stayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            hotel \u003d new Hotel();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        public Path getBookKeeperFilePath() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public ReadOnlyHotel getHotel() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        public boolean hasPersonId(PersonId personId) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public Optional\u003cPerson\u003e findPersonWithId(PersonId personId) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public ObservableList\u003cRoom\u003e getRoomList() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        public ObservableList\u003cBooking\u003e getBookingList() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public Optional\u003cRoom\u003e findRoom(RoomId roomNum) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            requireNonNull(roomNum);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            return roomList"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                .filter(u -\u003e u.getRoomId().equals(roomNum))"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public boolean checkOut(Room room) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        public boolean isGuestCheckedIn(Person person, Room room) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public void bookRoom(Booking booking) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            requireNonNull(booking);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            bookingList.add(booking);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public void deleteBooking(Booking booking) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        public void addRoom(String roomName) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        public boolean hasRoom(String roomNum) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            requireNonNull(roomNum);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            return hotel.hasRoom(roomNum);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        public boolean hasTier(Tier tier) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        public void addTier(Tier tier, ArrayList\u003cString\u003e roomNums) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Billing System \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        public ReadOnlyBookKeeper getBookKeeper() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        public void setRoomCost(Room room, RoomCost roomCost) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        public Optional\u003cAvailableService\u003e findService(AvailableServiceId service) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        public void chargeRoomCost(RoomId roomId, RoomCost roomCost, Stay stay) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        public void chargeService(RoomId roomId, AvailableService service) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        public void deleteChargedService(RoomId roomId, AvailableService service) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        public void addBill(Bill bill) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        public void deleteBill(RoomId roomId) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        public ObservableList\u003cBill\u003e findBillList(PersonId personId) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        public Optional\u003cBill\u003e findBill(RoomId roomId) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        public ObservableList\u003cRoom\u003e getFilteredRoomList() {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        public ObservableList\u003cAvailableService\u003e getFilteredServiceList() {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        public ObservableList\u003cBill\u003e getFilteredBillList() {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        public Cost getGuestBillsTotal(PersonId personId) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "hmtey"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    private class ModelStubWithRoomsAndPerson extends ModelStub {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        protected ArrayList\u003cPerson\u003e personList;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        ModelStubWithRoomsAndPerson() {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            this.roomList.add(BEST_ROOM);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            this.roomList.add(WORST_ROOM);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            this.personList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            this.personList.add(ALICE);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            this.personList.add(BOB);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        public Path getHotelFilePath() {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public Optional\u003cPerson\u003e findPersonWithId(PersonId personId) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            return personList"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                .filter(u -\u003e u.getPersonId() \u003d\u003d personId)"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public ObservableList\u003cBooking\u003e getFilteredBookingList() {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public ObservableList\u003cRoom\u003e getFilteredRoomList() {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public void updateFilteredBookingList(Predicate\u003cBooking\u003e predicate) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        public void updateFilteredServiceList(Predicate\u003cAvailableService\u003e predicate) {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        public void updateFilteredBillList(Predicate\u003cBill\u003e predicate) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public void updateFilteredRoomList(Predicate\u003cRoom\u003e predicate) {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public Optional\u003cBooking\u003e getCurrentStay(Room room) {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public boolean isRoomFree(Person person, Room room, TimeFrame duration) {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            requireNonNull(room);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            requireNonNull(duration);"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            //timeframe create successfully mean no bogus duration"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            boolean isRoomCurrentlyEmpty \u003d stayList"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                .noneMatch(u -\u003e u.isClash(room, duration));"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            boolean isBookingNotClash \u003d bookingList"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                .filter(u -\u003e u.getPayee() !\u003d person)"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "                .noneMatch(u -\u003e u.isClash(room, duration));"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            return isRoomCurrentlyEmpty \u0026\u0026 isBookingNotClash;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public void checkIn(Stay stay) { }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public Optional\u003cStay\u003e findStay(Room room) {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public void addRoom(String roomName, Tier tier, RoomCost cost) {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        public boolean hasBooking(Booking booking) {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            return hotel.hasBooking(booking);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public void addAvailableService(AvailableService service) {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public void chargeExtendRoomCost(RoomId roomId, RoomCost roomCost, Stay stay, LocalDateTime fromDate) {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public void deleteRoom(String roomNum) {"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public void deleteAvailableService(AvailableServiceId id) {"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public Optional\u003cBooking\u003e findBookingById(String bookingId) {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public void extendRoom(Stay stay, LocalDateTime toDate) {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    private class ModelStubWithBooking extends ModelStubWithRoomsAndPerson {"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        ModelStubWithBooking() {"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            Booking booking \u003d new Booking(ALICE, BEST_ROOM, LocalDateTime.now(), LocalDateTime.now().plusDays(1));"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            bookingList.add(booking);"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        }"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        public void bookRoom(Booking booking) { }"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 23,
      "sancharib-git": 10,
      "dawidjaja": 393,
      "youaremysky99": 32,
      "hmtey": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.MatchPersonIdPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.person.MatchPersonPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public static final String VALID_PERSON_ID_AMY \u003d \"A0000000\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public static final String VALID_PERSON_ID_BOB \u003d \"A0000000\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public static final String VALID_REMARK_AMY \u003d \"Like skiing.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public static final String VALID_REMARK_BOB \u003d \"Favourite pastime: Eating\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public static final String PERSON_ID_DESC_AMY \u003d \" \" + PREFIX_ID + VALID_PERSON_ID_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public static final String PERSON_ID_DESC_BOB \u003d \" \" + PREFIX_ID + VALID_PERSON_ID_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        MatchPersonPredicate predicate \u003d new MatchPersonPredicate();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        predicate.setPersonIdPredicate(new MatchPersonIdPredicate("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                new HashSet\u003c\u003e(List.of(person.getPersonId())))"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        );"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 10,
      "sancharib-git": 6,
      "youaremysky99": 4,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 1,
      "-": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteRoomCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.BookKeeper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.Hotel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Integration test, interacting with model"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class DeleteRoomCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Hotel(), new BookKeeper());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void execute_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String roomName \u003d \"13E\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                model.getHotel(), model.getBookKeeper());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        expectedModel.addRoom(roomName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        expectedModel.deleteRoom(roomName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        model.addRoom(roomName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertCommandSuccess(new DeleteRoomCommand(roomName), model,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                String.format(DeleteRoomCommand.MESSAGE_SUCCESS, roomName), expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void execute_roomNotFound() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String roomName \u003d \"13E\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                model.getHotel(), model.getBookKeeper());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertCommandFailure(new DeleteRoomCommand(roomName), model, DeleteRoomCommand.MESSAGE_ROOM_NOT_FOUND);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 43,
      "hmtey": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteRoomCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Tests for DeleteRoomCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class DeleteRoomCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String firstName \u003d \"12E\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String secondName \u003d \"12F\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Room firstRoom \u003d new Room(firstName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Room secondRoom \u003d new Room(secondName);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        DeleteRoomCommand deleteFirst \u003d new DeleteRoomCommand(firstName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        DeleteRoomCommand deleteSecond \u003d new DeleteRoomCommand(secondName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        // same object returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertTrue(deleteFirst.equals(deleteFirst));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        // same values returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        DeleteRoomCommand copyFirst \u003d new DeleteRoomCommand(firstName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertTrue(deleteFirst.equals(copyFirst));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        // different types, returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertFalse(deleteFirst.equals(1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        // null, returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertFalse(deleteFirst.equals(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        // different room name, returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertFalse(deleteFirst.equals(deleteSecond));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteServiceCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.BookKeeper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.Hotel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.bill.AvailableService;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.bill.Cost;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ids.AvailableServiceId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Integration test, interacting with model"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class DeleteServiceCommandIntegrationTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Hotel(), new BookKeeper());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void execute_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String description \u003d \"Wash clothes\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        AvailableServiceId id \u003d new AvailableServiceId(\"WC\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Cost cost \u003d new Cost(\"100.00\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        AvailableService service \u003d new AvailableService(description, cost, id);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                model.getHotel(), model.getBookKeeper());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        expectedModel.addAvailableService(service);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        expectedModel.deleteAvailableService(id);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        model.addAvailableService(service);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertCommandSuccess(new DeleteServiceCommand(id), model,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                String.format(DeleteServiceCommand.MESSAGE_SUCCESS, id.toString()), expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void execute_serviceNotFound() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String description \u003d \"Wash clothes\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        AvailableServiceId id \u003d new AvailableServiceId(\"WC\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Cost cost \u003d new Cost(\"100.00\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        AvailableService service \u003d new AvailableService(description, cost, id);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                model.getHotel(), model.getBookKeeper());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        expectedModel.addAvailableService(service);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        expectedModel.deleteAvailableService(id);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertCommandFailure(new DeleteServiceCommand(id), model,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                String.format(DeleteServiceCommand.MESSAGE_SERVICE_NOT_FOUND, id.toString()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 57,
      "hmtey": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteServiceCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.ids.AvailableServiceId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Tests for DeleteServiceCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class DeleteServiceCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String firstService \u003d \"WC\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String secondService \u003d \"BJ\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        AvailableServiceId firstId \u003d new AvailableServiceId(firstService);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        AvailableServiceId secondId \u003d new AvailableServiceId(secondService);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        DeleteServiceCommand first \u003d new DeleteServiceCommand(firstId);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        DeleteServiceCommand second \u003d new DeleteServiceCommand(secondId);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        // same object, returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertTrue(first.equals(first));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        // same values, returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        DeleteServiceCommand copyFirst \u003d new DeleteServiceCommand(firstId);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertTrue(copyFirst.equals(first));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        // different types, returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertFalse(first.equals(1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        // null, returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertFalse(first.equals(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        // different values, returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertFalse(first.equals(second));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 1,
      "-": 172
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindGuestCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindGuestCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "public class FindGuestCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        HashSet\u003cName\u003e nameList \u003d new HashSet\u003c\u003e(List.of(new Name(\"Alice\")));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        HashSet\u003cPersonId\u003e personIdList \u003d new HashSet\u003c\u003e(List.of(new PersonId(\"A0\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        FindGuestCommand findFirstCommand \u003d new FindGuestCommand(nameList, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        FindGuestCommand findSecondCommand \u003d new FindGuestCommand(new HashSet\u003c\u003e(), personIdList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        FindGuestCommand findFirstCommandCopy \u003d new FindGuestCommand(nameList, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        List\u003cName\u003e nameList \u003d List.of(ALICE.getName(), BENSON.getName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        List\u003cPersonId\u003e personIdList \u003d List.of(CARL.getPersonId());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        Predicate\u003cPerson\u003e predicate \u003d preparePredicate(nameList, personIdList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        FindGuestCommand command \u003d prepareCommand(nameList, personIdList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, CARL), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private Predicate\u003cPerson\u003e preparePredicate(List\u003cName\u003e nameList, List\u003cPersonId\u003e personIdList) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return u -\u003e nameList.contains(u.getName())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            || personIdList.contains(u.getPersonId());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private FindGuestCommand prepareCommand(List\u003cName\u003e nameList, List\u003cPersonId\u003e personIdList) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return new FindGuestCommand(new HashSet\u003c\u003e(nameList), new HashSet\u003c\u003e(personIdList));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 31,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ModelStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ReadOnlyBookKeeper;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.ReadOnlyHotel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.model.hotel.Stay;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.bill.AvailableService;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.bill.Bill;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.Cost;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.bill.RoomCost;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.booking.Booking;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.room.Tier;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ids.AvailableServiceId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.timeframe.TimeFrame;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " * Model stub for testing"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public Path getHotelFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public Path getBookKeeperFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public ReadOnlyHotel getHotel() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public ReadOnlyBookKeeper getBookKeeper() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public boolean hasPersonId(PersonId personId) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public Optional\u003cPerson\u003e findPersonWithId(PersonId personId) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public ObservableList\u003cBooking\u003e getFilteredBookingList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public ObservableList\u003cRoom\u003e getFilteredRoomList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public ObservableList\u003cAvailableService\u003e getFilteredServiceList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public ObservableList\u003cBill\u003e getFilteredBillList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void updateFilteredBookingList(Predicate\u003cBooking\u003e predicate) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public void updateFilteredServiceList(Predicate\u003cAvailableService\u003e predicate) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public void updateFilteredBillList(Predicate\u003cBill\u003e predicate) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void updateFilteredRoomList(Predicate\u003cRoom\u003e predicate) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public ObservableList\u003cRoom\u003e getRoomList() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public ObservableList\u003cBooking\u003e getBookingList() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public Optional\u003cBooking\u003e getCurrentStay(Room room) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public Optional\u003cRoom\u003e findRoom(RoomId roomNum) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public boolean isRoomFree(Person person, Room room, TimeFrame duration) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public boolean isGuestCheckedIn(Person person, Room room) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public void bookRoom(Booking booking) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public void checkIn(Stay stay) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public Optional\u003cStay\u003e findStay(Room room) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public boolean checkOut(Room room) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public void deleteBooking(Booking booking) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public void addRoom(String roomName) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public void addRoom(String roomName, Tier tier, RoomCost cost) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public boolean hasRoom(String roomName) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public boolean hasBooking(Booking booking) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public boolean hasTier(Tier tier) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public void addTier(Tier tier, ArrayList\u003cString\u003e roomNums) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public void setRoomCost(Room room, RoomCost roomCost) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void addAvailableService(AvailableService service) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public Optional\u003cAvailableService\u003e findService(AvailableServiceId service) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void chargeRoomCost(RoomId roomId, RoomCost roomCost, Stay stay) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public void chargeExtendRoomCost(RoomId roomId, RoomCost roomCost, Stay stay, LocalDateTime fromDate) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void chargeService(RoomId roomId, AvailableService service) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void deleteChargedService(RoomId roomId, AvailableService service) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void deleteRoom(String roomNum) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void deleteAvailableService(AvailableServiceId id) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void addBill(Bill bill) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void deleteBill(RoomId roomId) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public ObservableList\u003cBill\u003e findBillList(PersonId personId) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public Optional\u003cBill\u003e findBill(RoomId roomId) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public Cost getGuestBillsTotal(PersonId personId) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public Optional\u003cBooking\u003e findBookingById(String bookingId) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public void extendRoom(Stay stay, LocalDateTime toDate) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 208,
      "sancharib-git": 5,
      "dawidjaja": 28,
      "youaremysky99": 35,
      "hmtey": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RemarkCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Remark;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for RemarkCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "public class RemarkCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private static final String REMARK_STUB \u003d \"Some remark\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void execute_addRemarkUnfilteredList_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(firstPerson).withRemark(REMARK_STUB).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                new Remark(editedPerson.getRemark().value));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        expectedModel.setPerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void execute_deleteRemarkUnfilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(firstPerson).withRemark(\"\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                new Remark(editedPerson.getRemark().toString()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_DELETE_REMARK_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        expectedModel.setPerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                .withRemark(REMARK_STUB).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON, new Remark(editedPerson.getRemark().value));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        expectedModel.setPerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(outOfBoundIndex, new Remark(VALID_REMARK_BOB));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(outOfBoundIndex, new Remark(VALID_REMARK_BOB));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        final RemarkCommand standardCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                new Remark(VALID_REMARK_AMY));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        RemarkCommand commandWithSameValues \u003d new RemarkCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                new Remark(VALID_REMARK_AMY));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        assertFalse(standardCommand.equals(new RemarkCommand(INDEX_SECOND_PERSON,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                new Remark(VALID_REMARK_AMY))));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        assertFalse(standardCommand.equals(new RemarkCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                new Remark(VALID_REMARK_BOB))));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 134,
      "tanphatls987": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ReserveCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.Reserve;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.testutil.RoomBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "/***"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * Contains integration tests with model and unit tests for reservecommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "public class ReserveCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private static final Person ALICE \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private static final Room DEFAULT_ROOM \u003d new RoomBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private static final LocalDateTime FROM_DATE \u003d LocalDateTime.parse(\"2020-12-12T12:30:00\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private static final LocalDateTime TO_DATE \u003d LocalDateTime.parse(\"2020-12-23T12:30:00\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private static final Reserve RESERVE_STUB \u003d new Reserve(ALICE, DEFAULT_ROOM, FROM_DATE, TO_DATE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SetRoomCostCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.bill.RoomCost;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.room.Tier;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.testutil.TypicalRooms;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "class SetRoomCostCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private Model modelStub \u003d new ModelStubSetRoomCost();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    void executeSuccess() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        Room bestRoom \u003d TypicalRooms.BEST_ROOM;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        String newPrice \u003d \"24.00\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        SetRoomCostCommand command \u003d new SetRoomCostCommand(bestRoom.getRoomId(), new RoomCost(newPrice));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            bestRoom.getRoomId(), newPrice);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        CommandResult commandResult \u003d command.execute(modelStub);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        assertEquals(commandResult.getFeedbackToUser(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            String.format(SetRoomCostCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                bestRoom.getRoomNum(), newPrice)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    void executeFailure_negative_price() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        SetRoomCostCommand command \u003d new SetRoomCostCommand(new RoomId(\"nonexist\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            new RoomCost(\"-2.00\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            SetRoomCostCommand.MESSAGE_ROOM_COST_INVALID, () -\u003e command.execute(modelStub)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private class ModelStubSetRoomCost extends ModelStub {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        public Optional\u003cRoom\u003e findRoom(RoomId roomNum) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            return Optional.of(new Room(roomNum.toString(), new Tier(), new RoomCost()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        public void setRoomCost(Room room, RoomCost cost) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public void updateFilteredRoomList(Predicate\u003cRoom\u003e predicate) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 57,
      "youaremysky99": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddGuestCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PERSON_ID_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PERSON_ID_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ID_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.logic.commands.AddGuestCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "public class AddGuestCommandParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private AddGuestCommandParser parser \u003d new AddGuestCommandParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                + PERSON_ID_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                + TAG_DESC_FRIEND, new AddGuestCommand(expectedPerson));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                + PERSON_ID_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                + TAG_DESC_FRIEND, new AddGuestCommand(expectedPerson));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PERSON_ID_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                + TAG_DESC_FRIEND, new AddGuestCommand(expectedPerson));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PERSON_ID_DESC_BOB"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                + EMAIL_DESC_BOB + TAG_DESC_FRIEND, new AddGuestCommand(expectedPerson));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PERSON_ID_DESC_BOB"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                + TAG_DESC_FRIEND, new AddGuestCommand(expectedPerson));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PERSON_ID_DESC_BOB"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddGuestCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PERSON_ID_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY ,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                new AddGuestCommand(expectedPerson));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGuestCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PERSON_ID_DESC_BOB"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB ,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PERSON_ID_DESC_BOB"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                + VALID_PHONE_BOB + EMAIL_DESC_BOB ,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PERSON_ID_DESC_BOB"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                + PHONE_DESC_BOB + VALID_EMAIL_BOB ,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PERSON_ID_BOB"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                + VALID_PHONE_BOB + VALID_EMAIL_BOB ,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PERSON_ID_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PERSON_ID_DESC_BOB"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                + INVALID_PHONE_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PERSON_ID_DESC_BOB"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                + PHONE_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PERSON_ID_DESC_BOB"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PERSON_ID_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB ,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                + PERSON_ID_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGuestCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 52,
      "sancharib-git": 1,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddTierCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOMNUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.logic.commands.AddTierCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.testutil.TypicalRooms;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Test parsers"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class AddTierCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private AddTierCommandParser parser \u003d new AddTierCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void parse_missingCompulsoryFields_failure() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTierCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        List\u003cRoom\u003e rooms \u003d TypicalRooms.getTypicalRooms();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        //no parameters"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertParseFailure(parser, AddTierCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        //no tier name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String userInput \u003d PREFIX_ROOMNUMBER + rooms.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertParseFailure(parser, AddTierCommand.COMMAND_WORD + userInput, expectedMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        //no room number"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        userInput \u003d PREFIX_TIER + \" gold\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertParseFailure(parser, AddTierCommand.COMMAND_WORD + userInput, expectedMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertParseFailure(parser, \" \","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTierCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 1,
      "youaremysky99": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        //assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                + EMAIL_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 3,
      "sancharib-git": 10,
      "-": 186
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FetchBillCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hmtey"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hmtey"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOMNUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hmtey"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.logic.commands.FetchBillCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.testutil.RoomBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hmtey"
        },
        "content": "public class FetchBillCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private static final Person Guest \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private static final PersonId PersonId \u003d Guest.getPersonId();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private static final Room Room \u003d new RoomBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private static final String RoomNum \u003d Room.getRoomNum();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private FetchBillCommandParser parser \u003d new FetchBillCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        // with roomId"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        String userInput \u003d FetchBillCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                + PREFIX_ID + \" \" + PersonId.toString()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                + PREFIX_ROOMNUMBER + Room.getRoomNum();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        FetchBillCommand expectedCommand \u003d new FetchBillCommand(PersonId, RoomNum);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        // without roomId"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        String userInput \u003d FetchBillCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                + PREFIX_ID + \" \" + PersonId.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        FetchBillCommand expectedCommand \u003d new FetchBillCommand(PersonId);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public void parse_missingCompulsoryField_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FetchBillCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        assertParseFailure(parser, FetchBillCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        // no personId"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        assertParseFailure(parser, FetchBillCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hmtey"
        },
        "content": "                + PREFIX_ROOMNUMBER + \" 101\", expectedMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hmtey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 1,
      "hmtey": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindGuestCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.logic.commands.FindGuestCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "public class FindGuestCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private FindGuestCommandParser parser \u003d new FindGuestCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                FindGuestCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        );"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        HashSet\u003cName\u003e nameUse \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        nameUse.add(new Name(\"Alice\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        nameUse.add(new Name(\"Bob\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        HashSet\u003cPersonId\u003e personIdUse \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        personIdUse.add(new PersonId(\"B000000\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        personIdUse.add(new PersonId(\"D000000\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        StringBuilder userInput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        nameUse.forEach(u -\u003e userInput.append(PREFIX_NAME + u.fullName + \" \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        personIdUse.forEach(u -\u003e userInput.append(PREFIX_ID + u.toString() + \" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        assertEquals(userInput.toString(), \"n/Bob n/Alice i/B000000 i/D000000 \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        FindGuestCommand expectedFindGuestCommand \u003d new FindGuestCommand(nameUse, personIdUse);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        assertParseSuccess(parser, \" \" + userInput.toString(), expectedFindGuestCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/MorpheusParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.logic.commands.AddGuestCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.logic.commands.FindGuestCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Remark;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hmtey"
        },
        "content": "public class MorpheusParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private final MorpheusParser parser \u003d new MorpheusParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public void parseCommand_addGuest() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        AddGuestCommand command \u003d (AddGuestCommand) parser.parseCommand(PersonUtil.getAddGuestCommand(person));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        assertEquals(new AddGuestCommand(person), command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        List\u003cString\u003e nameList \u003d List.of(\"John\", \"Alex\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        List\u003cString\u003e personIdList \u003d List.of(\"B13\", \"C28\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        FindGuestCommand command \u003d (FindGuestCommand) parser.parseCommand("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                FindGuestCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                    + nameList.stream().map(p -\u003e PREFIX_NAME + p)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                        .collect(Collectors.joining(\" \")) + \" \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                    + personIdList.stream().map(p -\u003e PREFIX_ID + p)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                        .collect(Collectors.joining(\" \"))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        );"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        HashSet\u003cName\u003e nameHashSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        nameList.forEach(u -\u003e nameHashSet.add(new Name(u)));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        HashSet\u003cPersonId\u003e personIdHashSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        personIdList.forEach(u -\u003e personIdHashSet.add(new PersonId(u)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        assertEquals(new FindGuestCommand(nameHashSet, personIdHashSet), command);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    public void parseCommand_remark() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        final Remark remark \u003d new Remark(\"Some remark.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        RemarkCommand command \u003d (RemarkCommand) parser.parseCommand(RemarkCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_REMARK + remark.value);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        assertEquals(new RemarkCommand(INDEX_FIRST_PERSON, remark), command);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 26,
      "dawidjaja": 10,
      "-": 86,
      "hmtey": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 3,
      "-": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RemarkCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Remark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "public class RemarkCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private RemarkCommandParser parser \u003d new RemarkCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private final String nonEmptyRemark \u003d \"Some remark.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void parse_indexSpecified_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        // have remark"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_REMARK + nonEmptyRemark;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        RemarkCommand expectedCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON, new Remark(nonEmptyRemark));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        // no remark"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_REMARK;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        expectedCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON, new Remark(\"\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void parse_missingCompulsoryField_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        assertParseFailure(parser, RemarkCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        // no index"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        assertParseFailure(parser, RemarkCommand.COMMAND_WORD + \" \" + nonEmptyRemark, expectedMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 42,
      "tanphatls987": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ReserveCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROMDATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOMNUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TODATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.logic.commands.ReserveCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.testutil.RoomBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "public class ReserveCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private static final Room Room \u003d new RoomBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private static final Person Payee \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private static final LocalDateTime From_Date \u003d LocalDateTime.parse(\"2020-12-12T12:30:00\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private static final LocalDateTime To_Date \u003d LocalDateTime.parse(\"2020-12-23T12:30:00\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private static final PersonId Id \u003d Payee.getPersonId();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private ReserveCommandParser parser \u003d new ReserveCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void parse_personIdSpecified_success() throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        String userInput \u003d \" \" + PREFIX_ID + Id.toString() + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                + PREFIX_ROOMNUMBER + Room.getRoomNum() + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                + PREFIX_FROMDATE + \"2020-12-12T12:30:00 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                + PREFIX_TODATE + \"2020-12-23T12:30:00 \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        ReserveCommand expectedCommand \u003d new ReserveCommand(Id, Room.getRoomNum(), From_Date, To_Date);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        assertTrue(parser.parse(userInput).equals(expectedCommand));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void parse_missingCompulsoryField_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReserveCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        assertParseFailure(parser, ReserveCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        // no personId"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        String userInput \u003d PREFIX_ROOMNUMBER + Room.getRoomNum() + PREFIX_FROMDATE"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                + From_Date + PREFIX_TODATE + To_Date;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        assertParseFailure(parser, ReserveCommand.COMMAND_WORD + userInput, expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        //no room number"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        String input \u003d PREFIX_ID + Id.toString() + PREFIX_FROMDATE"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "                + From_Date + PREFIX_TODATE + To_Date;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        assertParseFailure(parser, ReserveCommand.COMMAND_WORD + input, expectedMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        //no dates"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        String userinput \u003d PREFIX_ID + Id.toString() + PREFIX_ROOMNUMBER + Room.getRoomNum();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        assertParseFailure(parser, ReserveCommand.COMMAND_WORD + userinput, expectedMessage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    //add invalid value tests"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 59,
      "youaremysky99": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 2,
      "sancharib-git": 2,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/model/HotelTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Test for Hotel"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class HotelTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private final Hotel hotel \u003d new Hotel();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertEquals(Collections.emptyList(), hotel.getRoomList());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.BEST_ROOM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.WORST_ROOM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.MatchPersonIdPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import seedu.address.model.hotel.person.MatchPersonPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        assertEquals(new Hotel(), new Hotel(modelManager.getHotel(), new AddressBook()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void hasRoom_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasRoom(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void hasRoom_roomNotInHotel_returnsFalse() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertFalse(modelManager.hasRoom(BEST_ROOM.getRoomNum()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void hasRoom_roomInHotel_returnsTrue() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        modelManager.addRoom(BEST_ROOM.getRoomNum());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        modelManager.addRoom(WORST_ROOM.getRoomNum());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertTrue(modelManager.hasRoom(BEST_ROOM.getRoomNum()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        MatchPersonPredicate predicate \u003d new MatchPersonPredicate();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        predicate.setPersonIdPredicate(new MatchPersonIdPredicate(List.of(ALICE.getPersonId())));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        modelManager.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 2,
      "dawidjaja": 1,
      "youaremysky99": 24,
      "-": 128
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hotel/person/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.model.hotel.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 1,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hotel/person/MatchNamePredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.model.hotel.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "class MatchNamePredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    void test() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        Person alice \u003d ALICE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        List\u003cName\u003e nameList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        nameList.add(BENSON.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        MatchNamePredicate pred1 \u003d new MatchNamePredicate(nameList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        nameList.add(alice.getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        MatchNamePredicate pred2 \u003d new MatchNamePredicate(nameList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertFalse(pred1.test(alice.getName()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertTrue(pred1.test(BENSON.getName()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertTrue(pred2.test(alice.getName()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 24,
      "dawidjaja": 4,
      "youaremysky99": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hotel/person/MatchPersonIdPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.model.hotel.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "class MatchPersonIdPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    void test() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        Person alice \u003d ALICE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        List\u003cPersonId\u003e personIdList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "        personIdList.add(BENSON.getPersonId());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        MatchPersonIdPredicate pred1 \u003d new MatchPersonIdPredicate(personIdList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        personIdList.add(alice.getPersonId());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        MatchPersonIdPredicate pred2 \u003d new MatchPersonIdPredicate(personIdList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertFalse(pred1.test(alice.getPersonId()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        assertTrue(pred2.test(alice.getPersonId()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 25,
      "dawidjaja": 4,
      "youaremysky99": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hotel/person/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.model.hotel.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hotel/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.model.hotel.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 1,
      "sancharib-git": 3,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hotel/person/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.model.hotel.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hotel/person/RemarkTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.model.hotel.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "public class RemarkTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        Remark remark \u003d new Remark(\"Hello\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        assertTrue(remark.equals(remark));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        Remark remarkCopy \u003d new Remark(remark.value);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        assertTrue(remark.equals(remarkCopy));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        assertFalse(remark.equals(1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        assertFalse(remark.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        Remark differentRemark \u003d new Remark(\"Bye\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        assertFalse(remark.equals(differentRemark));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 1,
      "sancharib-git": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/model/hotel/person/UniquePersonListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.model.hotel.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 3,
      "sancharib-git": 2,
      "-": 164
    }
  },
  {
    "path": "src/test/java/seedu/address/model/timeframe/TimeFrameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "package seedu.address.model.timeframe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "class TimeFrameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    void isClash() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        TimeFrame frame1 \u003d new TimeFrame(LocalDateTime.of(2020, 2, 10, 2, 30, 0),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            LocalDateTime.of(2020, 2, 10, 3, 0, 0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        TimeFrame frame2 \u003d new TimeFrame(LocalDateTime.of(2020, 2, 10, 3, 0, 0),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            LocalDateTime.MAX);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        TimeFrame frame3 \u003d new TimeFrame(LocalDateTime.MIN,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            LocalDateTime.of(2020, 2, 10, 2, 45, 0));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        assertTrue(frame1.isClash(frame3));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        assertFalse(frame1.isClash(frame2));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        assertFalse(frame2.isClash(frame3));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private static final String VALID_REMARK \u003d BENSON.getRemark().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private static final String VALID_ID \u003d BENSON.getPersonId().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_ID, VALID_PHONE, VALID_EMAIL, VALID_REMARK, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                new JsonAdaptedPerson(null, VALID_ID, VALID_PHONE, VALID_EMAIL, VALID_REMARK, VALID_TAGS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_ID, INVALID_PHONE, VALID_EMAIL, VALID_REMARK, VALID_TAGS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_ID, null, VALID_EMAIL, VALID_REMARK, VALID_TAGS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_ID, VALID_PHONE, INVALID_EMAIL, VALID_REMARK, VALID_TAGS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_ID, VALID_PHONE, null, VALID_REMARK, VALID_TAGS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_ID, VALID_PHONE, VALID_EMAIL, VALID_REMARK, invalidTags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 12,
      "sancharib-git": 3,
      "-": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.Hotel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.ReadOnlyHotel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, ReadOnlyHotel hotel, String filePath) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), new Hotel(), null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 5,
      "-": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        JsonHotelStorage hotelStorage \u003d new JsonHotelStorage(getTempFilePath(\"hs\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        JsonBookKeeperStorage bookKeeperStorage \u003d new JsonBookKeeperStorage(getTempFilePath(\"bks\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, hotelStorage, bookKeeperStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 1,
      "-": 51,
      "hmtey": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        //descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /*public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 4,
      "sancharib-git": 3,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Email;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Remark;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.ids.PersonId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public static final String DEFAULT_ID \u003d \"A000000\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public static final String DEFAULT_REMARK \u003d \"She likes aardvarks.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    private PersonId personId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        personId \u003d new PersonId(DEFAULT_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        remark \u003d new Remark(DEFAULT_REMARK);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        personId \u003d personToCopy.getPersonId();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        remark \u003d personToCopy.getRemark();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Sets the {@code PersonId} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public PersonBuilder withPersonId(String personId) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.personId \u003d new PersonId(personId);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Sets the {@code Remark} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public PersonBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        this.remark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return new Person(name, personId, phone, email, remark, tags);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 14,
      "sancharib-git": 14,
      "-": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.logic.commands.AddGuestCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "     * Returns an add guest command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public static String getAddGuestCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        return AddGuestCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        sb.append(PREFIX_ID + person.getPersonId().toString() + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 7,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RoomBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hmtey"
        },
        "content": "import seedu.address.model.hotel.bill.RoomCost;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Tier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.ids.RoomId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "/***"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * A utility class to help build rooms"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "public class RoomBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public static final Tier DEFAULT_TIER \u003d new Tier();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public static final String DEFAULT_ROOMNUM \u003d \"001\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public static final RoomId DEFAULT_ROOMID \u003d RoomId.generate(DEFAULT_ROOMNUM);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public static final RoomCost DEFAULT_ROOMCOST \u003d new RoomCost();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private Tier roomTier;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private String roomNum;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    private RoomId roomId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    private RoomCost roomCost;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Create new room builder."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public RoomBuilder() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        roomTier \u003d DEFAULT_TIER;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        roomNum \u003d DEFAULT_ROOMNUM;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        roomId \u003d DEFAULT_ROOMID;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        roomCost \u003d DEFAULT_ROOMCOST;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Sets the {@code tier} of the {@code Room} that we are building."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hmtey"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public RoomBuilder withTier(String tier) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        this.roomTier \u003d new Tier(tier);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Sets the {@code roomNum} of the {@code Room} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public RoomBuilder withRoomNum(String roomNum) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        this.roomNum \u003d roomNum;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hmtey"
        },
        "content": "     * Sets the {@code roomCost} of the {@code Room} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public RoomBuilder withRoomCost(String roomCost) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        this.roomCost \u003d new RoomCost(roomCost);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    public Room build() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hmtey"
        },
        "content": "        return new Room(roomNum, roomTier, roomCost);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hmtey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 40,
      "tanphatls987": 1,
      "youaremysky99": 9,
      "hmtey": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawidjaja"
        },
        "content": "            + \"}\\n\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawidjaja": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 1,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TierBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Tier;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * A utility class to help build tiers"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class TierBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final Tier DEFAULT_TIER \u003d new Tier();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Create a tier builder."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public TierBuilder() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Build a default tier"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public Tier build() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return DEFAULT_TIER;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Build a tier with tier name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public Tier withTierName(String tierName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new Tier(tierName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 1,
      "youaremysky99": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalHotel.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.Hotel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * Container for typical hotel for testing"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": " * */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "public class TypicalHotel {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     * Returns an {@code Hotel} with all the typical rooms."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    public static Hotel getTypicalHotel() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        Hotel hotel \u003d new Hotel();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        for (Room room : TypicalRooms.getTypicalRooms()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            hotel.addRoom(room);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "        return hotel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ID_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "import seedu.address.model.hotel.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            .withPersonId(\"A000000\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            .withPhone(\"94351253\").withRemark(\"She likes aardvarks.\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            .withPersonId(\"B000000\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withRemark(\"He can\u0027t take beer!\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            .withPersonId(\"C000000\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            .withPhone(\"95352563\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            .withEmail(\"heinz@example.com\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            .withPersonId(\"D000000\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            .withPhone(\"87652533\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            .withPersonId(\"E000000\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            .withPhone(\"9482224\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            .withEmail(\"werner@example.com\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPersonId(\"F000000\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            .withPhone(\"9482427\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            .withEmail(\"lydia@example.com\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            .withPersonId(\"G000000\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            .withEmail(\"anna@example.com\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPersonId(\"H000000\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            .withPhone(\"8482424\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            .withEmail(\"stefan@example.com\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPersonId(\"I000000\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            .withPhone(\"8482131\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            .withEmail(\"hans@example.com\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            .withPersonId(VALID_PERSON_ID_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "            .withPersonId(VALID_PERSON_ID_AMY).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanphatls987": 25,
      "sancharib-git": 12,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalRooms.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "import seedu.address.model.hotel.room.Room;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * A container of typical rooms for testing."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class TypicalRooms {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public static final Room BEST_ROOM \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        .withTier(\"GOLD\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        .withRoomNum(\"100\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        .withRoomCost(\"50.00\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "    public static final Room WORST_ROOM \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        .withTier(\"BRONZE\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        .withRoomNum(\"013\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        .withRoomCost(\"10.00\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanphatls987"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * get list of typical rooms."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static ArrayList\u003cRoom\u003e getTypicalRooms() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BEST_ROOM, WORST_ROOM));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 2,
      "tanphatls987": 10,
      "youaremysky99": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 1,
      "-": 114
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sancharib-git"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"seedu.address.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "sancharib-git": 1,
      "-": 6
    }
  }
]
